openapi: 3.0.0
info:
  title: 2020 HMIS
  version: "1.0.10"
  description: |
       **Note :**
              Please note that the partial updates are supported via PUT APIs. However, Note that If "null" value is passed for any element, in the PUT request body, it will be ignored. An empty string value should be sent (instead of "null" value) for the elements that need to be updated with NULL values.
servers:
  - url: 'https://api.hslynk.com/hmis-clientapi/rest/v2020'
paths:
  /clients:
    get:
      responses:
        '200':
          description: OK   Everything is working
          content:
            application/json:
                  schema:
                    {
                      "type": "object",
                      "required": [
                        "Clients"
                      ],
                      "properties": {
                        "Clients": {
                          "type": "object",
                          "required": [
                            "pagination",
                            "clients"
                          ],
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "required": [
                                "from",
                                "returned",
                                "total",
                                "maximum",
                                "sort"
                              ],
                              "properties": {
                                "from": {
                                  "type": "integer"
                                },
                                "returned": {
                                  "type": "integer"
                                },
                                "total": {
                                  "type": "integer"
                                },
                                "maximum": {
                                  "type": "integer"
                                },
                                "sort": {
                                  "type": "object"
                                }
                              }
                            },
                            "clients": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "clientId",
                                  "dedupClientId",
                                  "firstName",
                                  "middleName",
                                  "lastName",
                                  "nameSuffix",
                                  "nameDataQuality",
                                  "ssn",
                                  "ssnDataQuality",
                                  "dob",
                                  "dobDataQuality",
                                  "race",
                                  "ethnicity",
                                  "gender",
                                  "veteranStatus"
                                ],
                                "properties": {
                                  "clientId": {
                                    "type": "string",
                                    "format": "uuid",
                                  },
                                  "dedupClientId": {
                                    "type": "string",
                                    "format": "uuid",
                                  },
                                  "firstName": {
                                    "type": "string",
                                  },
                                  "middleName": {
                                    "type": "string",
                                  },
                                  "lastName": {
                                    "type": "string",
                                  },
                                  "nameSuffix": {
                                    "type": "string",
                                  },
                                  "nameDataQuality": {
                                    "type": "integer"
                                  },
                                  "ssn": {
                                    "type": "string",
                                  },
                                  "ssnDataQuality": {
                                    "type": "integer"
                                  },
                                  "dob": {
                                    "type": "integer"
                                  },
                                  "dobDataQuality": {
                                    "type": "integer"
                                  },
                                  "race": {
                                    "type": "integer"
                                  },
                                  "ethnicity": {
                                    "type": "integer"
                                  },
                                  "gender": {
                                    "type": "integer"
                                  },
                                  "veteranStatus": {
                                    "type": "string",
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  example:
                    Clients:
                      pagination:
                        from: 0
                        returned: 3
                        total: 30
                        maximum: 30
                        sort: {}
                      clients:
                        - clientId: 3a93fe32-8118-4883-982f-a267435856de
                          dedupClientId: 46b89200-656a-11e8-985f-02fe61f7863e
                          firstName: Taylor
                          middleName: Robin
                          lastName: Steve
                          nameSuffix: 'TS                                                '
                          nameDataQuality: 2
                          ssn: 123-45-6789
                          ssnDataQuality: 2
                          dob: 1473746618394
                          dobDataQuality: 9
                          race: 2
                          ethnicity: 99
                          gender: 2
                          veteranStatus: '99'
                        - clientId: bb1c4869-52af-4b4f-a9b6-a48f93c35294
                          dedupClientId: 46b89200-656a-11e8-985f-02fe61f826e
                          firstName: 'First Name'
                          middleName: 'Middle Name'
                          lastName: 'LAST NAME'
                          nameSuffix: 'NS'
                          nameDataQuality: 1
                          ssn: '123-45-6789'
                          ssnDataQuality: 1
                          dob: 1459517834983
                          dobDataQuality: 1
                          race: 1
                          ethnicity: 1
                          gender: 1
                          otherGender: Test
                          veteranStatus: '8'
                          phoneNumber: 1-541-754-3010
                          emailAddress: Jeanette@gmail.com
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for client.  Returns a list of client ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients
      parameters:
      - name: startIndex
        in: query
        required: true
        schema:
          type: string
          default: "0"
        description: start index
      - name: maxItems
        in: query
        required: true
        schema:
          type: string
          default: "30"
        description: Max items in response
    post:
      responses:
        '200':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "client"
                    ],
                    "properties": {
                      "client": {
                        "type": "object",
                        "required": [
                          "clientId",
                          "dedupClientId"
                        ],
                        "properties": {
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dedupClientId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  client:
                    clientId: 8547a63e-4659-412f-b5fa-200e03b62ae8
                    dedupClientId: 46b89200-656a-11e8-985f-02fe61f7863e
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      operationId: POST_clients
      description: |
                    1)  an SSN value submitted as an empty string (not null) will be treated and stored by HSLynk as a nullified/deleted SSN data element
                    2) a full 9 digit SSN may be submitted
                    3) a partial SSN may be submitted, but one or more lower case 'x'(s) must be present in the locations of the missing actual SSN digits.
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "client"
                  ],
                  "properties": {
                    "client": {
                      "type": "object",
                      "required": [
                        "firstName",
                        "middleName",
                        "lastName",
                        "nameSuffix",
                        "nameDataQuality",
                        "ssn",
                        "ssnDataQuality",
                        "dob",
                        "dobDataQuality",
                        "race",
                        "ethnicity",
                        "gender",
                        "otherGender",
                        "veteranStatus",
                        "phoneNumber",
                        "emailAddress"
                      ],
                      "properties": {
                        "firstName": {
                          "type": "string",
                        },
                        "middleName": {
                          "type": "string",
                        },
                        "lastName": {
                          "type": "string",
                        },
                        "nameSuffix": {
                          "type": "string",
                        },
                        "nameDataQuality": {
                          "type": "integer"
                        },
                        "ssn": {
                          "type": "string",
                        },
                        "ssnDataQuality": {
                          "type": "integer"
                        },
                        "dob": {
                          "type": "integer"
                        },
                        "dobDataQuality": {
                          "type": "integer"
                        },
                        "race": {
                          "type": "integer"
                        },
                        "ethnicity": {
                          "type": "integer"
                        },
                        "gender": {
                          "type": "integer"
                        },
                        "otherGender": {
                          "type": "string",
                        },
                        "veteranStatus": {
                          "type": "integer"
                        },
                        "phoneNumber": {
                          "type": "string",
                        },
                        "emailAddress": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  client:
                    firstName: First Name
                    middleName: Middle Name
                    lastName: LAST NAME
                    nameSuffix: NS
                    nameDataQuality: 1
                    ssn: 123-45-6789
                    ssnDataQuality: 1
                    dob: 1459517834983
                    dobDataQuality: 1
                    race: 1
                    ethnicity: 1
                    gender: 1
                    otherGender: Test
                    veteranStatus: 8
                    phoneNumber: 1-541-754-3010
                    emailAddress: Jeanette@gmail.com
        required: true
  '/clients/{clientid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "client"
                    ],
                    "properties": {
                      "client": {
                        "type": "object",
                        "required": [
                          "clientId",
                          "firstName",
                          "middleName",
                          "lastName",
                          "nameSuffix",
                          "nameDataQuality",
                          "ssn",
                          "ssnDataQuality",
                          "dob",
                          "dobDataQuality",
                          "race",
                          "ethnicity",
                          "gender",
                          "otherGender",
                          "veteranStatus",
                          "phoneNumber",
                          "emailAddress"
                        ],
                        "properties": {
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "firstName": {
                            "type": "string",
                          },
                          "middleName": {
                            "type": "string",
                          },
                          "lastName": {
                            "type": "string",
                          },
                          "nameSuffix": {
                            "type": "string",
                          },
                          "nameDataQuality": {
                            "type": "integer"
                          },
                          "ssn": {
                            "type": "string",
                          },
                          "ssnDataQuality": {
                            "type": "integer"
                          },
                          "dob": {
                            "type": "integer"
                          },
                          "dobDataQuality": {
                            "type": "integer"
                          },
                          "race": {
                            "type": "integer"
                          },
                          "ethnicity": {
                            "type": "integer"
                          },
                          "gender": {
                            "type": "integer"
                          },
                          "otherGender": {
                            "type": "string",
                          },
                          "veteranStatus": {
                            "type": "string",
                          },
                          "phoneNumber": {
                            "type": "string",
                          },
                          "emailAddress": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                  client:
                    clientId: 8547a63e-4659-412f-b5fa-200e03b62ae8
                    firstName: 'First Name'
                    middleName: 'Middle Name'
                    lastName: 'LAST NAME'
                    nameSuffix: 'NS'
                    nameDataQuality: 1
                    ssn: '123-45-6789'
                    ssnDataQuality: 1
                    dob: 1459517834983
                    dobDataQuality: 1
                    race: 1
                    ethnicity: 1
                    gender: 1
                    otherGender: Test
                    veteranStatus: '8'
                    phoneNumber: 1-541-754-3010
                    emailAddress: Jeanette@gmail.com
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a client using a URI resource parameter/ID.
      operationId: GET_clients-clientId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: |
                    Updates a specific client specified by the URI resource parameter/ID.
                    1)  an SSN value submitted as an empty string (not null) will be treated and stored by HSLynk as a nullified/deleted SSN data element
                    2) a full 9 digit SSN may be submitted
                    3) a partial SSN may be submitted, but one or more lower case 'x'(s) must be present in the locations of the missing actual SSN digits.
      operationId: PUT_clients-clientId
      requestBody:
        content:
          application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "client"
                    ],
                    "properties": {
                      "client": {
                        "type": "object",
                        "required": [
                          "firstName",
                          "middleName",
                          "lastName",
                          "nameSuffix",
                          "nameDataQuality",
                          "ssn",
                          "ssnDataQuality",
                          "dob",
                          "dobDataQuality",
                          "race",
                          "ethnicity",
                          "gender",
                          "otherGender",
                          "veteranStatus",
                          "phoneNumber",
                          "emailAddress"
                        ],
                        "properties": {
                          "firstName": {
                            "type": "string",
                          },
                          "middleName": {
                            "type": "string",
                          },
                          "lastName": {
                            "type": "string",
                          },
                          "nameSuffix": {
                            "type": "string",
                          },
                          "nameDataQuality": {
                            "type": "integer"
                          },
                          "ssn": {
                            "type": "string",
                          },
                          "ssnDataQuality": {
                            "type": "integer"
                          },
                          "dob": {
                            "type": "integer"
                          },
                          "dobDataQuality": {
                            "type": "integer"
                          },
                          "race": {
                            "type": "integer"
                          },
                          "ethnicity": {
                            "type": "integer"
                          },
                          "gender": {
                            "type": "integer"
                          },
                          "otherGender": {
                            "type": "string",
                          },
                          "veteranStatus": {
                            "type": "integer"
                          },
                          "phoneNumber": {
                            "type": "string",
                          },
                          "emailAddress": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                  client:
                    firstName: First Name
                    middleName: Middle Name
                    lastName: LAST NAME
                    nameSuffix: NS
                    nameDataQuality: 1
                    ssn: 123-45-6789
                    ssnDataQuality: 1
                    dob: 1459517834983
                    dobDataQuality: 1
                    race: 1
                    ethnicity: 1
                    gender: 1
                    otherGender: Test
                    veteranStatus: 8
                    phoneNumber: 1-541-754-3010
                    emailAddress: Jeanette@gmail.com
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific client specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientId
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
          default: "00ba9b0a-bf0a-411f-9ad3-56194beb9e8a"
        description: Client Identifier
  '/clients/{clientid}/history':
   get:
    responses:
      '200':
        description: OK   Everything is working
        content:
          application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "Clients"
                    ],
                    "properties": {
                      "Clients": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "clients"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "clients": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "clientId",
                                "dedupClientId",
                                "firstName",
                                "middleName",
                                "lastName",
                                "nameSuffix",
                                "nameDataQuality",
                                "ssn",
                                "ssnDataQuality",
                                "dob",
                                "dobDataQuality",
                                "race",
                                "ethnicity",
                                "gender",
                                "veteranStatus"
                              ],
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dedupClientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "firstName": {
                                  "type": "string",
                                },
                                "middleName": {
                                  "type": "string",
                                },
                                "lastName": {
                                  "type": "string",
                                },
                                "nameSuffix": {
                                  "type": "string",
                                },
                                "nameDataQuality": {
                                  "type": "integer"
                                },
                                "ssn": {
                                  "type": "string",
                                },
                                "ssnDataQuality": {
                                  "type": "integer"
                                },
                                "dob": {
                                  "type": "integer"
                                },
                                "dobDataQuality": {
                                  "type": "integer"
                                },
                                "race": {
                                  "type": "integer"
                                },
                                "ethnicity": {
                                  "type": "integer"
                                },
                                "gender": {
                                  "type": "integer"
                                },
                                "veteranStatus": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  Clients:
                    pagination:
                      from: 0
                      returned: 3
                      total: 30
                      maximum: 30
                      sort: {}
                    clients:
                      - clientId: 3a93fe32-8118-4883-982f-a267435856de
                        dedupClientId: 46b89200-656a-11e8-985f-02fe61f7863e
                        firstName: Taylor
                        middleName: Robin
                        lastName: Steve
                        nameSuffix: 'TS                                                '
                        nameDataQuality: 2
                        ssn: 123-45-6789
                        ssnDataQuality: 2
                        dob: 1473746618394
                        dobDataQuality: 9
                        race: 2
                        ethnicity: 99
                        gender: 2
                        veteranStatus: '99'
                      - clientId: bb1c4869-52af-4b4f-a9b6-a48f93c35294
                        dedupClientId: 46b89200-656a-11e8-985f-02fe61f826e
                        firstName: 'First Name'
                        middleName: 'Middle Name'
                        lastName: 'LAST NAME'
                        nameSuffix: 'NS'
                        nameDataQuality: 1
                        ssn: '123-45-6789'
                        ssnDataQuality: 1
                        dob: 1459517834983
                        dobDataQuality: 1
                        race: 1
                        ethnicity: 1
                        gender: 1
                        otherGender: Test
                        veteranStatus: '8'
                        phoneNumber: 1-541-754-3010
                        emailAddress: Jeanette@gmail.com
      '400':
        description: Bad Request   The request was invalid or cannot be served.
      '403':
        description: >-
          Forbidden   The server understood the request, but is refusing it or
          the access is not allowed.
      '404':
        description: Not found   There is no resource behind the URI.
      '500':
        description: Internal Server Error
    description: >-
      Searches for client history.  Returns a list of client ids history, based on the query
      parameters sent.  The query parameters are cumulative, so each
      additional query parameter narrows the search down further.
    operationId: GET_clients_clientId_history
    parameters:
    - name: startIndex
      in: query
      required: true
      schema:
        type: string
        default: "0"
      description: start index
    - name: maxItems
      in: query
      required: true
      schema:
        type: string
        default: "30"
      description: Max items in response
    - name: clientid
      in: path
      required: true
      schema:
        type: string
        format: "uuid"
        default: "00ba9b0a-bf0a-411f-9ad3-56194beb9e8a"
      description: Client Identifier
  '/clients/{clientid}/enrollments':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                  schema:
                    {
                      "type": "object",
                      "required": [
                        "enrollments"
                      ],
                      "properties": {
                        "enrollments": {
                          "type": "object",
                          "required": [
                            "pagination",
                            "enrollments"
                          ],
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "required": [
                                "from",
                                "returned",
                                "total",
                                "maximum",
                                "sort"
                              ],
                              "properties": {
                                "from": {
                                  "type": "integer"
                                },
                                "returned": {
                                  "type": "integer"
                                },
                                "total": {
                                  "type": "integer"
                                },
                                "maximum": {
                                  "type": "integer"
                                },
                                "sort": {
                                  "type": "object"
                                }
                              }
                            },
                            "enrollments": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "enrollmentId",
                                  "disablingCondition",
                                  "entryDate",
                                  "householdId",
                                  "housingStatus",
                                  "monthsHomelessPastThreeYears",
                                  "otherResidencePrior",
                                  "relationshipToHoh",
                                  "residencePrior",
                                  "residencePriorLengthOfStay",
                                  "timesHomelessPastThreeYears",
                                  "yearsHomeless",
                                  "entryFromStreetEssh",
                                  "dateCreated"
                                ],
                                "properties": {
                                  "enrollmentId": {
                                    "type": "string",
                                    "format": "uuid",
                                  },
                                  "disablingCondition": {
                                    "type": "integer"
                                  },
                                  "entryDate": {
                                    "type": "integer"
                                  },
                                  "householdId": {
                                    "type": "string",
                                    "format": "uuid",
                                  },
                                  "housingStatus": {
                                    "type": "integer"
                                  },
                                  "monthsHomelessPastThreeYears": {
                                    "type": "integer"
                                  },
                                  "otherResidencePrior": {
                                    "type": "string",
                                  },
                                  "relationshipToHoh": {
                                    "type": "integer"
                                  },
                                  "residencePrior": {
                                    "type": "integer"
                                  },
                                  "residencePriorLengthOfStay": {
                                    "type": "integer"
                                  },
                                  "timesHomelessPastThreeYears": {
                                    "type": "integer"
                                  },
                                  "yearsHomeless": {
                                    "type": "integer"
                                  },
                                  "entryFromStreetEssh": {
                                    "type": "integer"
                                  },
                                    "chronicHomeless": {
                                      "type": "integer"
                                    },                                  
                                  "dateCreated": {
                                    "type": "string",
                                    "format": "mm-dd-yyyy",
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  example:
                    enrollments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollments:
                        - enrollmentId: cc1da849-b877-4455-ab44-84bdb9991f97
                          disablingCondition: 0
                          entryDate: 1459517941736
                          householdId: eca19be3-303b-47b0-a9ef-8832ab0fa13d
                          housingStatus: 3
                          monthsHomelessPastThreeYears: 7
                          otherResidencePrior: '1'
                          relationshipToHoh: 2
                          residencePrior: 2
                          residencePriorLengthOfStay: 4
                          timesHomelessPastThreeYears: 1
                          yearsHomeless: 0
                          entryFromStreetEssh: 1
                          chronicHomeless: 1
                          dateCreated: 05-13-2020
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollment.  Returns a list of enrollment ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollment"
                    ],
                    "properties": {
                      "enrollment": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "enrollmentId"
                          ],
                          "properties": {
                            "enrollmentId": {
                              "type": "string",
                              "format": "uuid",
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  enrollment:
                    - enrollmentId: cc1da849-b877-4455-ab44-84bdb9991f97
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a enrollment
      operationId: POST_clients-clientId-enrollments
      requestBody:
        content:
          application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollment"
                    ],
                    "properties": {
                      "enrollment": {
                        "type": "object",
                        "required": [
                          "continuouslyHomelessOneYear",
                          "disablingCondition",
                          "entryDate",
                          "householdId",
                          "housingStatus",
                          "monthsHomelessPastThreeYears",
                          "monthsHomelessThisTime",
                          "otherResidencePrior",
                          "personalId",
                          "projectEntryId",
                          "projectId",
                          "relationshipToHoh",
                          "residencePrior",
                          "residencePriorLengthOfStay",
                          "statusDocumented",
                          "timesHomelessPastThreeYears",
                          "yearsHomeless",
                          "entryFromStreetEssh",
                          "dateToStreetEssh"
                        ],
                        "properties": {
                          "continuouslyHomelessOneYear": {
                            "type": "integer"
                          },
                          "disablingCondition": {
                            "type": "integer"
                          },
                          "entryDate": {
                            "type": "integer"
                          },
                          "householdId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "housingStatus": {
                            "type": "integer"
                          },
                          "monthsHomelessPastThreeYears": {
                            "type": "integer"
                          },
                          "monthsHomelessThisTime": {
                            "type": "integer"
                          },
                          "otherResidencePrior": {
                            "type": "string",
                          },
                          "personalId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "projectEntryId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "projectId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "relationshipToHoh": {
                            "type": "integer"
                          },
                          "residencePrior": {
                            "type": "integer"
                          },
                          "residencePriorLengthOfStay": {
                            "type": "integer"
                          },
                          "statusDocumented": {
                            "type": "integer"
                          },
                          "timesHomelessPastThreeYears": {
                            "type": "integer"
                          },
                          "yearsHomeless": {
                            "type": "integer"
                          },
                          "entryFromStreetEssh": {
                            "type": "integer"
                          },
                            "chronicHomeless": {
                              "type": "integer"
                            },
                          "dateToStreetEssh": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  enrollment:
                    continuouslyHomelessOneYear: 1
                    disablingCondition: 0
                    entryDate: 1459517941736
                    householdId: eca19be3-303b-47b0-a9ef-8832ab0fa13d
                    housingStatus: 3
                    monthsHomelessPastThreeYears: 7
                    monthsHomelessThisTime: 1
                    otherResidencePrior: '1'
                    personalId: ba0ce84a-412e-4f3b-ae93-b903eb349754
                    projectEntryId: a70b3fe4-1e0f-4288-835f-d88dacd2b84c
                    projectId: 5958e1b7-0296-4821-b183-ae9967217579
                    relationshipToHoh: 2
                    residencePrior: 2
                    residencePriorLengthOfStay: 4
                    statusDocumented: 1
                    timesHomelessPastThreeYears: 1
                    yearsHomeless: 2
                    entryFromStreetEssh: 2
                    chronicHomeless: 1
                    dateToStreetEssh: 1
        required: true
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
          default: "00ba9b0a-bf0a-411f-9ad3-56194beb9e8a"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}':
    get:
      parameters:
      - name: includeChildLinks
        in: query
        required: false
        schema:
          type: boolean
        description: >-
          To include enrollment child entity links in the response this flag must be set true. default value of this flag is false. The enrollment child entity links, will be grouped by dataCollectionStage and then infromationDate or updatedDate (if informationDate is not available). If dataCollectionStage is not available child entity links will be categorized as unassgined
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "enrollment"
                  ],
                  "properties": {
                    "enrollment": {
                      "type": "object",
                      "required": [
                        "enrollmentId",
                        "entryLinks",
                        "enrollmentLinks",
                        "exitLinks",
                        "dateCreated",
                        "dateUpdated",
                        "disablingCondition",
                        "entryDate",
                        "monthsHomelessPastThreeYears",
                        "projectId",
                        "timesHomelessPastThreeYears",
                        "yearsHomeless",
                        "losUnderThreshold",
                        "previousStreetESSH"
                      ],
                      "properties": {
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "entryLinks": {
                          "type": "object",
                          "required": [
                            "rhsps",
                            "entryrhys",
                            "entryssvfs"
                          ],
                          "properties": {
                            "rhsps": {
                              "type": "object",
                              "required": [
                                "unspecified_stage"
                              ],
                              "properties": {
                                "unspecified_stage": {
                                  "type": "object",
                                  "required": [
                                    "2018-09-23T18:48",
                                    "2018-09-23T19:56",
                                    "2018-09-25T09:50",
                                    "2018-09-25T09:51"
                                  ],
                                  "properties": {
                                    "2018-09-23T18:48": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-09-23T19:56": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-09-25T09:50": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-09-25T09:51": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "entryrhys": {
                              "type": "object",
                              "required": [
                                "1",
                                "2",
                                "3",
                                "unspecified_stage"
                              ],
                              "properties": {
                                "1": {
                                  "type": "object",
                                  "required": [
                                    "2018-09-23T19:56",
                                    "2018-11-14T12:10",
                                    "2018-11-17T12:09",
                                    "2018-11-20T12:09"
                                  ],
                                  "properties": {
                                    "2018-09-23T19:56": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-11-14T12:10": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-11-17T12:09": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-11-20T12:09": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "2": {
                                  "type": "object",
                                  "required": [
                                    "2018-09-23T18:48",
                                    "2018-11-14T12:10",
                                    "2018-11-17T12:09"
                                  ],
                                  "properties": {
                                    "2018-09-23T18:48": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-11-14T12:10": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-11-17T12:09": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "3": {
                                  "type": "object",
                                  "required": [
                                    "2018-11-20T12:09"
                                  ],
                                  "properties": {
                                    "2018-11-20T12:09": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "unspecified_stage": {
                                  "type": "object",
                                  "required": [
                                    "2018-09-25T09:51"
                                  ],
                                  "properties": {
                                    "2018-09-25T09:51": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "entryssvfs": {
                              "type": "object",
                              "required": [
                                "unspecified_stage"
                              ],
                              "properties": {
                                "unspecified_stage": {
                                  "type": "object",
                                  "required": [
                                    "2018-09-23T19:56",
                                    "2018-09-25T09:50",
                                    "2018-09-25T09:51"
                                  ],
                                  "properties": {
                                    "2018-09-23T19:56": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-09-25T09:50": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-09-25T09:51": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "enrollmentLinks": {
                          "type": "object",
                          "required": [
                            "educations",
                            "dateOfEngagements",
                            "disabilities",
                            "domesticViolences"
                          ],
                          "properties": {
                            "educations": {
                              "type": "object",
                              "required": [
                                "1",
                                "unspecified_stage"
                              ],
                              "properties": {
                                "1": {
                                  "type": "object",
                                  "required": [
                                    "2018-11-13T00:17",
                                    "2018-11-15T23:01"
                                  ],
                                  "properties": {
                                    "2018-11-13T00:17": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-11-15T23:01": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "unspecified_stage": {
                                  "type": "object",
                                  "required": [
                                    "2018-11-13T00:17",
                                    "2018-11-15T23:01"
                                  ],
                                  "properties": {
                                    "2018-11-13T00:17": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "2018-11-15T23:01": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "dateOfEngagements": {
                              "type": "object",
                              "required": [
                                "unspecified_stage"
                              ],
                              "properties": {
                                "unspecified_stage": {
                                  "type": "object",
                                  "required": [
                                    "2018-09-25T09:51"
                                  ],
                                  "properties": {
                                    "2018-09-25T09:51": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "disabilities": {
                              "type": "object",
                              "required": [
                                "1",
                                "2"
                              ],
                              "properties": {
                                "1": {
                                  "type": "object",
                                  "required": [
                                    "0009-11-04T00:00"
                                  ],
                                  "properties": {
                                    "0009-11-04T00:00": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "2": {
                                  "type": "object",
                                  "required": [
                                    "2018-11-17T12:07"
                                  ],
                                  "properties": {
                                    "2018-11-17T12:07": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "domesticViolences": {
                              "type": "object",
                              "required": [
                                "unspecified_stage"
                              ],
                              "properties": {
                                "unspecified_stage": {
                                  "type": "object",
                                  "required": [
                                    "2018-01-08T00:00"
                                  ],
                                  "properties": {
                                    "2018-01-08T00:00": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "groupBy"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "required": [
                                                "rel",
                                                "href"
                                              ],
                                              "properties": {
                                                "rel": {
                                                  "type": "string",
                                                  "format": "uuid",
                                                },
                                                "href": {
                                                  "type": "string",
                                                }
                                              }
                                            }
                                          },
                                          "groupBy": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "exitLinks": {
                          "type": "object",
                          "required": [
                            "unspecified_stage"
                          ],
                          "properties": {
                            "unspecified_stage": {
                              "type": "object",
                              "required": [
                                "2018-09-25T09:50",
                                "2018-09-25T09:51"
                              ],
                              "properties": {
                                "2018-09-25T09:50": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "data",
                                      "groupBy"
                                    ],
                                    "properties": {
                                      "data": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "required": [
                                            "rel",
                                            "href",
                                            "exitHousingAssessments"
                                          ],
                                          "properties": {
                                            "rel": {
                                              "type": "string",
                                              "format": "uuid",
                                            },
                                            "href": {
                                              "type": "string",
                                            },
                                            "exitHousingAssessments": {
                                              "type": "object",
                                              "required": [
                                                "unspecified_stage"
                                              ],
                                              "properties": {
                                                "unspecified_stage": {
                                                  "type": "object",
                                                  "required": [
                                                    "2018-09-25T09:50"
                                                  ],
                                                  "properties": {
                                                    "2018-09-25T09:50": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "data",
                                                          "groupBy"
                                                        ],
                                                        "properties": {
                                                          "data": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "required": [
                                                                "rel",
                                                                "href"
                                                              ],
                                                              "properties": {
                                                                "rel": {
                                                                  "type": "string",
                                                                  "format": "uuid",
                                                                },
                                                                "href": {
                                                                  "type": "string",
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "groupBy": {
                                                            "type": "string",
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "groupBy": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "2018-09-25T09:51": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "data",
                                      "groupBy"
                                    ],
                                    "properties": {
                                      "data": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "required": [
                                            "rel",
                                            "href",
                                            "exitHousingAssessments"
                                          ],
                                          "properties": {
                                            "rel": {
                                              "type": "string",
                                              "format": "uuid",
                                            },
                                            "href": {
                                              "type": "string",
                                            },
                                            "exitHousingAssessments": {
                                              "type": "object",
                                              "required": [
                                                "unspecified_stage"
                                              ],
                                              "properties": {
                                                "unspecified_stage": {
                                                  "type": "object",
                                                  "required": [
                                                    "2018-09-25T09:51"
                                                  ],
                                                  "properties": {
                                                    "2018-09-25T09:51": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "required": [
                                                          "data",
                                                          "groupBy"
                                                        ],
                                                        "properties": {
                                                          "data": {
                                                            "type": "array",
                                                            "items": {
                                                              "type": "object",
                                                              "required": [
                                                                "rel",
                                                                "href"
                                                              ],
                                                              "properties": {
                                                                "rel": {
                                                                  "type": "string",
                                                                  "format": "uuid",
                                                                },
                                                                "href": {
                                                                  "type": "string",
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "groupBy": {
                                                            "type": "string",
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "groupBy": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "dateCreated": {
                          "type": "string",
                          "format": "YYYY-MM-dd",
                        },
                        "dateUpdated": {
                          "type": "string",
                          "format": "YYYY-MM-dd",
                        },
                        "disablingCondition": {
                          "type": "integer"
                        },
                        "entryDate": {
                          "type": "integer"
                        },
                        "monthsHomelessPastThreeYears": {
                          "type": "integer"
                        },
                        "projectId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "timesHomelessPastThreeYears": {
                          "type": "integer"
                        },
                        "yearsHomeless": {
                          "type": "integer"
                        },
                        "losUnderThreshold": {
                          "type": "integer"
                        },
                        "chronicHomeless": {
                          "type": "integer"
                        },
                        "previousStreetESSH": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                enrollment:
                  enrollmentId: 03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113
                  entryLinks:
                    rhsps:
                      unspecified_stage:
                        2018-09-23T18:48:
                        - data:
                          - rel: 03c66d96-72b9-49c9-bcb2-388053fb8e74
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/03c66d96-72b9-49c9-bcb2-388053fb8e74"
                          - rel: 3591939e-8adc-417c-8aad-386e85f87551
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/3591939e-8adc-417c-8aad-386e85f87551"
                          groupBy: dateUpdated
                        2018-09-23T19:56:
                        - data:
                          - rel: f340d9c5-c5d1-44f6-b407-9c91da9b9ef9
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/f340d9c5-c5d1-44f6-b407-9c91da9b9ef9"
                          - rel: 924e4746-4c1a-41cf-a0ed-d3177b9cc23d
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/924e4746-4c1a-41cf-a0ed-d3177b9cc23d"
                          groupBy: dateUpdated
                        2018-09-25T09:50:
                        - data:
                          - rel: d80ac82c-0030-4e34-bd43-0332dc5af5c0
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/d80ac82c-0030-4e34-bd43-0332dc5af5c0"
                          - rel: 0bab25d1-cff7-4a57-8c30-f7b258af6143
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/0bab25d1-cff7-4a57-8c30-f7b258af6143"
                          groupBy: dateUpdated
                        2018-09-25T09:51:
                        - data:
                          - rel: a47aee4e-8584-432a-b790-31be3a4e1409
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/a47aee4e-8584-432a-b790-31be3a4e1409"
                          - rel: 0e5f52b9-e24e-43d9-a34d-9ef691b3b5c8
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/0e5f52b9-e24e-43d9-a34d-9ef691b3b5c8"
                          - rel: 112571c2-356c-4224-a844-310525f97201
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/112571c2-356c-4224-a844-310525f97201"
                          - rel: 0a7fae66-1283-4cd9-8341-8606c90b26ee
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhsps/0a7fae66-1283-4cd9-8341-8606c90b26ee"
                          groupBy: dateUpdated
                    entryrhys:
                      '1':
                        2018-09-23T19:56:
                        - data:
                          - rel: 66015eca-afa7-4f3f-a499-389c737339e3
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/66015eca-afa7-4f3f-a499-389c737339e3"
                          groupBy: dateUpdated
                        2018-11-14T12:10:
                        - data:
                          - rel: b2462907-9ae5-4209-827d-e56ebb3631c7
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/b2462907-9ae5-4209-827d-e56ebb3631c7"
                          groupBy: informationDate
                        2018-11-17T12:09:
                        - data:
                          - rel: 025b18af-d096-4b2e-9aec-f36d2a2435d3
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/025b18af-d096-4b2e-9aec-f36d2a2435d3"
                          - rel: 7a47384f-d5e0-4c11-be33-2477bf0e9de4
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/7a47384f-d5e0-4c11-be33-2477bf0e9de4"
                          groupBy: submissionDate
                        2018-11-20T12:09:
                        - data:
                          - rel: 5be632ee-8ba1-4bc6-b947-158963269eab
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/5be632ee-8ba1-4bc6-b947-158963269eab"
                          groupBy: informationDate
                      '2':
                        2018-09-23T18:48:
                        - data:
                          - rel: e686d4cb-78cf-4642-bcf6-7be27e1d714c
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/e686d4cb-78cf-4642-bcf6-7be27e1d714c"
                          groupBy: dateUpdated
                        2018-11-14T12:10:
                        - data:
                          - rel: 904623af-08c5-47f9-b034-bf3a6b82d646
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/904623af-08c5-47f9-b034-bf3a6b82d646"
                          groupBy: informationDate
                        2018-11-17T12:09:
                        - data:
                          - rel: 6e541341-a2e4-40e7-8d89-0037a45095d4
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/6e541341-a2e4-40e7-8d89-0037a45095d4"
                          groupBy: submissionDate
                      '3':
                        2018-11-20T12:09:
                        - data:
                          - rel: b817a545-1998-4377-9648-0b55828fdb8b
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/b817a545-1998-4377-9648-0b55828fdb8b"
                          groupBy: informationDate
                      unspecified_stage:
                        2018-09-25T09:51:
                        - data:
                          - rel: 2e9ece93-d935-4489-8440-42230f05e999
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryrhys/2e9ece93-d935-4489-8440-42230f05e999"
                          groupBy: dateUpdated
                    entryssvfs:
                      unspecified_stage:
                        2018-09-23T19:56:
                        - data:
                          - rel: 190094ed-a0a6-4210-bc0b-bbb73e53c0b8
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/190094ed-a0a6-4210-bc0b-bbb73e53c0b8"
                          - rel: 93038b0f-a916-43cd-9a5c-7cb544e96749
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/93038b0f-a916-43cd-9a5c-7cb544e96749"
                          groupBy: dateUpdated
                        2018-09-25T09:50:
                        - data:
                          - rel: d05e4b34-b561-4630-b960-474b05dbeeec
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/d05e4b34-b561-4630-b960-474b05dbeeec"
                          - rel: 2e772c46-cf20-4916-a6d0-cb00e3aa70af
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/2e772c46-cf20-4916-a6d0-cb00e3aa70af"
                          groupBy: dateUpdated
                        2018-09-25T09:51:
                        - data:
                          - rel: 99362cc3-8c14-4869-8895-b647d922d36b
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/99362cc3-8c14-4869-8895-b647d922d36b"
                          - rel: 62c37373-02e9-4247-9388-7f62e169ce8a
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/62c37373-02e9-4247-9388-7f62e169ce8a"
                          - rel: d94df8a9-9eba-49c2-8f89-43aa2249ee3c
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/d94df8a9-9eba-49c2-8f89-43aa2249ee3c"
                          - rel: ebc3baa6-64dc-4741-b440-dae2047907d0
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/entryssvfs/ebc3baa6-64dc-4741-b440-dae2047907d0"
                          groupBy: dateUpdated
                  enrollmentLinks:
                    educations:
                      '1':
                        2018-11-13T00:17:
                        - data:
                          - rel: 3130d17b-c60a-473c-99f9-83e6886a9b7d
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/educations/3130d17b-c60a-473c-99f9-83e6886a9b7d"
                          groupBy: submissionDate
                        - data:
                          - rel: dcaba5a8-3fc9-48c1-93c8-ba2c3631a27a
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/educations/dcaba5a8-3fc9-48c1-93c8-ba2c3631a27a"
                          groupBy: informationDate
                        2018-11-15T23:01:
                        - data:
                          - rel: 7736581e-db33-4fb3-b2c9-19bfd32c5b51
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/educations/7736581e-db33-4fb3-b2c9-19bfd32c5b51"
                          groupBy: dateUpdated
                      unspecified_stage:
                        2018-11-13T00:17:
                        - data:
                          - rel: fa3dfcc0-4e2e-4ee6-b4d0-ef083e1ee0b9
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/educations/fa3dfcc0-4e2e-4ee6-b4d0-ef083e1ee0b9"
                          groupBy: submissionDate
                        - data:
                          - rel: 1da16c18-e507-41dc-9eba-5c61acb00b45
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/educations/1da16c18-e507-41dc-9eba-5c61acb00b45"
                          groupBy: informationDate
                        2018-11-15T23:01:
                        - data:
                          - rel: 1bd7018e-f919-461f-982e-5f5c049d5896
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/educations/1bd7018e-f919-461f-982e-5f5c049d5896"
                          groupBy: dateUpdated
                    dateOfEngagements:
                      unspecified_stage:
                        2018-09-25T09:51:
                        - data:
                          - rel: 40e7b72d-d265-4dd1-84c2-d900f5cbc5c1
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/dateofengagements/40e7b72d-d265-4dd1-84c2-d900f5cbc5c1"
                          - rel: 55c85e93-d131-46c1-8529-ed17005f1d24
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/dateofengagements/55c85e93-d131-46c1-8529-ed17005f1d24"
                          groupBy: dateUpdated
                    disabilities:
                      '1':
                        0009-11-04T00:00:
                        - data:
                          - rel: de33b981-f68d-418f-a303-eb0840091e42
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/disabilities/de33b981-f68d-418f-a303-eb0840091e42"
                          - rel: 66af571c-5c97-4ceb-b781-b87dcc9d7174
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/disabilities/66af571c-5c97-4ceb-b781-b87dcc9d7174"
                          groupBy: informationDate
                      '2':
                        2018-11-17T12:07:
                        - data:
                          - rel: ed7bbf2a-fae4-40cb-806e-b46bd5a2ec56
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/disabilities/ed7bbf2a-fae4-40cb-806e-b46bd5a2ec56"
                          - rel: 4ff222c3-9bb7-4d72-bb06-40b1c1fba304
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/disabilities/4ff222c3-9bb7-4d72-bb06-40b1c1fba304"
                          groupBy: submissionDate
                    domesticViolences:
                      unspecified_stage:
                        2018-01-08T00:00:
                        - data:
                          - rel: 6ac472ec-bad7-4cb7-b60a-8e237bea1d0d
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/domesticviolences/6ac472ec-bad7-4cb7-b60a-8e237bea1d0d"
                          - rel: 1929cc50-5c5c-45b5-8dac-56747bb03c8e
                            href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/domesticviolences/1929cc50-5c5c-45b5-8dac-56747bb03c8e"
                          groupBy: informationDate
                  exitLinks:
                    unspecified_stage:
                      2018-09-25T09:50:
                      - data:
                        - rel: 28e48aec-82e0-48ff-918b-493825cdea18
                          href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/28e48aec-82e0-48ff-918b-493825cdea18"
                          exitHousingAssessments:
                            unspecified_stage:
                              2018-09-25T09:50:
                              - data:
                                - rel: 2cd01b48-c7e8-4e2a-90ff-144174c60757
                                  href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/28e48aec-82e0-48ff-918b-493825cdea18/exithousingassessments/2cd01b48-c7e8-4e2a-90ff-144174c60757"
                                groupBy: dateUpdated
                        groupBy: dateUpdated
                      2018-09-25T09:51:
                      - data:
                        - rel: 3ed58fa0-b406-4ee0-86ad-32de911407ad
                          href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/3ed58fa0-b406-4ee0-86ad-32de911407ad"
                          exitHousingAssessments:
                            unspecified_stage:
                              2018-09-25T09:51:
                              - data:
                                - rel: 3bdb1ef3-52e4-4bf7-b492-2a7afb600d47
                                  href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/3ed58fa0-b406-4ee0-86ad-32de911407ad/exithousingassessments/3bdb1ef3-52e4-4bf7-b492-2a7afb600d47"
                                groupBy: dateUpdated
                        - rel: 473f41ca-4a77-491f-aec8-a9765dff9012
                          href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/473f41ca-4a77-491f-aec8-a9765dff9012"
                          exitHousingAssessments:
                            unspecified_stage:
                              2018-09-25T09:51:
                              - data:
                                - rel: 099359fe-36a3-4d09-9029-35c4b6938e58
                                  href: "/hmis-clientapi/rest/v2020/clients/00ba9b0a-bf0a-411f-9ad3-56194beb9e8a/enrollments/03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113/exits/473f41ca-4a77-491f-aec8-a9765dff9012/exithousingassessments/099359fe-36a3-4d09-9029-35c4b6938e58"
                                groupBy: dateUpdated
                        groupBy: dateUpdated
                  dateCreated: '2018-09-23'
                  dateUpdated: '2018-09-23'
                  disablingCondition: 1
                  entryDate: -19799999
                  monthsHomelessPastThreeYears: 101
                  projectId: 5958e1b7-0296-4821-b183-ae9967217579
                  timesHomelessPastThreeYears: 1
                  yearsHomeless: 0
                  chronicHomeless: 1
                  losUnderThreshold: 1
                  previousStreetESSH: 1

        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a enrollment using a URI resource parameter/ID.
      operationId: GET_clients-clientId-enrollments-enrollmentId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific enrollment specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientId-enrollments-enrollmentId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "enrollment"
                  ],
                  "properties": {
                    "enrollment": {
                      "type": "object",
                      "required": [
                        "continuouslyhomelessoneyear",
                        "disablingCondition",
                        "entryDate",
                        "householdId",
                        "housingStatus",
                        "monthsHomelessPastThreeYears",
                        "monthsHomelessThisTime",
                        "otherResidencePrior",
                        "personalId",
                        "projectEntryId",
                        "projectId",
                        "relationshipToHoh",
                        "residencePrior",
                        "residencePriorLengthOfStay",
                        "statusDocumented",
                        "timesHomelessPastThreeYears",
                        "yearsHomeless",
                        "entryFromStreetEssh",
                        "dateToStreetEssh"
                      ],
                      "properties": {
                        "continuouslyhomelessoneyear": {
                          "type": "integer"
                        },
                        "disablingCondition": {
                          "type": "integer"
                        },
                        "entryDate": {
                          "type": "integer"
                        },
                        "householdId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "housingStatus": {
                          "type": "integer"
                        },
                        "monthsHomelessPastThreeYears": {
                          "type": "integer"
                        },
                        "monthsHomelessThisTime": {
                          "type": "integer"
                        },
                        "otherResidencePrior": {
                          "type": "string",
                        },
                        "personalId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "projectEntryId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "projectId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "relationshipToHoh": {
                          "type": "integer"
                        },
                        "residencePrior": {
                          "type": "integer"
                        },
                        "residencePriorLengthOfStay": {
                          "type": "integer"
                        },
                        "statusDocumented": {
                          "type": "integer"
                        },
                        "timesHomelessPastThreeYears": {
                          "type": "integer"
                        },
                        "yearsHomeless": {
                          "type": "integer"
                        },
                        "entryFromStreetEssh": {
                          "type": "integer"
                        },
                        "chronicHomeless": {
                          "type": "integer"
                        },                        
                        "dateToStreetEssh": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  enrollment:
                    continuouslyhomelessoneyear: 1
                    disablingCondition: 0
                    entryDate: 1459517941736
                    householdId: eca19be3-303b-47b0-a9ef-8832ab0fa13d
                    housingStatus: 3
                    monthsHomelessPastThreeYears: 7
                    monthsHomelessThisTime: 1
                    otherResidencePrior: '1'
                    personalId: ba0ce84a-412e-4f3b-ae93-b903eb349754
                    projectEntryId: a70b3fe4-1e0f-4288-835f-d88dacd2b84c
                    projectId: 5958e1b7-0296-4821-b183-ae9967217579
                    relationshipToHoh: 2
                    residencePrior: 2
                    residencePriorLengthOfStay: 4
                    statusDocumented: 1
                    timesHomelessPastThreeYears: 1
                    yearsHomeless: 2
                    entryFromStreetEssh: 2
                    chronicHomeless: 1
                    dateToStreetEssh: 1
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific enrollment specified by the URI resource
        parameter/ID.
      operationId: DELETE_clients-clientId-enrollments-enrollmentId
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
          default: "03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
          default: "00ba9b0a-bf0a-411f-9ad3-56194beb9e8a"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/history':
   get:
    responses:
      '200':
        description: OK   Everything is working.
        content:
          application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollments"
                    ],
                    "properties": {
                      "enrollments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "enrollments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "enrollments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "enrollmentId",
                                "disablingCondition",
                                "entryDate",
                                "householdId",
                                "housingStatus",
                                "monthsHomelessPastThreeYears",
                                "otherResidencePrior",
                                "relationshipToHoh",
                                "residencePrior",
                                "residencePriorLengthOfStay",
                                "timesHomelessPastThreeYears",
                                "yearsHomeless",
                                "entryFromStreetEssh",
                                "dateCreated"
                              ],
                              "properties": {
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "disablingCondition": {
                                  "type": "integer"
                                },
                                "entryDate": {
                                  "type": "integer"
                                },
                                "householdId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingStatus": {
                                  "type": "integer"
                                },
                                "monthsHomelessPastThreeYears": {
                                  "type": "integer"
                                },
                                "otherResidencePrior": {
                                  "type": "string",
                                },
                                "relationshipToHoh": {
                                  "type": "integer"
                                },
                                "residencePrior": {
                                  "type": "integer"
                                },
                                "residencePriorLengthOfStay": {
                                  "type": "integer"
                                },
                                "timesHomelessPastThreeYears": {
                                  "type": "integer"
                                },
                                "yearsHomeless": {
                                  "type": "integer"
                                },
                                "entryFromStreetEssh": {
                                  "type": "integer"
                                },
                                "chronicHomeless": {
                                  "type": "integer"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  enrollments:
                    pagination:
                      from: 0
                      returned: 1
                      total: 1
                      maximum: 30
                      sort: {}
                    enrollments:
                      - enrollmentId: cc1da849-b877-4455-ab44-84bdb9991f97
                        disablingCondition: 0
                        entryDate: 1459517941736
                        householdId: eca19be3-303b-47b0-a9ef-8832ab0fa13d
                        housingStatus: 3
                        monthsHomelessPastThreeYears: 7
                        otherResidencePrior: '1'
                        relationshipToHoh: 2
                        residencePrior: 2
                        residencePriorLengthOfStay: 4
                        timesHomelessPastThreeYears: 1
                        yearsHomeless: 0
                        entryFromStreetEssh: 1
                        chronicHomeless: 1
                        dateCreated: 05-13-2020
      '400':
        description: Bad Request   The request was invalid or cannot be served.
      '403':
        description: >-
          Forbidden   The server understood the request, but is refusing it or
          the access is not allowed.
      '404':
        description: Not found   There is no resource behind the URI.
      '500':


        description: Internal Server Error
    description: >-
      Searches for enrollment history.  Returns a list of enrollment ids history, based on the
      query parameters sent.  The query parameters are cumulative, so each
      additional query parameter narrows the search down further.
    operationId: GET_clients-clientId-enrollments-enrollmentId-history
   parameters:
    - name: enrollmentid
      in: path
      required: true
      schema:
        type: string
        format: "uuid"
        default: "03c9fbfc-a3a0-42f4-b304-3f7dc3ad2113"
      description: Enrollment Identifier
    - name: clientid
      in: path
      required: true
      schema:
        type: string
        format: "uuid"
        default: "00ba9b0a-bf0a-411f-9ad3-56194beb9e8a"
      description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollmentCocs"
                    ],
                    "properties": {
                      "enrollmentCocs": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "enrollmentCocs"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "enrollmentCocs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "enrollmentCocId",
                                "cocCode",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "enrollmentCocId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "cocCode": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollmentCocs:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollmentCocs:
                        - enrollmentCocId: 60071b3a-2625-45b8-aa6e-23e99096b343
                          cocCode: Test
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollmentcoc.  Returns a list of enrollmentcoc ids, based
        on the query parameters sent.  The query parameters are cumulative, so
        each additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-enrollmentcocs
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollmentCoc"
                    ],
                    "properties": {
                      "enrollmentCoc": {
                        "type": "object",
                        "required": [
                          "enrollmentCocId",
                          "cocCode",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "enrollmentCocId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "cocCode": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  enrollmentCoc:
                    enrollmentCocId: 60071b3a-2625-45b8-aa6e-23e99096b343
                    cocCode: 'Test             '
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a enrollmentcoc
      operationId: POST_clients-clientId-enrollments-enrollmentId-enrollmentcocs
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "enrollmentCoc"
                  ],
                  "properties": {
                    "enrollmentCoc": {
                      "type": "object",
                      "required": [
                        "dataCollectionStage",
                        "informationDate",
                        "cocCode"
                      ],
                      "properties": {
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "cocCode": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  enrollmentCoc:
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
                    cocCode: Test
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs/{enrollmentcocid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollmentCoc"
                    ],
                    "properties": {
                      "enrollmentCoc": {
                        "type": "object",
                        "required": [
                          "enrollmentCocId",
                          "cocCode",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "enrollmentCocId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "cocCode": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollmentCoc:
                      enrollmentCocId: 60071b3a-2625-45b8-aa6e-23e99096b343
                      cocCode: 'Test             '
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a enrollmentcoc using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-enrollmentcocs-enrollmentcocid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific enrollmentcoc specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-enrollmentcocs-enrollmentcocid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "enrollmentCoc"
                  ],
                  "properties": {
                    "enrollmentCoc": {
                      "type": "object",
                      "required": [
                        "dataCollectionStage",
                        "informationDate",
                        "cocCode"
                      ],
                      "properties": {
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "cocCode": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  enrollmentCoc:
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
                    cocCode: Test
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific enrollmentcoc specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-enrollmentcocs-enrollmentcocid
    parameters:
      - name: enrollmentcocid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollmentcoc Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs/{enrollmentcocid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollmentCocs"
                    ],
                    "properties": {
                      "enrollmentCocs": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "enrollmentCocs"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "enrollmentCocs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "enrollmentCocId",
                                "cocCode",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "enrollmentCocId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "cocCode": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollmentCocs:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollmentCocs:
                        - enrollmentCocId: 60071b3a-2625-45b8-aa6e-23e99096b343
                          cocCode: Test
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollmentcoc history.  Returns a list of enrollmentcoc ids history, based
        on the query parameters sent.  The query parameters are cumulative, so
        each additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-enrollmentcocs-enrollmentcocid-history
    parameters:
      - name: enrollmentcocid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollmentcoc Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/educations':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "educations"
                    ],
                    "properties": {
                      "educations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "educations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "educations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "educationId",
                                "lastGradeCompleted",
                                "schoolStatus",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "educationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "lastGradeCompleted": {
                                  "type": "integer"
                                },
                                "schoolStatus": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    educations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      educations:
                        - educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                          lastGradeCompleted: 10
                          schoolStatus: 6
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for education.  Returns a list of education ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-educations

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "education"
                    ],
                    "properties": {
                      "education": {
                        "type": "object",
                        "required": [
                          "educationId",
                          "lastGradeCompleted",
                          "schoolStatus",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "educationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "lastGradeCompleted": {
                            "type": "integer"
                          },
                          "schoolStatus": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  education:
                    educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                    lastGradeCompleted: 10
                    schoolStatus: 6
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a education
      operationId: POST_clients-clientId-enrollments-enrollmentId-educations
      requestBody:
        content:
          application/json:
            example:
              education:
                lastGradeCompleted: 10
                schoolStatus: 6
                dataCollectionStage: 1
                informationDate: 03-17-2016
            schema:
              {
                "type": "object",
                "required": [
                  "education"
                ],
                "properties": {
                  "education": {
                    "type": "object",
                    "required": [
                      "lastGradeCompleted",
                      "schoolStatus",
                      "dataCollectionStage",
                      "informationDate"
                    ],
                    "properties": {
                      "lastGradeCompleted": {
                        "type": "integer"
                      },
                      "schoolStatus": {
                        "type": "integer"
                      },
                      "dataCollectionStage": {
                        "type": "integer"
                      },
                      "informationDate": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/educations/{educationid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                education:
                  educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                  lastGradeCompleted: 10
                  schoolStatus: 6
                  dataCollectionStage: 1
                  informationDate: 03-17-2016
              schema:
                {
                  "type": "object",
                  "required": [
                    "education"
                  ],
                  "properties": {
                    "education": {
                      "type": "object",
                      "required": [
                        "educationId",
                        "lastGradeCompleted",
                        "schoolStatus",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "educationId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "lastGradeCompleted": {
                          "type": "integer"
                        },
                        "schoolStatus": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a education using a URI resource parameter/ID.
      operationId: GET_clients-clientId-enrollments-enrollmentId-educations-educationid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific education specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientId-enrollments-enrollmentId-educations-educationid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "education"
                  ],
                  "properties": {
                    "education": {
                      "type": "object",
                      "required": [
                        "lastGradeCompleted",
                        "schoolStatus",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "lastGradeCompleted": {
                          "type": "integer"
                        },
                        "schoolStatus": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  education:
                    lastGradeCompleted: 10
                    schoolStatus: 6
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific education specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientId-enrollments-enrollmentId-educations-educationid
    parameters:
      - name: educationid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Education Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/educations/{educationid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "ucations"
                    ],
                    "properties": {
                      "ucations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "educations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "educations": {
                            "type": "object",
                            "required": [
                              "educationId",
                              "lastGradeCompleted",
                              "schoolStatus",
                              "dataCollectionStage",
                              "informationDate"
                            ],
                            "properties": {
                              "educationId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "lastGradeCompleted": {
                                "type": "integer"
                              },
                              "schoolStatus": {
                                "type": "integer"
                              },
                              "dataCollectionStage": {
                                "type": "integer"
                              },
                              "informationDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    educations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      educations:
                          educationId: f91547a2-d13b-40a1-a1be-fed415c468a6
                          lastGradeCompleted: 10
                          schoolStatus: 6
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for education history.  Returns a list of education ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-educations-educationid-history
    parameters:
      - name: educationid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Education Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/contacts':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "contacts"
                    ],
                    "properties": {
                      "contacts": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "contacts"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "contacts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "contactId",
                                "contactLocation"
                              ],
                              "properties": {
                                "contactId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "contactLocation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    contacts:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      contacts:
                        - contactId: 169da295-22f9-41d9-b991-ada835b1e123
                          contactLocation: 3
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for contact.  Returns a list of contact ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-contacts

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "contact"
                    ],
                    "properties": {
                      "contact": {
                        "type": "object",
                        "required": [
                          "contactId",
                          "contactLocation"
                        ],
                        "properties": {
                          "contactId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "contactLocation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  contact:
                    contactId: 169da295-22f9-41d9-b991-ada835b1e123
                    contactLocation: 3
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a contact
      operationId: POST_clients-clientId-enrollments-enrollmentId-contacts
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "contact"
                  ],
                  "properties": {
                    "contact": {
                      "type": "object",
                      "required": [
                        "contactLocation"
                      ],
                      "properties": {
                        "contactLocation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  contact:
                    contactLocation: 3
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/contacts/{contactid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "contact"
                    ],
                    "properties": {
                      "contact": {
                        "type": "object",
                        "required": [
                          "contactId",
                          "contactLocation"
                        ],
                        "properties": {
                          "contactId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "contactLocation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    contact:
                      contactId: 169da295-22f9-41d9-b991-ada835b1e123
                      contactLocation: 3
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a contact using a URI resource parameter/ID.
      operationId: GET_clients-clientId-enrollments-enrollmentId-contacts-contactid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific contact specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientId-enrollments-enrollmentId-contacts-contactid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "contact"
                  ],
                  "properties": {
                    "contact": {
                      "type": "object",
                      "required": [
                        "contactLocation"
                      ],
                      "properties": {
                        "contactLocation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  contact:
                    contactLocation: 3
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific contact specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientId-enrollments-enrollmentId-contacts-contactid
    parameters:
      - name: contactid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Contact Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/contacts/{contactid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "contacts"
                    ],
                    "properties": {
                      "contacts": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "contacts"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "contacts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "contactId",
                                "contactLocation"
                              ],
                              "properties": {
                                "contactId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "contactLocation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    contacts:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      contacts:
                        - contactId: 169da295-22f9-41d9-b991-ada835b1e123
                          contactLocation: 3
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for contact history.  Returns a list of contact ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-contacts-contactid-history
    parameters:
      - name: contactid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Contact Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dateOfEngagements"
                    ],
                    "properties": {
                      "dateOfEngagements": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "dateOfEngagements"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "dateOfEngagements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "dateOfEngagementId",
                                "dateOfEngagement"
                              ],
                              "properties": {
                                "dateOfEngagementId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dateOfEngagement": {
                                  "type": "string",
                                  "format": "MM-dd-YYYY HH:mm",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    dateOfEngagements:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      dateOfEngagements:
                        - dateOfEngagementId: 61d17265-aa9f-4ed2-a146-2a94846f3dd3
                          dateOfEngagement: '04-07-2020 17:50'
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for dateOfEngagement.  Returns a list of dateOfEngagement ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-dateOfEngagements

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dateOfEngagement"
                    ],
                    "properties": {
                      "dateOfEngagement": {
                        "type": "object",
                        "required": [
                          "dateOfEngagementId",
                          "dateOfEngagement"
                        ],
                        "properties": {
                          "dateOfEngagementId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dateOfEngagement": {
                            "type": "string",
                            "format": "MM-dd-YYYY HH:mm",
                          }
                        }
                      }
                    }
                  }
                example:
                  dateOfEngagement:
                    dateOfEngagementId: 61d17265-aa9f-4ed2-a146-2a94846f3dd3
                    dateOfEngagement: '04-07-2020 17:50'
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a dateOfEngagement
      operationId: POST_clients-clientId-enrollments-enrollmentId-dateOfEngagements
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "dateOfEngagement"
                  ],
                  "properties": {
                    "dateOfEngagement": {
                      "type": "object",
                      "required": [
                        "dateOfEngagement"
                      ],
                      "properties": {
                        "dateOfEngagement": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        }
                      }
                    }
                  }
                }
              example:
                  dateOfEngagement:
                    dateOfEngagement: '04-07-2020 17:50'
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements/{dateofengagementid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dateOfEngagement"
                    ],
                    "properties": {
                      "dateOfEngagement": {
                        "type": "object",
                        "required": [
                          "dateOfEngagementId",
                          "dateOfEngagement"
                        ],
                        "properties": {
                          "dateOfEngagementId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dateOfEngagement": {
                            "type": "string",
                            "format": "MM-dd-YYYY HH:mm",
                          }
                        }
                      }
                    }
                  }
                example:
                    dateOfEngagement:
                      dateOfEngagementId: 61d17265-aa9f-4ed2-a146-2a94846f3dd3
                      dateOfEngagement: '04-07-2020 17:50'
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a dateOfEngagement using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-dateOfEngagements-dateOfEngagementid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific dateOfEngagement specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-dateOfEngagements-dateOfEngagementid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "dateOfEngagement"
                  ],
                  "properties": {
                    "dateOfEngagement": {
                      "type": "object",
                      "required": [
                        "dateOfEngagement"
                      ],
                      "properties": {
                        "dateOfEngagement": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        }
                      }
                    }
                  }
                }
              example:
                  dateOfEngagement:
                    dateOfEngagement: '04-07-2020 17:50'
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific dateOfEngagement specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-dateOfEngagements-dateOfEngagementid
    parameters:
      - name: dateofengagementid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: dateOfEngagement Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements/{dateofengagementid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dateOfEngagements"
                    ],
                    "properties": {
                      "dateOfEngagements": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "dateOfEngagements"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "dateOfEngagements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "dateOfEngagementId",
                                "dateOfEngagement"
                              ],
                              "properties": {
                                "dateOfEngagementId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dateOfEngagement": {
                                  "type": "string",
                                  "format": "MM-dd-YYYY HH:mm",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    dateOfEngagements:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      dateOfEngagements:
                        - dateOfEngagementId: 61d17265-aa9f-4ed2-a146-2a94846f3dd3
                          dateOfEngagement: '04-07-2020 17:50'
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for dateOfEngagement history.  Returns a list of dateOfEngagement ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-dateOfEngagements-dateOfEngagementid-history
    parameters:
      - name: dateofengagementid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: dateOfEngagement Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/disabilities':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "disabilitiesList"
                    ],
                    "properties": {
                      "disabilitiesList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "disabilitiesList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "disabilitiesList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "disabilitiesId",
                                "disabilityType",
                                "disabilityResponse",
                                "indefiniteandImpairs",
                                "documentationOnFile",
                                "receivingServices",
                                "pathHowConfirmed",
                                "pathSmiInformation",
                                "tCellCountAvailable",
                                "tCellCount",
                                "tCellCountSource",
                                "viralLoadAvailable",
                                "viralLoad",
                                "viralLoadSource",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "disabilitiesId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "disabilityType": {
                                  "type": "integer"
                                },
                                "disabilityResponse": {
                                  "type": "integer"
                                },
                                "indefiniteandImpairs": {
                                  "type": "integer"
                                },
                                "documentationOnFile": {
                                  "type": "integer"
                                },
                                "receivingServices": {
                                  "type": "integer"
                                },
                                "pathHowConfirmed": {
                                  "type": "integer"
                                },
                                "pathSmiInformation": {
                                  "type": "integer"
                                },
                                "tCellCountAvailable": {
                                  "type": "integer"
                                },
                                "tCellCount": {
                                  "type": "integer"
                                },
                                "tCellCountSource": {
                                  "type": "string",
                                },
                                "viralLoadAvailable": {
                                  "type": "integer"
                                },
                                "viralLoad": {
                                  "type": "integer"
                                },
                                "viralLoadSource": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    disabilitiesList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      disabilitiesList:
                        - disabilitiesId: afeb939c-72d9-43e8-95e6-045a39843c10
                          disabilityType: 6
                          disabilityResponse: -1994754550
                          indefiniteandImpairs: 0
                          documentationOnFile: 0
                          receivingServices: 0
                          pathHowConfirmed: 99
                          pathSmiInformation: 0
                          tCellCountAvailable: 1
                          tCellCount: 2
                          tCellCountSource: '3       '
                          viralLoadAvailable: 4
                          viralLoad: 5
                          viralLoadSource: 'test    '
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for disability.  Returns a list of disability ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-disabilities

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "disabilities"
                    ],
                    "properties": {
                      "disabilities": {
                        "type": "object",
                        "required": [
                          "disabilitiesId",
                          "disabilityType",
                          "disabilityResponse",
                          "indefiniteandImpairs",
                          "documentationOnFile",
                          "receivingServices",
                          "pathHowConfirmed",
                          "pathSmiInformation",
                          "tCellCountAvailable",
                          "tCellCount",
                          "tCellCountSource",
                          "viralLoadAvailable",
                          "viralLoad",
                          "viralLoadSource",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "disabilitiesId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "disabilityType": {
                            "type": "integer"
                          },
                          "disabilityResponse": {
                            "type": "integer"
                          },
                          "indefiniteandImpairs": {
                            "type": "integer"
                          },
                          "documentationOnFile": {
                            "type": "integer"
                          },
                          "receivingServices": {
                            "type": "integer"
                          },
                          "pathHowConfirmed": {
                            "type": "integer"
                          },
                          "pathSmiInformation": {
                            "type": "integer"
                          },
                          "tCellCountAvailable": {
                            "type": "integer"
                          },
                          "tCellCount": {
                            "type": "integer"
                          },
                          "tCellCountSource": {
                            "type": "string",
                          },
                          "viralLoadAvailable": {
                            "type": "integer"
                          },
                          "viralLoad": {
                            "type": "integer"
                          },
                          "viralLoadSource": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  disabilities:
                    disabilitiesId: afeb939c-72d9-43e8-95e6-045a39843c10
                    disabilityType: 6
                    disabilityResponse: -1994754550
                    indefiniteandImpairs: 0
                    documentationOnFile: 0
                    receivingServices: 0
                    pathHowConfirmed: 99
                    pathSmiInformation: 0
                    tCellCountAvailable: 1
                    tCellCount: 2
                    tCellCountSource: '3       '
                    viralLoadAvailable: 4
                    viralLoad: 5
                    viralLoadSource: 'test    '
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a disability
      operationId: POST_clients-clientId-enrollments-enrollmentId-disabilities
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "disabilities"
                  ],
                  "properties": {
                    "disabilities": {
                      "type": "object",
                      "required": [
                        "disabilityType",
                        "disabilityResponse",
                        "documentationOnFile",
                        "indefiniteandImpairs",
                        "pathHowConfirmed",
                        "receivingServices",
                        "pathSmiInformation",
                        "tCellCountAvailable",
                        "tCellCount",
                        "tCellCountSource",
                        "viralLoadAvailable",
                        "viralLoad",
                        "viralLoadSource",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "disabilityType": {
                          "type": "integer"
                        },
                        "disabilityResponse": {
                          "type": "integer"
                        },
                        "documentationOnFile": {
                          "type": "integer"
                        },
                        "indefiniteandImpairs": {
                          "type": "integer"
                        },
                        "pathHowConfirmed": {
                          "type": "integer"
                        },
                        "receivingServices": {
                          "type": "integer"
                        },
                        "pathSmiInformation": {
                          "type": "integer"
                        },
                        "tCellCountAvailable": {
                          "type": "integer"
                        },
                        "tCellCount": {
                          "type": "integer"
                        },
                        "tCellCountSource": {
                          "type": "integer"
                        },
                        "viralLoadAvailable": {
                          "type": "integer"
                        },
                        "viralLoad": {
                          "type": "integer"
                        },
                        "viralLoadSource": {
                          "type": "string",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  disabilities:
                    disabilityType: 6
                    disabilityResponse: -1994754550
                    documentationOnFile: 0
                    indefiniteandImpairs: 0
                    pathHowConfirmed: 99
                    receivingServices: 0
                    pathSmiInformation: 0
                    tCellCountAvailable: 1
                    tCellCount: 2
                    tCellCountSource: 3
                    viralLoadAvailable: 4
                    viralLoad: 5
                    viralLoadSource: test
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/disabilities/{disabilityid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "disabilities"
                    ],
                    "properties": {
                      "disabilities": {
                        "type": "object",
                        "required": [
                          "disabilitiesId",
                          "disabilityType",
                          "disabilityResponse",
                          "indefiniteandImpairs",
                          "documentationOnFile",
                          "receivingServices",
                          "pathHowConfirmed",
                          "pathSmiInformation",
                          "tCellCountAvailable",
                          "tCellCount",
                          "tCellCountSource",
                          "viralLoadAvailable",
                          "viralLoad",
                          "viralLoadSource",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "disabilitiesId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "disabilityType": {
                            "type": "integer"
                          },
                          "disabilityResponse": {
                            "type": "integer"
                          },
                          "indefiniteandImpairs": {
                            "type": "integer"
                          },
                          "documentationOnFile": {
                            "type": "integer"
                          },
                          "receivingServices": {
                            "type": "integer"
                          },
                          "pathHowConfirmed": {
                            "type": "integer"
                          },
                          "pathSmiInformation": {
                            "type": "integer"
                          },
                          "tCellCountAvailable": {
                            "type": "integer"
                          },
                          "tCellCount": {
                            "type": "integer"
                          },
                          "tCellCountSource": {
                            "type": "string",
                          },
                          "viralLoadAvailable": {
                            "type": "integer"
                          },
                          "viralLoad": {
                            "type": "integer"
                          },
                          "viralLoadSource": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    disabilities:
                      disabilitiesId: afeb939c-72d9-43e8-95e6-045a39843c10
                      disabilityType: 6
                      disabilityResponse: -1994754550
                      indefiniteandImpairs: 0
                      documentationOnFile: 0
                      receivingServices: 0
                      pathHowConfirmed: 99
                      pathSmiInformation: 0
                      tCellCountAvailable: 1
                      tCellCount: 2
                      tCellCountSource: '3       '
                      viralLoadAvailable: 4
                      viralLoad: 5
                      viralLoadSource: 'test    '
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a disability using a URI resource parameter/ID.
      operationId: GET_clients-clientId-enrollments-enrollmentId-disabilities-disabilityid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific disability specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientId-enrollments-enrollmentId-disabilities-disabilityid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "disabilities"
                  ],
                  "properties": {
                    "disabilities": {
                      "type": "object",
                      "required": [
                        "disabilityType",
                        "disabilityResponse",
                        "documentationOnFile",
                        "indefiniteandImpairs",
                        "pathHowConfirmed",
                        "receivingServices",
                        "pathSmiInformation",
                        "tCellCountAvailable",
                        "tCellCount",
                        "tCellCountSource",
                        "viralLoadAvailable",
                        "viralLoad",
                        "viralLoadSource",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "disabilityType": {
                          "type": "integer"
                        },
                        "disabilityResponse": {
                          "type": "integer"
                        },
                        "documentationOnFile": {
                          "type": "integer"
                        },
                        "indefiniteandImpairs": {
                          "type": "integer"
                        },
                        "pathHowConfirmed": {
                          "type": "integer"
                        },
                        "receivingServices": {
                          "type": "integer"
                        },
                        "pathSmiInformation": {
                          "type": "integer"
                        },
                        "tCellCountAvailable": {
                          "type": "integer"
                        },
                        "tCellCount": {
                          "type": "integer"
                        },
                        "tCellCountSource": {
                          "type": "integer"
                        },
                        "viralLoadAvailable": {
                          "type": "integer"
                        },
                        "viralLoad": {
                          "type": "integer"
                        },
                        "viralLoadSource": {
                          "type": "string",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  disabilities:
                    disabilityType: 6
                    disabilityResponse: -1994754550
                    documentationOnFile: 0
                    indefiniteandImpairs: 0
                    pathHowConfirmed: 99
                    receivingServices: 0
                    pathSmiInformation: 0
                    tCellCountAvailable: 1
                    tCellCount: 2
                    tCellCountSource: 3
                    viralLoadAvailable: 4
                    viralLoad: 5
                    viralLoadSource: test
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific disability specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-disabilities-disabilityid
    parameters:
      - name: disabilityid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Disability Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/disabilities/{disabilityid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "disabilitiesList"
                    ],
                    "properties": {
                      "disabilitiesList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "disabilitiesList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "disabilitiesList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "disabilitiesId",
                                "disabilityType",
                                "disabilityResponse",
                                "indefiniteandImpairs",
                                "documentationOnFile",
                                "receivingServices",
                                "pathHowConfirmed",
                                "pathSmiInformation",
                                "tCellCountAvailable",
                                "tCellCount",
                                "tCellCountSource",
                                "viralLoadAvailable",
                                "viralLoad",
                                "viralLoadSource",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "disabilitiesId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "disabilityType": {
                                  "type": "integer"
                                },
                                "disabilityResponse": {
                                  "type": "integer"
                                },
                                "indefiniteandImpairs": {
                                  "type": "integer"
                                },
                                "documentationOnFile": {
                                  "type": "integer"
                                },
                                "receivingServices": {
                                  "type": "integer"
                                },
                                "pathHowConfirmed": {
                                  "type": "integer"
                                },
                                "pathSmiInformation": {
                                  "type": "integer"
                                },
                                "tCellCountAvailable": {
                                  "type": "integer"
                                },
                                "tCellCount": {
                                  "type": "integer"
                                },
                                "tCellCountSource": {
                                  "type": "string",
                                },
                                "viralLoadAvailable": {
                                  "type": "integer"
                                },
                                "viralLoad": {
                                  "type": "integer"
                                },
                                "viralLoadSource": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    disabilitiesList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      disabilitiesList:
                        - disabilitiesId: afeb939c-72d9-43e8-95e6-045a39843c10
                          disabilityType: 6
                          disabilityResponse: -1994754550
                          indefiniteandImpairs: 0
                          documentationOnFile: 0
                          receivingServices: 0
                          pathHowConfirmed: 99
                          pathSmiInformation: 0
                          tCellCountAvailable: 1
                          tCellCount: 2
                          tCellCountSource: '3       '
                          viralLoadAvailable: 4
                          viralLoad: 5
                          viralLoadSource: 'test    '
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for disability history.  Returns a list of disability ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-disabilities-disabilityid-history
    parameters:
      - name: disabilityid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Disability Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "domesticViolences"
                    ],
                    "properties": {
                      "domesticViolences": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "domesticViolences"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "domesticViolences": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "domesticViolenceId",
                                "domesticViolenceVictim",
                                "whenOccurred",
                                "currentlyFleeing",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "domesticViolenceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "domesticViolenceVictim": {
                                  "type": "integer"
                                },
                                "whenOccurred": {
                                  "type": "integer"
                                },
                                "currentlyFleeing": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    domesticViolences:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      domesticViolences:
                        - domesticViolenceId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          domesticViolenceVictim: 9
                          whenOccurred: 8
                          currentlyFleeing: -588416505
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for domesticViolence.  Returns a list of domesticViolence ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-domesticViolences

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "domesticViolence"
                    ],
                    "properties": {
                      "domesticViolence": {
                        "type": "object",
                        "required": [
                          "domesticViolenceId",
                          "domesticViolenceVictim",
                          "whenOccurred",
                          "currentlyFleeing",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "domesticViolenceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "domesticViolenceVictim": {
                            "type": "integer"
                          },
                          "whenOccurred": {
                            "type": "integer"
                          },
                          "currentlyFleeing": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  domesticViolence:
                    domesticViolenceId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    domesticViolenceVictim: 9
                    whenOccurred: 8
                    currentlyFleeing: -588416505
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a domesticViolence
      operationId: POST_clients-clientId-enrollments-enrollmentId-domesticViolences
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "domesticViolence"
                  ],
                  "properties": {
                    "domesticViolence": {
                      "type": "object",
                      "required": [
                        "domesticViolenceVictim",
                        "whenOccurred",
                        "currentlyFleeing",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "domesticViolenceVictim": {
                          "type": "integer"
                        },
                        "whenOccurred": {
                          "type": "integer"
                        },
                        "currentlyFleeing": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  domesticViolence:
                    domesticViolenceVictim: 9
                    whenOccurred: 8
                    currentlyFleeing: -588416505
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences/{domesticviolenceid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "domesticViolence"
                    ],
                    "properties": {
                      "domesticViolence": {
                        "type": "object",
                        "required": [
                          "domesticViolenceId",
                          "domesticViolenceVictim",
                          "whenOccurred",
                          "currentlyFleeing",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "domesticViolenceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "domesticViolenceVictim": {
                            "type": "integer"
                          },
                          "whenOccurred": {
                            "type": "integer"
                          },
                          "currentlyFleeing": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    domesticViolence:
                      domesticViolenceId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                      domesticViolenceVictim: 9
                      whenOccurred: 8
                      currentlyFleeing: -588416505
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a domesticViolence using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-domesticViolences-domesticViolenceId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific domesticViolence specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-domesticViolences-domesticViolenceId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "domesticViolence"
                  ],
                  "properties": {
                    "domesticViolence": {
                      "type": "object",
                      "required": [
                        "domesticViolenceVictim",
                        "whenOccurred",
                        "currentlyFleeing",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "domesticViolenceVictim": {
                          "type": "integer"
                        },
                        "whenOccurred": {
                          "type": "integer"
                        },
                        "currentlyFleeing": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  domesticViolence:
                    domesticViolenceVictim: 9
                    whenOccurred: 8
                    currentlyFleeing: -588416505
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific domesticViolence specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-domesticViolences-domesticViolenceId
    parameters:
      - name: domesticviolenceid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: domesticViolence Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences/{domesticviolenceid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "domesticViolences"
                    ],
                    "properties": {
                      "domesticViolences": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "domesticViolences"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "domesticViolences": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "domesticViolenceId",
                                "domesticViolenceVictim",
                                "whenOccurred",
                                "currentlyFleeing",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "domesticViolenceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "domesticViolenceVictim": {
                                  "type": "integer"
                                },
                                "whenOccurred": {
                                  "type": "integer"
                                },
                                "currentlyFleeing": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    domesticViolences:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      domesticViolences:
                        - domesticViolenceId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          domesticViolenceVictim: 9
                          whenOccurred: 8
                          currentlyFleeing: -588416505
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for domesticViolence history.  Returns a list of domesticViolence ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-domesticViolences-domesticViolenceId-history
    parameters:
      - name: domesticviolenceid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: domesticViolence Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
#=====Assessment API Docuementation Begins ============================
  '/clients/{clientid}/enrollments/{enrollmentid}/assessments':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessment"
                    ],
                    "properties": {
                      "assessment": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "assessments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "assessments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "assessmentId",
                                "enrollmentId",
                                "clientId",
                                "assessmentLocation",
                                "assessmentLevel",
                                "assessmentType",
                                "prioritizationStatus",
                                "assessmentDate"
                              ],
                              "properties": {
                                "assessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentLocation": {
                                  "type": "string",
                                },
                                "assessmentLevel": {
                                  "type": "integer"
                                },
                                "assessmentType": {
                                  "type": "integer"
                                },
                                "prioritizationStatus": {
                                  "type": "integer"
                                },
                                "assessmentDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    assessment:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      assessments:
                        - assessmentId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          assessmentLocation: location
                          assessmentLevel: 1
                          assessmentType: 1
                          prioritizationStatus: 1
                          assessmentDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for assessment.  Returns a list of assessment ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-assessments

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessment"
                    ],
                    "properties": {
                      "assessment": {
                        "type": "object",
                        "required": [
                          "assessmentId",
                          "enrollmentId",
                          "clientId",
                          "assessmentLocation",
                          "assessmentLevel",
                          "assessmentType",
                          "prioritizationStatus",
                          "assessmentDate"
                        ],
                        "properties": {
                          "assessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentLocation": {
                            "type": "string",
                          },
                          "assessmentLevel": {
                            "type": "integer"
                          },
                          "assessmentType": {
                            "type": "integer"
                          },
                          "prioritizationStatus": {
                            "type": "integer"
                          },
                          "assessmentDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  assessment:
                    assessmentId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentLocation: location
                    assessmentLevel: 1
                    assessmentType: 1
                    prioritizationStatus: 1
                    assessmentDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add an assessment
      operationId: POST_clients-clientId-enrollments-enrollmentId-assessment
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "assessment"
                  ],
                  "properties": {
                    "assessment": {
                      "type": "object",
                      "required": [
                        "assessmentId",
                        "enrollmentId",
                        "clientId",
                        "assessmentLocation",
                        "assessmentLevel",
                        "assessmentType",
                        "prioritizationStatus",
                        "assessmentDate"
                      ],
                      "properties": {
                        "assessmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentLocation": {
                          "type": "string",
                        },
                        "assessmentLevel": {
                          "type": "integer"
                        },
                        "assessmentType": {
                          "type": "integer"
                        },
                        "prioritizationStatus": {
                          "type": "integer"
                        },
                        "assessmentDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  assessment:
                    assessmentId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentLocation: location
                    assessmentLevel: 1
                    assessmentType: 1
                    prioritizationStatus: 1
                    assessmentDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/assessments/{assessmentid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessment"
                    ],
                    "properties": {
                      "assessment": {
                        "type": "object",
                        "required": [
                          "assessmentId",
                          "enrollmentId",
                          "clientId",
                          "assessmentLocation",
                          "assessmentLevel",
                          "assessmentType",
                          "prioritizationStatus",
                          "assessmentDate"
                        ],
                        "properties": {
                          "assessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentLocation": {
                            "type": "string",
                          },
                          "assessmentLevel": {
                            "type": "integer"
                          },
                          "assessmentType": {
                            "type": "integer"
                          },
                          "prioritizationStatus": {
                            "type": "integer"
                          },
                          "assessmentDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    assessment:
                      assessmentId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                      enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      assessmentLocation: location
                      assessmentLevel: 1
                      assessmentType: 1
                      prioritizationStatus: 1
                      assessmentDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets an assessment using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-assessments-assessmentId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific assessment specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-assessments-assessmentId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "assessment"
                  ],
                  "properties": {
                    "assessment": {
                      "type": "object",
                      "required": [
                        "assessmentId",
                        "enrollmentId",
                        "clientId",
                        "assessmentLocation",
                        "assessmentLevel",
                        "assessmentType",
                        "prioritizationStatus",
                        "assessmentDate"
                      ],
                      "properties": {
                        "assessmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentLocation": {
                          "type": "string",
                        },
                        "assessmentLevel": {
                          "type": "integer"
                        },
                        "assessmentType": {
                          "type": "integer"
                        },
                        "prioritizationStatus": {
                          "type": "integer"
                        },
                        "assessmentDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  assessment:
                    assessmentId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentLocation: location
                    assessmentLevel: 1
                    assessmentType: 1
                    prioritizationStatus: 1
                    assessmentDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific assessment specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-assessments-assessmentId
    parameters:
      - name: assessmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: assessment Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/assessments/{assessmentid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessment"
                    ],
                    "properties": {
                      "assessment": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "assessments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "assessments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "assessmentId",
                                "enrollmentId",
                                "clientId",
                                "assessmentLocation",
                                "assessmentLevel",
                                "assessmentType",
                                "prioritizationStatus",
                                "assessmentDate"
                              ],
                              "properties": {
                                "assessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentLocation": {
                                  "type": "string",
                                },
                                "assessmentLevel": {
                                  "type": "integer"
                                },
                                "assessmentType": {
                                  "type": "integer"
                                },
                                "prioritizationStatus": {
                                  "type": "integer"
                                },
                                "assessmentDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    assessment:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      assessments:
                        - assessmentId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          assessmentLocation: location
                          assessmentLevel: 1
                          assessmentType: 1
                          prioritizationStatus: 1
                          assessmentDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for assessment history.  Returns a list of assessment ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-assessments-assessmentId-history
    parameters:
      - name: assessmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: assessment Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
#=====Assessment API Docuementation End ============================
#=====Assessment Questions API Docuementation Begins ============================
  '/clients/{clientid}/enrollments/{enrollmentid}/assessmentquestions':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentQuestion"
                    ],
                    "properties": {
                      "assessmentQuestion": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "assessmentQuestions"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "assessmentQuestions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "assessmentQuestionId",
                                "enrollmentId",
                                "clientId",
                                "assessmentId",
                                "assessmentQuestionGroup",
                                "assessmentQuestionOrder",
                                "assessmentAnswer",
                                "assessmentQuestion"
                              ],
                              "properties": {
                                "assessmentQuestionId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentQuestionGroup": {
                                  "type": "string",
                                },
                                "assessmentQuestionOrder": {
                                  "type": "integer"
                                },
                                "assessmentAnswer": {
                                  "type": "string",
                                },
                                "assessmentQuestion": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    assessmentQuestion:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      assessmentQuestions:
                        - assessmentQuestionId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                          assessmentQuestionGroup: location
                          assessmentQuestionOrder: 1
                          assessmentAnswer:  Answer
                          assessmentQuestion: Question
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for assessmentQuestion.  Returns a list of assessmentQuestion ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-assessmentQuestions

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentQuestion"
                    ],
                    "properties": {
                      "assessmentQuestion": {
                        "type": "object",
                        "required": [
                          "assessmentQuestionId",
                          "enrollmentId",
                          "clientId",
                          "assessmentId",
                          "assessmentQuestionGroup",
                          "assessmentQuestionOrder",
                          "assessmentAnswer",
                          "assessmentQuestion"
                        ],
                        "properties": {
                          "assessmentQuestionId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentQuestionGroup": {
                            "type": "string",
                          },
                          "assessmentQuestionOrder": {
                            "type": "integer"
                          },
                          "assessmentAnswer": {
                            "type": "string",
                          },
                          "assessmentQuestion": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                  assessmentQuestion:
                    assessmentQuestionId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                    assessmentQuestionGroup: location
                    assessmentQuestionOrder: 1
                    assessmentAnswer:  Answer
                    assessmentQuestion: Question
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add an assessmentQuestion
      operationId: POST_clients-clientId-enrollments-enrollmentId-assessmentQuestion
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "assessmentQuestion"
                  ],
                  "properties": {
                    "assessmentQuestion": {
                      "type": "object",
                      "required": [
                        "assessmentQuestionId",
                        "enrollmentId",
                        "clientId",
                        "assessmentId",
                        "assessmentQuestionGroup",
                        "assessmentQuestionOrder",
                        "assessmentAnswer",
                        "assessmentQuestion"
                      ],
                      "properties": {
                        "assessmentQuestionId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentQuestionGroup": {
                          "type": "string",
                        },
                        "assessmentQuestionOrder": {
                          "type": "integer"
                        },
                        "assessmentAnswer": {
                          "type": "string",
                        },
                        "assessmentQuestion": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  assessmentQuestion:
                    assessmentQuestionId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                    assessmentQuestionGroup: location
                    assessmentQuestionOrder: 1
                    assessmentAnswer:  Answer
                    assessmentQuestion: Question
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/assessmentquestions/{assessmentquestionid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentQuestion"
                    ],
                    "properties": {
                      "assessmentQuestion": {
                        "type": "object",
                        "required": [
                          "assessmentQuestionId",
                          "enrollmentId",
                          "clientId",
                          "assessmentId",
                          "assessmentQuestionGroup",
                          "assessmentQuestionOrder",
                          "assessmentAnswer",
                          "assessmentQuestion"
                        ],
                        "properties": {
                          "assessmentQuestionId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentQuestionGroup": {
                            "type": "string",
                          },
                          "assessmentQuestionOrder": {
                            "type": "integer"
                          },
                          "assessmentAnswer": {
                            "type": "string",
                          },
                          "assessmentQuestion": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                    assessmentQuestion:
                      assessmentQuestionId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                      enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                      assessmentQuestionGroup: location
                      assessmentQuestionOrder: 1
                      assessmentAnswer:  Answer
                      assessmentQuestion: Question
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets an assessmentQuestion using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-assessmentQuestions-assessmentQuestionId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific assessmentQuestion specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-assessmentQuestions-assessmentQuestionId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "assessmentQuestion"
                  ],
                  "properties": {
                    "assessmentQuestion": {
                      "type": "object",
                      "required": [
                        "assessmentQuestionId",
                        "enrollmentId",
                        "clientId",
                        "assessmentId",
                        "assessmentQuestionGroup",
                        "assessmentQuestionOrder",
                        "assessmentAnswer",
                        "assessmentQuestion"
                      ],
                      "properties": {
                        "assessmentQuestionId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentQuestionGroup": {
                          "type": "string",
                        },
                        "assessmentQuestionOrder": {
                          "type": "integer"
                        },
                        "assessmentAnswer": {
                          "type": "string",
                        },
                        "assessmentQuestion": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  assessmentQuestion:
                    assessmentQuestionId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                    assessmentQuestionGroup: location
                    assessmentQuestionOrder: 1
                    assessmentAnswer:  Answer
                    assessmentQuestion: Question
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific assessmentQuestion specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-assessmentQuestions-assessmentQuestionId
    parameters:
      - name: assessmentquestionid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: assessmentQuestion Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/assessmentquestions/{assessmentquestionid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentQuestion"
                    ],
                    "properties": {
                      "assessmentQuestion": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "assessmentQuestions"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "assessmentQuestions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "assessmentQuestionId",
                                "enrollmentId",
                                "clientId",
                                "assessmentId",
                                "assessmentQuestionGroup",
                                "assessmentQuestionOrder",
                                "assessmentAnswer",
                                "assessmentQuestion"
                              ],
                              "properties": {
                                "assessmentQuestionId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentQuestionGroup": {
                                  "type": "string",
                                },
                                "assessmentQuestionOrder": {
                                  "type": "integer"
                                },
                                "assessmentAnswer": {
                                  "type": "string",
                                },
                                "assessmentQuestion": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    assessmentQuestion:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      assessmentQuestions:
                        - assessmentQuestionId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                          assessmentQuestionGroup: location
                          assessmentQuestionOrder: 1
                          assessmentAnswer:  Answer
                          assessmentQuestion: Question
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for assessmentQuestion history.  Returns a list of assessmentQuestion ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-assessmentQuestions-assessmentQuestionId-history
    parameters:
      - name: assessmentquestionid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: assessmentQuestion Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
#=====Assessment Question API Docuementation End ============================
#=====Assessment Questions API Docuementation Deprecated Begins ============================
  '/clients/{clientid}/enrollments/{enrollmentid}/assessmentQuestions':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentQuestion"
                    ],
                    "properties": {
                      "assessmentQuestion": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "assessmentQuestions"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "assessmentQuestions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "assessmentQuestionId",
                                "enrollmentId",
                                "clientId",
                                "assessmentId",
                                "assessmentQuestionGroup",
                                "assessmentQuestionOrder",
                                "assessmentAnswer",
                                "assessmentQuestion"
                              ],
                              "properties": {
                                "assessmentQuestionId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentQuestionGroup": {
                                  "type": "string",
                                },
                                "assessmentQuestionOrder": {
                                  "type": "integer"
                                },
                                "assessmentAnswer": {
                                  "type": "string",
                                },
                                "assessmentQuestion": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    assessmentQuestion:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      assessmentQuestions:
                        - assessmentQuestionId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                          assessmentQuestionGroup: location
                          assessmentQuestionOrder: 1
                          assessmentAnswer:  Answer
                          assessmentQuestion: Question
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for assessmentQuestion.  Returns a list of assessmentQuestion ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-assessmentQuestions

    post:
      deprecated: true
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentQuestion"
                    ],
                    "properties": {
                      "assessmentQuestion": {
                        "type": "object",
                        "required": [
                          "assessmentQuestionId",
                          "enrollmentId",
                          "clientId",
                          "assessmentId",
                          "assessmentQuestionGroup",
                          "assessmentQuestionOrder",
                          "assessmentAnswer",
                          "assessmentQuestion"
                        ],
                        "properties": {
                          "assessmentQuestionId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentQuestionGroup": {
                            "type": "string",
                          },
                          "assessmentQuestionOrder": {
                            "type": "integer"
                          },
                          "assessmentAnswer": {
                            "type": "string",
                          },
                          "assessmentQuestion": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                  assessmentQuestion:
                    assessmentQuestionId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                    assessmentQuestionGroup: location
                    assessmentQuestionOrder: 1
                    assessmentAnswer:  Answer
                    assessmentQuestion: Question
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add an assessmentQuestion
      operationId: POST_dep_clients-clientId-enrollments-enrollmentId-assessmentQuestion
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "assessmentQuestion"
                  ],
                  "properties": {
                    "assessmentQuestion": {
                      "type": "object",
                      "required": [
                        "assessmentQuestionId",
                        "enrollmentId",
                        "clientId",
                        "assessmentId",
                        "assessmentQuestionGroup",
                        "assessmentQuestionOrder",
                        "assessmentAnswer",
                        "assessmentQuestion"
                      ],
                      "properties": {
                        "assessmentQuestionId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentQuestionGroup": {
                          "type": "string",
                        },
                        "assessmentQuestionOrder": {
                          "type": "integer"
                        },
                        "assessmentAnswer": {
                          "type": "string",
                        },
                        "assessmentQuestion": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  assessmentQuestion:
                    assessmentQuestionId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                    assessmentQuestionGroup: location
                    assessmentQuestionOrder: 1
                    assessmentAnswer:  Answer
                    assessmentQuestion: Question
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/assessmentQuestions/{assessmentquestionid}':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentQuestion"
                    ],
                    "properties": {
                      "assessmentQuestion": {
                        "type": "object",
                        "required": [
                          "assessmentQuestionId",
                          "enrollmentId",
                          "clientId",
                          "assessmentId",
                          "assessmentQuestionGroup",
                          "assessmentQuestionOrder",
                          "assessmentAnswer",
                          "assessmentQuestion"
                        ],
                        "properties": {
                          "assessmentQuestionId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentQuestionGroup": {
                            "type": "string",
                          },
                          "assessmentQuestionOrder": {
                            "type": "integer"
                          },
                          "assessmentAnswer": {
                            "type": "string",
                          },
                          "assessmentQuestion": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                    assessmentQuestion:
                      assessmentQuestionId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                      enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                      assessmentQuestionGroup: location
                      assessmentQuestionOrder: 1
                      assessmentAnswer:  Answer
                      assessmentQuestion: Question
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets an assessmentQuestion using a URI resource parameter/ID.
      operationId: >-
        GET_dep_clients-clientId-enrollments-enrollmentId-assessmentQuestions-assessmentQuestionId
    put:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific assessmentQuestion specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_dep_clients-clientId-enrollments-enrollmentId-assessmentQuestions-assessmentQuestionId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "assessmentQuestion"
                  ],
                  "properties": {
                    "assessmentQuestion": {
                      "type": "object",
                      "required": [
                        "assessmentQuestionId",
                        "enrollmentId",
                        "clientId",
                        "assessmentId",
                        "assessmentQuestionGroup",
                        "assessmentQuestionOrder",
                        "assessmentAnswer",
                        "assessmentQuestion"
                      ],
                      "properties": {
                        "assessmentQuestionId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentQuestionGroup": {
                          "type": "string",
                        },
                        "assessmentQuestionOrder": {
                          "type": "integer"
                        },
                        "assessmentAnswer": {
                          "type": "string",
                        },
                        "assessmentQuestion": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  assessmentQuestion:
                    assessmentQuestionId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                    assessmentQuestionGroup: location
                    assessmentQuestionOrder: 1
                    assessmentAnswer:  Answer
                    assessmentQuestion: Question
        required: true
    delete:
      deprecated: true
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific assessmentQuestion specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_dep_clients-clientId-enrollments-enrollmentId-assessmentQuestions-assessmentQuestionId
    parameters:
      - name: assessmentquestionid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: assessmentQuestion Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/assessmentQuestions/{assessmentquestionid}/history':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentQuestion"
                    ],
                    "properties": {
                      "assessmentQuestion": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "assessmentQuestions"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "assessmentQuestions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "assessmentQuestionId",
                                "enrollmentId",
                                "clientId",
                                "assessmentId",
                                "assessmentQuestionGroup",
                                "assessmentQuestionOrder",
                                "assessmentAnswer",
                                "assessmentQuestion"
                              ],
                              "properties": {
                                "assessmentQuestionId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentQuestionGroup": {
                                  "type": "string",
                                },
                                "assessmentQuestionOrder": {
                                  "type": "integer"
                                },
                                "assessmentAnswer": {
                                  "type": "string",
                                },
                                "assessmentQuestion": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    assessmentQuestion:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      assessmentQuestions:
                        - assessmentQuestionId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                          assessmentQuestionGroup: location
                          assessmentQuestionOrder: 1
                          assessmentAnswer:  Answer
                          assessmentQuestion: Question
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for assessmentQuestion history.  Returns a list of assessmentQuestion ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-assessmentQuestions-assessmentQuestionId-history
    parameters:
      - name: assessmentquestionid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: assessmentQuestion Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
#=====Assessment Question API Docuementation End ============================

#=====Assessment Result API Docuementation Begins ============================
  '/clients/{clientid}/enrollments/{enrollmentid}/assessmentresults':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentResult"
                    ],
                    "properties": {
                      "assessmentResult": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "assessmentResults"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "assessmentResults": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "assessmentResultId",
                                "enrollmentId",
                                "clientId",
                                "assessmentId",
                                "assessmentResult",
                                "assessmentResultType"
                              ],
                              "properties": {
                                "assessmentResultId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentResult": {
                                  "type": "string",
                                },
                                "assessmentResultType": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    assessmentResult:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      assessmentResults:
                        - assessmentResultId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                          assessmentResult: location
                          assessmentResultType: 1
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for assessmentResult.  Returns a list of assessmentResult ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-assessmentResults

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentResult"
                    ],
                    "properties": {
                      "assessmentResult": {
                        "type": "object",
                        "required": [
                          "assessmentResultId",
                          "enrollmentId",
                          "clientId",
                          "assessmentId",
                          "assessmentResult",
                          "assessmentResultType"
                        ],
                        "properties": {
                          "assessmentResultId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentResult": {
                            "type": "string",
                          },
                          "assessmentResultType": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  assessmentResult:
                    assessmentResultId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                    assessmentResult: location
                    assessmentResultType: 1
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add an assessmentResult
      operationId: POST_clients-clientId-enrollments-enrollmentId-assessmentResult
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "assessmentResult"
                  ],
                  "properties": {
                    "assessmentResult": {
                      "type": "object",
                      "required": [
                        "assessmentResultId",
                        "enrollmentId",
                        "clientId",
                        "assessmentId",
                        "assessmentResult",
                        "assessmentResultType"
                      ],
                      "properties": {
                        "assessmentResultId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentResult": {
                          "type": "string",
                        },
                        "assessmentResultType": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  assessmentResult:
                    assessmentResultId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                    assessmentResult: location
                    assessmentResultType: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/assessmentresults/{assessmentresultid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentResult"
                    ],
                    "properties": {
                      "assessmentResult": {
                        "type": "object",
                        "required": [
                          "assessmentResultId",
                          "enrollmentId",
                          "clientId",
                          "assessmentId",
                          "assessmentResultGroup",
                          "assessmentResultOrder",
                          "assessmentAnswer",
                          "assessmentResult"
                        ],
                        "properties": {
                          "assessmentResultId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentResultGroup": {
                            "type": "string",
                          },
                          "assessmentResultOrder": {
                            "type": "integer"
                          },
                          "assessmentAnswer": {
                            "type": "string",
                          },
                          "assessmentResult": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                    assessmentResult:
                      assessmentResultId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                      enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                      assessmentResultGroup: location
                      assessmentResultOrder: 1
                      assessmentAnswer:  Answer
                      assessmentResult: Question
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets an assessmentResult using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-assessmentResults-assessmentResultId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific assessmentResult specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-assessmentResults-assessmentResultId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "assessmentResult"
                  ],
                  "properties": {
                    "assessmentResult": {
                      "type": "object",
                      "required": [
                        "assessmentResultId",
                        "enrollmentId",
                        "clientId",
                        "assessmentId",
                        "assessmentResultGroup",
                        "assessmentResultOrder",
                        "assessmentAnswer",
                        "assessmentResult"
                      ],
                      "properties": {
                        "assessmentResultId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentResultGroup": {
                          "type": "string",
                        },
                        "assessmentResultOrder": {
                          "type": "integer"
                        },
                        "assessmentAnswer": {
                          "type": "string",
                        },
                        "assessmentResult": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  assessmentResult:
                    assessmentResultId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                    assessmentResultGroup: location
                    assessmentResultOrder: 1
                    assessmentAnswer:  Answer
                    assessmentResult: Question
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific assessmentResult specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-assessmentResults-assessmentResultId
    parameters:
      - name: assessmentresultid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: assessmentResult Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/assessmentresults/{assessmentresultid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentResult"
                    ],
                    "properties": {
                      "assessmentResult": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "assessmentResults"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "assessmentResults": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "assessmentResultId",
                                "enrollmentId",
                                "clientId",
                                "assessmentId",
                                "assessmentResult",
                                "assessmentResultType"
                              ],
                              "properties": {
                                "assessmentResultId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentResult": {
                                  "type": "string",
                                },
                                "assessmentResultType": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    assessmentResult:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      assessmentResults:
                        - assessmentResultId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                          assessmentResult: location
                          assessmentResultType: 1
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for assessmentResult history.  Returns a list of assessmentResult ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-assessmentResults-assessmentResultId-history
    parameters:
      - name: assessmentresultid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: assessmentResult Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
#=====Assessment Result  API Docuementation End ============================


#=====Assessment Result API Docuementation Begins ============================
  '/clients/{clientid}/enrollments/{enrollmentid}/assessmentResults':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentResult"
                    ],
                    "properties": {
                      "assessmentResult": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "assessmentResults"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "assessmentResults": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "assessmentResultId",
                                "enrollmentId",
                                "clientId",
                                "assessmentId",
                                "assessmentResult",
                                "assessmentResultType"
                              ],
                              "properties": {
                                "assessmentResultId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentResult": {
                                  "type": "string",
                                },
                                "assessmentResultType": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    assessmentResult:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      assessmentResults:
                        - assessmentResultId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                          assessmentResult: location
                          assessmentResultType: 1
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for assessmentResult.  Returns a list of assessmentResult ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-assessmentResults

    post:
      deprecated: true
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentResult"
                    ],
                    "properties": {
                      "assessmentResult": {
                        "type": "object",
                        "required": [
                          "assessmentResultId",
                          "enrollmentId",
                          "clientId",
                          "assessmentId",
                          "assessmentResult",
                          "assessmentResultType"
                        ],
                        "properties": {
                          "assessmentResultId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentResult": {
                            "type": "string",
                          },
                          "assessmentResultType": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  assessmentResult:
                    assessmentResultId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                    assessmentResult: location
                    assessmentResultType: 1
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add an assessmentResult
      operationId: POST_dep_clients-clientId-enrollments-enrollmentId-assessmentResult
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "assessmentResult"
                  ],
                  "properties": {
                    "assessmentResult": {
                      "type": "object",
                      "required": [
                        "assessmentResultId",
                        "enrollmentId",
                        "clientId",
                        "assessmentId",
                        "assessmentResult",
                        "assessmentResultType"
                      ],
                      "properties": {
                        "assessmentResultId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentResult": {
                          "type": "string",
                        },
                        "assessmentResultType": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  assessmentResult:
                    assessmentResultId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                    assessmentResult: location
                    assessmentResultType: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/assessmentResults/{assessmentresultid}':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentResult"
                    ],
                    "properties": {
                      "assessmentResult": {
                        "type": "object",
                        "required": [
                          "assessmentResultId",
                          "enrollmentId",
                          "clientId",
                          "assessmentId",
                          "assessmentResultGroup",
                          "assessmentResultOrder",
                          "assessmentAnswer",
                          "assessmentResult"
                        ],
                        "properties": {
                          "assessmentResultId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentResultGroup": {
                            "type": "string",
                          },
                          "assessmentResultOrder": {
                            "type": "integer"
                          },
                          "assessmentAnswer": {
                            "type": "string",
                          },
                          "assessmentResult": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                    assessmentResult:
                      assessmentResultId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                      enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                      assessmentResultGroup: location
                      assessmentResultOrder: 1
                      assessmentAnswer:  Answer
                      assessmentResult: Question
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets an assessmentResult using a URI resource parameter/ID.
      operationId: >-
        GET_dep_clients-clientId-enrollments-enrollmentId-assessmentResults-assessmentResultId
    put:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific assessmentResult specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_dep_clients-clientId-enrollments-enrollmentId-assessmentResults-assessmentResultId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "assessmentResult"
                  ],
                  "properties": {
                    "assessmentResult": {
                      "type": "object",
                      "required": [
                        "assessmentResultId",
                        "enrollmentId",
                        "clientId",
                        "assessmentId",
                        "assessmentResultGroup",
                        "assessmentResultOrder",
                        "assessmentAnswer",
                        "assessmentResult"
                      ],
                      "properties": {
                        "assessmentResultId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "assessmentResultGroup": {
                          "type": "string",
                        },
                        "assessmentResultOrder": {
                          "type": "integer"
                        },
                        "assessmentAnswer": {
                          "type": "string",
                        },
                        "assessmentResult": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  assessmentResult:
                    assessmentResultId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                    assessmentResultGroup: location
                    assessmentResultOrder: 1
                    assessmentAnswer:  Answer
                    assessmentResult: Question
        required: true
    delete:
      deprecated: true
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific assessmentResult specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_dep_clients-clientId-enrollments-enrollmentId-assessmentResults-assessmentResultId
    parameters:
      - name: assessmentresultid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: assessmentResult Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/assessmentResults/{assessmentresultid}/history':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "assessmentResult"
                    ],
                    "properties": {
                      "assessmentResult": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "assessmentResults"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "assessmentResults": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "assessmentResultId",
                                "enrollmentId",
                                "clientId",
                                "assessmentId",
                                "assessmentResult",
                                "assessmentResultType"
                              ],
                              "properties": {
                                "assessmentResultId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentResult": {
                                  "type": "string",
                                },
                                "assessmentResultType": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    assessmentResult:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      assessmentResults:
                        - assessmentResultId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          assessmentId: 4kjdd92a-4d6c-44bb-bb07-4431ab12fo98
                          assessmentResult: location
                          assessmentResultType: 1
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for assessmentResult history.  Returns a list of assessmentResult ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-assessmentResults-assessmentResultId-history
    parameters:
      - name: assessmentresultid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: assessmentResult Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
#=====Assessment Result  API Docuementation End ============================

#=====Event API Docuementation Begins ============================
  '/clients/{clientid}/enrollments/{enrollmentid}/events':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "event"
                    ],
                    "properties": {
                      "event": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "events"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "events": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "eventId",
                                "enrollmentId",
                                "clientId",
                                "eventDate",
                                "resultDate",
                                "locationcrisisorphhousing",
                                "referralResult",
                                "event",
                                "referralCaseManageAfter"
                              ],
                              "properties": {
                                "eventId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "eventDate": {
                                  "type": "string",
                                  "format": "YYYY-MM-dd",
                                },
                                "resultDate": {
                                  "type": "string",
                                  "format": "YYYY-MM-dd",
                                },
                                "locationcrisisorphhousing": {
                                  "type": "integer"
                                },
                                "referralResult": {
                                  "type": "integer"
                                },
                                "event": {
                                  "type": "integer"
                                },
                                "referralCaseManageAfter": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    event:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      events:
                        - eventId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          eventDate: 2019-01-01
                          resultDate: 2019-01-01
                          locationcrisisorphhousing: 1
                          referralResult: 1
                          event: 2
                          referralCaseManageAfter: 1
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for event.  Returns a list of event ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-events

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "event"
                    ],
                    "properties": {
                      "event": {
                        "type": "object",
                        "required": [
                          "eventId",
                          "enrollmentId",
                          "clientId",
                          "eventDate",
                          "resultDate",
                          "locationcrisisorphhousing",
                          "referralResult",
                          "event",
                          "referralCaseManageAfter"
                        ],
                        "properties": {
                          "eventId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "eventDate": {
                            "type": "string",
                            "format": "YYYY-MM-dd",
                          },
                          "resultDate": {
                            "type": "string",
                            "format": "YYYY-MM-dd",
                          },
                          "locationcrisisorphhousing": {
                            "type": "integer"
                          },
                          "referralResult": {
                            "type": "integer"
                          },
                          "event": {
                            "type": "integer"
                          },
                          "referralCaseManageAfter": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  event:
                    eventId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    eventDate: 2019-01-01
                    resultDate: 2019-01-01
                    locationcrisisorphhousing: 1
                    referralResult: 1
                    event: 2
                    referralCaseManageAfter: 1
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add an event
      operationId: POST_clients-clientId-enrollments-enrollmentId-event
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "event"
                  ],
                  "properties": {
                    "event": {
                      "type": "object",
                      "required": [
                        "eventId",
                        "enrollmentId",
                        "clientId",
                        "eventDate",
                        "resultDate",
                        "locationcrisisorphhousing",
                        "referralResult",
                        "event",
                        "referralCaseManageAfter"
                      ],
                      "properties": {
                        "eventId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "eventDate": {
                          "type": "string",
                          "format": "YYYY-MM-dd",
                        },
                        "resultDate": {
                          "type": "string",
                          "format": "YYYY-MM-dd",
                        },
                        "locationcrisisorphhousing": {
                          "type": "integer"
                        },
                        "referralResult": {
                          "type": "integer"
                        },
                        "event": {
                          "type": "integer"
                        },
                        "referralCaseManageAfter": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  event:
                    eventId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    eventDate: 2019-01-01
                    resultDate: 2019-01-01
                    locationcrisisorphhousing: 1
                    referralResult: 1
                    event: 2
                    referralCaseManageAfter: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/events/{eventid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "event"
                    ],
                    "properties": {
                      "event": {
                        "type": "object",
                        "required": [
                          "eventId",
                          "enrollmentId",
                          "clientId",
                          "eventDate",
                          "resultDate",
                          "locationcrisisorphhousing",
                          "referralResult",
                          "event",
                          "referralCaseManageAfter"
                        ],
                        "properties": {
                          "eventId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "eventDate": {
                            "type": "string",
                            "format": "YYYY-MM-dd",
                          },
                          "resultDate": {
                            "type": "string",
                            "format": "YYYY-MM-dd",
                          },
                          "locationcrisisorphhousing": {
                            "type": "integer"
                          },
                          "referralResult": {
                            "type": "integer"
                          },
                          "event": {
                            "type": "integer"
                          },
                          "referralCaseManageAfter": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    event:
                      eventId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                      enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      eventDate: 2019-01-01
                      resultDate: 2019-01-01
                      locationcrisisorphhousing: 1
                      referralResult: 1
                      event: 2
                      referralCaseManageAfter: 1
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets an event using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-events-eventId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific event specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-events-eventId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "event"
                  ],
                  "properties": {
                    "event": {
                      "type": "object",
                      "required": [
                        "eventId",
                        "enrollmentId",
                        "clientId",
                        "eventDate",
                        "resultDate",
                        "locationcrisisorphhousing",
                        "referralResult",
                        "event",
                        "referralCaseManageAfter"
                      ],
                      "properties": {
                        "eventId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "eventDate": {
                          "type": "string",
                          "format": "YYYY-MM-dd",
                        },
                        "resultDate": {
                          "type": "string",
                          "format": "YYYY-MM-dd",
                        },
                        "locationcrisisorphhousing": {
                          "type": "integer"
                        },
                        "referralResult": {
                          "type": "integer"
                        },
                        "event": {
                          "type": "integer"
                        },
                        "referralCaseManageAfter": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  event:
                    eventId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    eventDate: 2019-01-01
                    resultDate: 2019-01-01
                    locationcrisisorphhousing: 1
                    referralResult: 1
                    event: 2
                    referralCaseManageAfter: 1
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific event specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-events-eventId
    parameters:
      - name: eventid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: event Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/events/{eventid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "event"
                    ],
                    "properties": {
                      "event": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "events"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "events": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "eventId",
                                "enrollmentId",
                                "clientId",
                                "eventDate",
                                "resultDate",
                                "locationcrisisorphhousing",
                                "referralResult",
                                "event",
                                "referralCaseManageAfter"
                              ],
                              "properties": {
                                "eventId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "eventDate": {
                                  "type": "string",
                                  "format": "YYYY-MM-dd",
                                },
                                "resultDate": {
                                  "type": "string",
                                  "format": "YYYY-MM-dd",
                                },
                                "locationcrisisorphhousing": {
                                  "type": "integer"
                                },
                                "referralResult": {
                                  "type": "integer"
                                },
                                "event": {
                                  "type": "integer"
                                },
                                "referralCaseManageAfter": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    event:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      events:
                        - eventId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          eventDate: 2019-01-01
                          resultDate: 2019-01-01
                          locationcrisisorphhousing: 1
                          referralResult: 1
                          event: 2
                          referralCaseManageAfter: 1
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for event history.  Returns a list of event ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-events-eventId-history
    parameters:
      - name: eventid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: event Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
#=====Event API Docuementation End ============================
#=====Current Living Situation API Docuementation Begins ============================
  '/clients/{clientid}/enrollments/{enrollmentid}/currentlivingsituations':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "currentLivingSituation"
                    ],
                    "properties": {
                      "currentLivingSituation": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "currentLivingSituations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "currentLivingSituations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "currentLivingSituationId",
                                "enrollmentId",
                                "livingSituation",
                                "verifiedBy",
                                "locationdetails",
                                "subsequentresidence",
                                "resourcestoobtain",
                                "movedtwoormore",
                                "currentLivingSituation"
                              ],
                              "properties": {
                                "currentLivingSituationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "livingSituation": {
                                  "type": "integer"
                                },
                                "verifiedBy": {
                                  "type": "integer"
                                },
                                "locationdetails": {
                                  "type": "integer"
                                },
                                "subsequentresidence": {
                                  "type": "integer"
                                },
                                "resourcestoobtain": {
                                  "type": "integer"
                                },
                                "movedtwoormore": {
                                  "type": "integer"
                                },
                                "currentLivingSituation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    currentLivingSituation:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      currentLivingSituations:
                        - currentLivingSituationId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          livingSituation: 1
                          verifiedBy: 1
                          locationdetails: 1
                          subsequentresidence: 2
                          resourcestoobtain: 1
                          movedtwoormore: 1
                          currentLivingSituation: 2
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for currentLivingSituation.  Returns a list of currentLivingSituation ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-currentLivingSituations

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "currentLivingSituation"
                    ],
                    "properties": {
                      "currentLivingSituation": {
                        "type": "object",
                        "required": [
                          "currentLivingSituationId",
                          "enrollmentId",
                          "clientId",
                          "livingSituation",
                          "verifiedBy",
                          "locationdetails",
                          "subsequentresidence",
                          "resourcestoobtain",
                          "movedtwoormore",
                          "currentLivingSituation"
                        ],
                        "properties": {
                          "currentLivingSituationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "livingSituation": {
                            "type": "integer"
                          },
                          "verifiedBy": {
                            "type": "integer"
                          },
                          "locationdetails": {
                            "type": "integer"
                          },
                          "subsequentresidence": {
                            "type": "integer"
                          },
                          "resourcestoobtain": {
                            "type": "integer"
                          },
                          "movedtwoormore": {
                            "type": "integer"
                          },
                          "currentLivingSituation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  currentLivingSituation:
                    currentLivingSituationId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    livingSituation: 1
                    verifiedBy: 1
                    locationdetails: 1
                    subsequentresidence: 2
                    resourcestoobtain: 1
                    movedtwoormore: 1
                    currentLivingSituation: 2
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add an currentLivingSituation
      operationId: POST_clients-clientId-enrollments-enrollmentId-currentLivingSituation
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "currentLivingSituation"
                  ],
                  "properties": {
                    "currentLivingSituation": {
                      "type": "object",
                      "required": [
                        "currentLivingSituationId",
                        "enrollmentId",
                        "clientId",
                        "livingSituation",
                        "verifiedBy",
                        "locationdetails",
                        "subsequentresidence",
                        "resourcestoobtain",
                        "movedtwoormore",
                        "currentLivingSituation"
                      ],
                      "properties": {
                        "currentLivingSituationId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "livingSituation": {
                          "type": "integer"
                        },
                        "verifiedBy": {
                          "type": "integer"
                        },
                        "locationdetails": {
                          "type": "integer"
                        },
                        "subsequentresidence": {
                          "type": "integer"
                        },
                        "resourcestoobtain": {
                          "type": "integer"
                        },
                        "movedtwoormore": {
                          "type": "integer"
                        },
                        "currentLivingSituation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  currentLivingSituation:
                    currentLivingSituationId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    livingSituation: 1
                    verifiedBy: 1
                    locationdetails: 1
                    subsequentresidence: 2
                    resourcestoobtain: 1
                    movedtwoormore: 1
                    currentLivingSituation: 2
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/currentlivingsituations/{currentlivingsituationid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "currentLivingSituation"
                    ],
                    "properties": {
                      "currentLivingSituation": {
                        "type": "object",
                        "required": [
                          "currentLivingSituationId",
                          "enrollmentId",
                          "clientId",
                          "livingSituation",
                          "verifiedBy",
                          "locationdetails",
                          "subsequentresidence",
                          "resourcestoobtain",
                          "movedtwoormore",
                          "currentLivingSituation"
                        ],
                        "properties": {
                          "currentLivingSituationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "livingSituation": {
                            "type": "integer"
                          },
                          "verifiedBy": {
                            "type": "integer"
                          },
                          "locationdetails": {
                            "type": "integer"
                          },
                          "subsequentresidence": {
                            "type": "integer"
                          },
                          "resourcestoobtain": {
                            "type": "integer"
                          },
                          "movedtwoormore": {
                            "type": "integer"
                          },
                          "currentLivingSituation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    currentLivingSituation:
                      currentLivingSituationId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                      enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      livingSituation: 1
                      verifiedBy: 1
                      locationdetails: 1
                      subsequentresidence: 2
                      resourcestoobtain: 1
                      movedtwoormore: 1
                      currentLivingSituation: 2
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets an currentLivingSituation using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-currentLivingSituations-currentLivingSituationId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific currentLivingSituation specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-currentLivingSituations-currentLivingSituationId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "currentLivingSituation"
                  ],
                  "properties": {
                    "currentLivingSituation": {
                      "type": "object",
                      "required": [
                        "currentLivingSituationId",
                        "enrollmentId",
                        "clientId",
                        "livingSituation",
                        "verifiedBy",
                        "locationdetails",
                        "subsequentresidence",
                        "resourcestoobtain",
                        "movedtwoormore",
                        "currentLivingSituation"
                      ],
                      "properties": {
                        "currentLivingSituationId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "livingSituation": {
                          "type": "integer"
                        },
                        "verifiedBy": {
                          "type": "integer"
                        },
                        "locationdetails": {
                          "type": "integer"
                        },
                        "subsequentresidence": {
                          "type": "integer"
                        },
                        "resourcestoobtain": {
                          "type": "integer"
                        },
                        "movedtwoormore": {
                          "type": "integer"
                        },
                        "currentLivingSituation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  currentLivingSituation:
                    currentLivingSituationId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    livingSituation: 1
                    verifiedBy: 1
                    locationdetails: 1
                    subsequentresidence: 2
                    resourcestoobtain: 1
                    movedtwoormore: 1
                    currentLivingSituation: 2
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific currentLivingSituation specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-currentLivingSituations-currentLivingSituationId
    parameters:
      - name: currentlivingsituationid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: currentLivingSituation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/currentlivingsituations/{currentlivingsituationid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "currentLivingSituation"
                    ],
                    "properties": {
                      "currentLivingSituation": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "currentLivingSituations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "currentLivingSituations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "currentLivingSituationId",
                                "enrollmentId",
                                "livingSituation",
                                "verifiedBy",
                                "locationdetails",
                                "subsequentresidence",
                                "resourcestoobtain",
                                "movedtwoormore",
                                "currentLivingSituation"
                              ],
                              "properties": {
                                "currentLivingSituationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "livingSituation": {
                                  "type": "integer"
                                },
                                "verifiedBy": {
                                  "type": "integer"
                                },
                                "locationdetails": {
                                  "type": "integer"
                                },
                                "subsequentresidence": {
                                  "type": "integer"
                                },
                                "resourcestoobtain": {
                                  "type": "integer"
                                },
                                "movedtwoormore": {
                                  "type": "integer"
                                },
                                "currentLivingSituation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    currentLivingSituation:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      currentLivingSituations:
                        - currentLivingSituationId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          livingSituation: 1
                          verifiedBy: 1
                          locationdetails: 1
                          subsequentresidence: 2
                          resourcestoobtain: 1
                          movedtwoormore: 1
                          currentLivingSituation: 2
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for currentLivingSituation history.  Returns a list of currentLivingSituation ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-currentLivingSituations-currentLivingSituationId-history
    parameters:
      - name: currentlivingsituationid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: currentLivingSituation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
#=====Current Living Situation  API Docuementation End ============================

#=====Current Living Situation API Docuementation Begins ============================
  '/clients/{clientid}/enrollments/{enrollmentid}/currentLivingSituations':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "currentLivingSituation"
                    ],
                    "properties": {
                      "currentLivingSituation": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "currentLivingSituations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "currentLivingSituations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "currentLivingSituationId",
                                "enrollmentId",
                                "livingSituation",
                                "verifiedBy",
                                "locationdetails",
                                "subsequentresidence",
                                "resourcestoobtain",
                                "movedtwoormore",
                                "currentLivingSituation"
                              ],
                              "properties": {
                                "currentLivingSituationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "livingSituation": {
                                  "type": "integer"
                                },
                                "verifiedBy": {
                                  "type": "integer"
                                },
                                "locationdetails": {
                                  "type": "integer"
                                },
                                "subsequentresidence": {
                                  "type": "integer"
                                },
                                "resourcestoobtain": {
                                  "type": "integer"
                                },
                                "movedtwoormore": {
                                  "type": "integer"
                                },
                                "currentLivingSituation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    currentLivingSituation:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      currentLivingSituations:
                        - currentLivingSituationId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          livingSituation: 1
                          verifiedBy: 1
                          locationdetails: 1
                          subsequentresidence: 2
                          resourcestoobtain: 1
                          movedtwoormore: 1
                          currentLivingSituation: 2
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for currentLivingSituation.  Returns a list of currentLivingSituation ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-currentLivingSituations

    post:
      deprecated: true
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "currentLivingSituation"
                    ],
                    "properties": {
                      "currentLivingSituation": {
                        "type": "object",
                        "required": [
                          "currentLivingSituationId",
                          "enrollmentId",
                          "clientId",
                          "livingSituation",
                          "verifiedBy",
                          "locationdetails",
                          "subsequentresidence",
                          "resourcestoobtain",
                          "movedtwoormore",
                          "currentLivingSituation"
                        ],
                        "properties": {
                          "currentLivingSituationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "livingSituation": {
                            "type": "integer"
                          },
                          "verifiedBy": {
                            "type": "integer"
                          },
                          "locationdetails": {
                            "type": "integer"
                          },
                          "subsequentresidence": {
                            "type": "integer"
                          },
                          "resourcestoobtain": {
                            "type": "integer"
                          },
                          "movedtwoormore": {
                            "type": "integer"
                          },
                          "currentLivingSituation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  currentLivingSituation:
                    currentLivingSituationId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    livingSituation: 1
                    verifiedBy: 1
                    locationdetails: 1
                    subsequentresidence: 2
                    resourcestoobtain: 1
                    movedtwoormore: 1
                    currentLivingSituation: 2
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add an currentLivingSituation
      operationId: POST_dep_clients-clientId-enrollments-enrollmentId-currentLivingSituation
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "currentLivingSituation"
                  ],
                  "properties": {
                    "currentLivingSituation": {
                      "type": "object",
                      "required": [
                        "currentLivingSituationId",
                        "enrollmentId",
                        "clientId",
                        "livingSituation",
                        "verifiedBy",
                        "locationdetails",
                        "subsequentresidence",
                        "resourcestoobtain",
                        "movedtwoormore",
                        "currentLivingSituation"
                      ],
                      "properties": {
                        "currentLivingSituationId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "livingSituation": {
                          "type": "integer"
                        },
                        "verifiedBy": {
                          "type": "integer"
                        },
                        "locationdetails": {
                          "type": "integer"
                        },
                        "subsequentresidence": {
                          "type": "integer"
                        },
                        "resourcestoobtain": {
                          "type": "integer"
                        },
                        "movedtwoormore": {
                          "type": "integer"
                        },
                        "currentLivingSituation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  currentLivingSituation:
                    currentLivingSituationId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    livingSituation: 1
                    verifiedBy: 1
                    locationdetails: 1
                    subsequentresidence: 2
                    resourcestoobtain: 1
                    movedtwoormore: 1
                    currentLivingSituation: 2
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/currentLivingSituations/{currentlivingsituationid}':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "currentLivingSituation"
                    ],
                    "properties": {
                      "currentLivingSituation": {
                        "type": "object",
                        "required": [
                          "currentLivingSituationId",
                          "enrollmentId",
                          "clientId",
                          "livingSituation",
                          "verifiedBy",
                          "locationdetails",
                          "subsequentresidence",
                          "resourcestoobtain",
                          "movedtwoormore",
                          "currentLivingSituation"
                        ],
                        "properties": {
                          "currentLivingSituationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enrollmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "livingSituation": {
                            "type": "integer"
                          },
                          "verifiedBy": {
                            "type": "integer"
                          },
                          "locationdetails": {
                            "type": "integer"
                          },
                          "subsequentresidence": {
                            "type": "integer"
                          },
                          "resourcestoobtain": {
                            "type": "integer"
                          },
                          "movedtwoormore": {
                            "type": "integer"
                          },
                          "currentLivingSituation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    currentLivingSituation:
                      currentLivingSituationId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                      enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                      livingSituation: 1
                      verifiedBy: 1
                      locationdetails: 1
                      subsequentresidence: 2
                      resourcestoobtain: 1
                      movedtwoormore: 1
                      currentLivingSituation: 2
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets an currentLivingSituation using a URI resource parameter/ID.
      operationId: >-
        GET_dep_clients-clientId-enrollments-enrollmentId-currentLivingSituations-currentLivingSituationId
    put:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific currentLivingSituation specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_dep_clients-clientId-enrollments-enrollmentId-currentLivingSituations-currentLivingSituationId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "currentLivingSituation"
                  ],
                  "properties": {
                    "currentLivingSituation": {
                      "type": "object",
                      "required": [
                        "currentLivingSituationId",
                        "enrollmentId",
                        "clientId",
                        "livingSituation",
                        "verifiedBy",
                        "locationdetails",
                        "subsequentresidence",
                        "resourcestoobtain",
                        "movedtwoormore",
                        "currentLivingSituation"
                      ],
                      "properties": {
                        "currentLivingSituationId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "enrollmentId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "livingSituation": {
                          "type": "integer"
                        },
                        "verifiedBy": {
                          "type": "integer"
                        },
                        "locationdetails": {
                          "type": "integer"
                        },
                        "subsequentresidence": {
                          "type": "integer"
                        },
                        "resourcestoobtain": {
                          "type": "integer"
                        },
                        "movedtwoormore": {
                          "type": "integer"
                        },
                        "currentLivingSituation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  currentLivingSituation:
                    currentLivingSituationId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                    enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    clientId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                    livingSituation: 1
                    verifiedBy: 1
                    locationdetails: 1
                    subsequentresidence: 2
                    resourcestoobtain: 1
                    movedtwoormore: 1
                    currentLivingSituation: 2
        required: true
    delete:
      deprecated: true
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific currentLivingSituation specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_dep_clients-clientId-enrollments-enrollmentId-currentLivingSituations-currentLivingSituationId
    parameters:
      - name: currentlivingsituationid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: currentLivingSituation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/currentLivingSituations/{currentlivingsituationid}/history':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "currentLivingSituation"
                    ],
                    "properties": {
                      "currentLivingSituation": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "currentLivingSituations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "currentLivingSituations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "currentLivingSituationId",
                                "enrollmentId",
                                "livingSituation",
                                "verifiedBy",
                                "locationdetails",
                                "subsequentresidence",
                                "resourcestoobtain",
                                "movedtwoormore",
                                "currentLivingSituation"
                              ],
                              "properties": {
                                "currentLivingSituationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "livingSituation": {
                                  "type": "integer"
                                },
                                "verifiedBy": {
                                  "type": "integer"
                                },
                                "locationdetails": {
                                  "type": "integer"
                                },
                                "subsequentresidence": {
                                  "type": "integer"
                                },
                                "resourcestoobtain": {
                                  "type": "integer"
                                },
                                "movedtwoormore": {
                                  "type": "integer"
                                },
                                "currentLivingSituation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    currentLivingSituation:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      currentLivingSituations:
                        - currentLivingSituationId: b4dcd92a-4d6c-44bb-bb07-4431ab48e806
                          enrollmentId: 9djdd92a-4d6c-44bb-bb07-4431ab12f8k9
                          livingSituation: 1
                          verifiedBy: 1
                          locationdetails: 1
                          subsequentresidence: 2
                          resourcestoobtain: 1
                          movedtwoormore: 1
                          currentLivingSituation: 2
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for currentLivingSituation history.  Returns a list of currentLivingSituation ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-currentLivingSituations-currentLivingSituationId-history
    parameters:
      - name: currentlivingsituationid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: currentLivingSituation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
#=====Current Living Situation  API Docuementation End ============================

  '/clients/{clientid}/enrollments/{enrollmentid}/employments':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "employments"
                    ],
                    "properties": {
                      "employments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "employments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "employments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "employmentId",
                                "employed",
                                "employmentType",
                                "notEmployedReason",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "employmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "employed": {
                                  "type": "integer"
                                },
                                "employmentType": {
                                  "type": "integer"
                                },
                                "notEmployedReason": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    employments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      employments:
                        - employmentId: 61fa7069-3d46-4b4f-86f5-44fc4e1d6131
                          employed: 0
                          employmentType: 2
                          notEmployedReason: 3
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for employment.  Returns a list of employment ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-employments
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "employment"
                    ],
                    "properties": {
                      "employment": {
                        "type": "object",
                        "required": [
                          "employmentId",
                          "employed",
                          "employmentType",
                          "notEmployedReason",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "employmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "employed": {
                            "type": "integer"
                          },
                          "employmentType": {
                            "type": "integer"
                          },
                          "notEmployedReason": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  employment:
                    employmentId: 61fa7069-3d46-4b4f-86f5-44fc4e1d6131
                    employed: 0
                    employmentType: 2
                    notEmployedReason: 3
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a employment
      operationId: POST_clients-clientId-enrollments-enrollmentId-employments
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "employment"
                  ],
                  "properties": {
                    "employment": {
                      "type": "object",
                      "required": [
                        "employed",
                        "employmentType",
                        "notEmployedReason",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "employed": {
                          "type": "integer"
                        },
                        "employmentType": {
                          "type": "integer"
                        },
                        "notEmployedReason": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  employment:
                    employed: 0
                    employmentType: 2
                    notEmployedReason: 3
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/employments/{employmentid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "employment"
                    ],
                    "properties": {
                      "employment": {
                        "type": "object",
                        "required": [
                          "employmentId",
                          "employed",
                          "employmentType",
                          "notEmployedReason",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "employmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "employed": {
                            "type": "integer"
                          },
                          "employmentType": {
                            "type": "integer"
                          },
                          "notEmployedReason": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    employment:
                      employmentId: 61fa7069-3d46-4b4f-86f5-44fc4e1d6131
                      employed: 0
                      employmentType: 2
                      notEmployedReason: 3
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a employment using a URI resource parameter/ID.
      operationId: GET_clients-clientId-enrollments-enrollmentId-employments-employmentid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific employment specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientId-enrollments-enrollmentId-employments-employmentid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "employment"
                  ],
                  "properties": {
                    "employment": {
                      "type": "object",
                      "required": [
                        "employed",
                        "employmentType",
                        "notEmployedReason",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "employed": {
                          "type": "integer"
                        },
                        "employmentType": {
                          "type": "integer"
                        },
                        "notEmployedReason": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  employment:
                    employed: 0
                    employmentType: 2
                    notEmployedReason: 3
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific employment specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-employments-employmentid
    parameters:
      - name: employmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Employment Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/employments/{employmentid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "employments"
                    ],
                    "properties": {
                      "employments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "employments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "employments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "employmentId",
                                "employed",
                                "employmentType",
                                "notEmployedReason",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "employmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "employed": {
                                  "type": "integer"
                                },
                                "employmentType": {
                                  "type": "integer"
                                },
                                "notEmployedReason": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    employments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      employments:
                        - employmentId: 61fa7069-3d46-4b4f-86f5-44fc4e1d6131
                          employed: 0
                          employmentType: 2
                          notEmployedReason: 3
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for employment history.  Returns a list of employment ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-employments-employmentid-history
    parameters:
      - name: employmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Employment Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exits"
                    ],
                    "properties": {
                      "exits": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exits"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exits": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitId",
                                "exitDate",
                                "otherDestination",
                                "destination",
                                "dateCreated"
                              ],
                              "properties": {
                                "exitId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "exitDate": {
                                  "type": "integer"
                                },
                                "otherDestination": {
                                  "type": "string",
                                },
                                "destination": {
                                  "type": "integer"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exits:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exits:
                        - exitId: 89c350f4-9165-4898-bb8b-f8b096a1aa2d
                          exitDate: 1459518853883
                          otherDestination: TWENTY_FOUR
                          destination: 6
                          dateCreated: 05-11-2020
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exit.  Returns a list of exit ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-exits

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exit"
                    ],
                    "properties": {
                      "exit": {
                        "type": "object",
                        "required": [
                          "exitId",
                          "exitDate",
                          "otherDestination",
                          "destination",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "exitId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "exitDate": {
                            "type": "integer"
                          },
                          "otherDestination": {
                            "type": "string",
                          },
                          "destination": {
                            "type": "integer"
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  exit:
                    exitId: 89c350f4-9165-4898-bb8b-f8b096a1aa2d
                    exitDate: 1459518853883
                    otherDestination: TWENTY_FOUR
                    destination: 6
                    dateCreated: 05-11-2020
                    dateUpdated: 05-11-2020
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exit
      operationId: POST_clients-clientId-enrollments-enrollmentId-exits
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exit"
                  ],
                  "properties": {
                    "exit": {
                      "type": "object",
                      "required": [
                        "exitDate",
                        "otherDestination",
                        "destination"
                      ],
                      "properties": {
                        "exitDate": {
                          "type": "integer"
                        },
                        "otherDestination": {
                          "type": "string",
                        },
                        "destination": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exit:
                    exitDate: 1459518853883
                    otherDestination: TWENTY_FOUR
                    destination: 6
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exit"
                    ],
                    "properties": {
                      "exit": {
                        "type": "object",
                        "required": [
                          "exitId",
                          "exitDate",
                          "otherDestination",
                          "destination",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "exitId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "exitDate": {
                            "type": "integer"
                          },
                          "otherDestination": {
                            "type": "string",
                          },
                          "destination": {
                            "type": "integer"
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    exit:
                      exitId: 89c350f4-9165-4898-bb8b-f8b096a1aa2d
                      exitDate: 1459518853883
                      otherDestination: TWENTY_FOUR
                      destination: 6
                      dateCreated: 05-11-2020
                      dateUpdated: 05-11-2020
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exit using a URI resource parameter/ID.
      operationId: GET_clients-clientId-enrollments-enrollmentId-exits-exitId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific exit specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientId-enrollments-enrollmentId-exits-exitId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exit"
                  ],
                  "properties": {
                    "exit": {
                      "type": "object",
                      "required": [
                        "exitDate",
                        "otherDestination",
                        "destination"
                      ],
                      "properties": {
                        "exitDate": {
                          "type": "integer"
                        },
                        "otherDestination": {
                          "type": "string",
                        },
                        "destination": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exit:
                    exitDate: 1459518853883
                    otherDestination: TWENTY_FOUR
                    destination: 6
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific exit specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientId-enrollments-enrollmentId-exits-exitId
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exits"
                    ],
                    "properties": {
                      "exits": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exits"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exits": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitId",
                                "exitDate",
                                "otherDestination",
                                "destination",
                                "dateCreated"
                              ],
                              "properties": {
                                "exitId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "exitDate": {
                                  "type": "integer"
                                },
                                "otherDestination": {
                                  "type": "string",
                                },
                                "destination": {
                                  "type": "integer"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exits:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exits:
                        - exitId: 89c350f4-9165-4898-bb8b-f8b096a1aa2d
                          exitDate: 1459518853883
                          otherDestination: TWENTY_FOUR
                          destination: 6
                          dateCreated: 05-11-2020
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exit history.  Returns a list of exit ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-exits-exitId-history
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exithousingassessments':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitHousingAssessments"
                    ],
                    "properties": {
                      "exitHousingAssessments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitHousingAssessments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitHousingAssessments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitHousingAssessmentId",
                                "housingAssessment",
                                "subsidyInformation"
                              ],
                              "properties": {
                                "exitHousingAssessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingAssessment": {
                                  "type": "integer"
                                },
                                "subsidyInformation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitHousingAssessments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitHousingAssessments:
                        - exitHousingAssessmentId: a45e96ba-0287-4c9f-a1c2-5058a4acc1aa
                          housingAssessment: 5
                          subsidyInformation: 4
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitHousingAssessment.  Returns a list of
        exitHousingAssessment ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-exits-exitId-exitHousingAssessments

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitHousingAssessment"
                    ],
                    "properties": {
                      "exitHousingAssessment": {
                        "type": "object",
                        "required": [
                          "exitHousingAssessmentId",
                          "housingAssessment",
                          "subsidyInformation"
                        ],
                        "properties": {
                          "exitHousingAssessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "housingAssessment": {
                            "type": "integer"
                          },
                          "subsidyInformation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  exitHousingAssessment:
                    exitHousingAssessmentId: a45e96ba-0287-4c9f-a1c2-5058a4acc1aa
                    housingAssessment: 5
                    subsidyInformation: 4
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exitHousingAssessment
      operationId: >-
        POST_clients-clientId-enrollments-enrollmentId-exits-exitId-exitHousingAssessments
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitHousingAssessment"
                  ],
                  "properties": {
                    "exitHousingAssessment": {
                      "type": "object",
                      "required": [
                        "housingAssessment",
                        "subsidyInformation"
                      ],
                      "properties": {
                        "housingAssessment": {
                          "type": "integer"
                        },
                        "subsidyInformation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitHousingAssessment:
                    housingAssessment: 5
                    subsidyInformation: 4
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exithousingassessments/{exithousingassessmentid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitHousingAssessment"
                    ],
                    "properties": {
                      "exitHousingAssessment": {
                        "type": "object",
                        "required": [
                          "exitHousingAssessmentId",
                          "housingAssessment",
                          "subsidyInformation"
                        ],
                        "properties": {
                          "exitHousingAssessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "housingAssessment": {
                            "type": "integer"
                          },
                          "subsidyInformation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    exitHousingAssessment:
                      exitHousingAssessmentId: a45e96ba-0287-4c9f-a1c2-5058a4acc1aa
                      housingAssessment: 5
                      subsidyInformation: 4
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exitHousingAssessment using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-exits-exitId-exitHousingAssessments-exitHousingAssessmentId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific exitHousingAssessment specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-exits-exitId-exitHousingAssessments-exitHousingAssessmentId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitHousingAssessment"
                  ],
                  "properties": {
                    "exitHousingAssessment": {
                      "type": "object",
                      "required": [
                        "housingAssessment",
                        "subsidyInformation"
                      ],
                      "properties": {
                        "housingAssessment": {
                          "type": "integer"
                        },
                        "subsidyInformation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitHousingAssessment:
                    housingAssessment: 5
                    subsidyInformation: 4
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific exitHousingAssessment specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-exits-exitId-exitHousingAssessments-exitHousingAssessmentId
    parameters:
      - name: exithousingassessmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: exitHousingAssessment Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exithousingassessments/{exithousingassessmentid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitHousingAssessments"
                    ],
                    "properties": {
                      "exitHousingAssessments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitHousingAssessments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitHousingAssessments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitHousingAssessmentId",
                                "housingAssessment",
                                "subsidyInformation"
                              ],
                              "properties": {
                                "exitHousingAssessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingAssessment": {
                                  "type": "integer"
                                },
                                "subsidyInformation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitHousingAssessments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitHousingAssessments:
                        - exitHousingAssessmentId: a45e96ba-0287-4c9f-a1c2-5058a4acc1aa
                          housingAssessment: 5
                          subsidyInformation: 4
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitHousingAssessment history.  Returns a list of
        exitHousingAssessment ids  history, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-exits-exitId-exitHousingAssessments-exitHousingAssessmentId-history
    parameters:
      - name: exithousingassessmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: exitHousingAssessment Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitHousingAssessments':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitHousingAssessments"
                    ],
                    "properties": {
                      "exitHousingAssessments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitHousingAssessments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitHousingAssessments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitHousingAssessmentId",
                                "housingAssessment",
                                "subsidyInformation"
                              ],
                              "properties": {
                                "exitHousingAssessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingAssessment": {
                                  "type": "integer"
                                },
                                "subsidyInformation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitHousingAssessments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitHousingAssessments:
                        - exitHousingAssessmentId: a45e96ba-0287-4c9f-a1c2-5058a4acc1aa
                          housingAssessment: 5
                          subsidyInformation: 4
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitHousingAssessment.  Returns a list of
        exitHousingAssessment ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_dep_clients-clientId-enrollments-enrollmentId-exits-exitId-exitHousingAssessments

    post:
      deprecated: true
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitHousingAssessment"
                    ],
                    "properties": {
                      "exitHousingAssessment": {
                        "type": "object",
                        "required": [
                          "exitHousingAssessmentId",
                          "housingAssessment",
                          "subsidyInformation"
                        ],
                        "properties": {
                          "exitHousingAssessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "housingAssessment": {
                            "type": "integer"
                          },
                          "subsidyInformation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  exitHousingAssessment:
                    exitHousingAssessmentId: a45e96ba-0287-4c9f-a1c2-5058a4acc1aa
                    housingAssessment: 5
                    subsidyInformation: 4
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exitHousingAssessment
      operationId: >-
        POST_dep_clients-clientId-enrollments-enrollmentId-exits-exitId-exitHousingAssessments
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitHousingAssessment"
                  ],
                  "properties": {
                    "exitHousingAssessment": {
                      "type": "object",
                      "required": [
                        "housingAssessment",
                        "subsidyInformation"
                      ],
                      "properties": {
                        "housingAssessment": {
                          "type": "integer"
                        },
                        "subsidyInformation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitHousingAssessment:
                    housingAssessment: 5
                    subsidyInformation: 4
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitHousingAssessments/{exithousingassessmentid}':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitHousingAssessment"
                    ],
                    "properties": {
                      "exitHousingAssessment": {
                        "type": "object",
                        "required": [
                          "exitHousingAssessmentId",
                          "housingAssessment",
                          "subsidyInformation"
                        ],
                        "properties": {
                          "exitHousingAssessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "housingAssessment": {
                            "type": "integer"
                          },
                          "subsidyInformation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    exitHousingAssessment:
                      exitHousingAssessmentId: a45e96ba-0287-4c9f-a1c2-5058a4acc1aa
                      housingAssessment: 5
                      subsidyInformation: 4
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exitHousingAssessment using a URI resource parameter/ID.
      operationId: >-
        GET_dep_clients-clientId-enrollments-enrollmentId-exits-exitId-exitHousingAssessments-exitHousingAssessmentId
    put:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific exitHousingAssessment specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_dep_clients-clientId-enrollments-enrollmentId-exits-exitId-exitHousingAssessments-exitHousingAssessmentId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitHousingAssessment"
                  ],
                  "properties": {
                    "exitHousingAssessment": {
                      "type": "object",
                      "required": [
                        "housingAssessment",
                        "subsidyInformation"
                      ],
                      "properties": {
                        "housingAssessment": {
                          "type": "integer"
                        },
                        "subsidyInformation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitHousingAssessment:
                    housingAssessment: 5
                    subsidyInformation: 4
        required: true
    delete:
      deprecated: true
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific exitHousingAssessment specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_dep_clients-clientId-enrollments-enrollmentId-exits-exitId-exitHousingAssessments-exitHousingAssessmentId
    parameters:
      - name: exithousingassessmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: exitHousingAssessment Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitHousingAssessments/{exithousingassessmentid}/history':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitHousingAssessments"
                    ],
                    "properties": {
                      "exitHousingAssessments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitHousingAssessments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitHousingAssessments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitHousingAssessmentId",
                                "housingAssessment",
                                "subsidyInformation"
                              ],
                              "properties": {
                                "exitHousingAssessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingAssessment": {
                                  "type": "integer"
                                },
                                "subsidyInformation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitHousingAssessments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitHousingAssessments:
                        - exitHousingAssessmentId: a45e96ba-0287-4c9f-a1c2-5058a4acc1aa
                          housingAssessment: 5
                          subsidyInformation: 4
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitHousingAssessment history.  Returns a list of
        exitHousingAssessment ids  history, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_dep_clients-clientId-enrollments-enrollmentId-exits-exitId-exitHousingAssessments-exitHousingAssessmentId-history
    parameters:
      - name: exithousingassessmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: exitHousingAssessment Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitpaths':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitPaths"
                    ],
                    "properties": {
                      "exitPaths": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitPaths"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitPaths": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitPathId",
                                "connectionWithSoar"
                              ],
                              "properties": {
                                "exitPathId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "connectionWithSoar": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitPaths:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitPaths:
                        - exitPathId: 46b4e67b-08f4-4962-9a1e-3ff614aaea23
                          connectionWithSoar: 9
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitPath.  Returns a list of exitPath ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-exits-exitId-exitPaths

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitPath"
                    ],
                    "properties": {
                      "exitPath": {
                        "type": "object",
                        "required": [
                          "exitPathId"
                        ],
                        "properties": {
                          "exitPathId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  exitPath:
                    exitPathId: 46b4e67b-08f4-4962-9a1e-3ff614aaea23
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exitPath
      operationId: POST_clients-clientId-enrollments-enrollmentId-exits-exitId-exitPaths
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitPath"
                  ],
                  "properties": {
                    "exitPath": {
                      "type": "object",
                      "required": [
                        "connectionWithSoar"
                      ],
                      "properties": {
                        "connectionWithSoar": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitPath:
                    connectionWithSoar: 9
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitpaths/{exitPathid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitPath"
                    ],
                    "properties": {
                      "exitPath": {
                        "type": "object",
                        "required": [
                          "exitPathId"
                        ],
                        "properties": {
                          "exitPathId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                    exitPath:
                      exitPathId: 46b4e67b-08f4-4962-9a1e-3ff614aaea23
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exitPath using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-exits-exitId-exitPaths-exitPathid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific exitPath specified by the URI resource parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-exits-exitId-exitPaths-exitPathid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitPath"
                  ],
                  "properties": {
                    "exitPath": {
                      "type": "object",
                      "required": [
                        "connectionWithSoar"
                      ],
                      "properties": {
                        "connectionWithSoar": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitPath:
                    connectionWithSoar: 9
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific exitPath specified by the URI resource parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-exits-exitId-exitPaths-exitPathid
    parameters:
      - name: exitPathid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: exitPath Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitpaths/{exitPathid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitPaths"
                    ],
                    "properties": {
                      "exitPaths": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitPaths"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitPaths": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitPathId",
                                "connectionWithSoar"
                              ],
                              "properties": {
                                "exitPathId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "connectionWithSoar": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitPaths:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitPaths:
                        - exitPathId: 46b4e67b-08f4-4962-9a1e-3ff614aaea23
                          connectionWithSoar: 9
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitPath history.  Returns a list of exitPath ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-exits-exitId-exitPaths-exitPathid-history
    parameters:
      - name: exitPathid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: exitPath Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitPaths':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitPaths"
                    ],
                    "properties": {
                      "exitPaths": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitPaths"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitPaths": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitPathId",
                                "connectionWithSoar"
                              ],
                              "properties": {
                                "exitPathId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "connectionWithSoar": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitPaths:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitPaths:
                        - exitPathId: 46b4e67b-08f4-4962-9a1e-3ff614aaea23
                          connectionWithSoar: 9
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitPath.  Returns a list of exitPath ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-exits-exitId-exitPaths

    post:
      deprecated: true
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitPath"
                    ],
                    "properties": {
                      "exitPath": {
                        "type": "object",
                        "required": [
                          "exitPathId"
                        ],
                        "properties": {
                          "exitPathId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  exitPath:
                    exitPathId: 46b4e67b-08f4-4962-9a1e-3ff614aaea23
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exitPath
      operationId: POST_dep_clients-clientId-enrollments-enrollmentId-exits-exitId-exitPaths
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitPath"
                  ],
                  "properties": {
                    "exitPath": {
                      "type": "object",
                      "required": [
                        "connectionWithSoar"
                      ],
                      "properties": {
                        "connectionWithSoar": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitPath:
                    connectionWithSoar: 9
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitPaths/{exitPathid}':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitPath"
                    ],
                    "properties": {
                      "exitPath": {
                        "type": "object",
                        "required": [
                          "exitPathId"
                        ],
                        "properties": {
                          "exitPathId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                    exitPath:
                      exitPathId: 46b4e67b-08f4-4962-9a1e-3ff614aaea23
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exitPath using a URI resource parameter/ID.
      operationId: >-
        GET_dep_clients-clientId-enrollments-enrollmentId-exits-exitId-exitPaths-exitPathid
    put:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific exitPath specified by the URI resource parameter/ID.
      operationId: >-
        PUT_dep_clients-clientId-enrollments-enrollmentId-exits-exitId-exitPaths-exitPathid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitPath"
                  ],
                  "properties": {
                    "exitPath": {
                      "type": "object",
                      "required": [
                        "connectionWithSoar"
                      ],
                      "properties": {
                        "connectionWithSoar": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitPath:
                    connectionWithSoar: 9
        required: true
    delete:
      deprecated: true
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific exitPath specified by the URI resource parameter/ID.
      operationId: >-
        DELETE_dep_clients-clientId-enrollments-enrollmentId-exits-exitId-exitPaths-exitPathid
    parameters:
      - name: exitPathid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: exitPath Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitPaths/{exitPathid}/history':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitPaths"
                    ],
                    "properties": {
                      "exitPaths": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitPaths"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitPaths": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitPathId",
                                "connectionWithSoar"
                              ],
                              "properties": {
                                "exitPathId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "connectionWithSoar": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitPaths:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitPaths:
                        - exitPathId: 46b4e67b-08f4-4962-9a1e-3ff614aaea23
                          connectionWithSoar: 9
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitPath history.  Returns a list of exitPath ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-exits-exitId-exitPaths-exitPathid-history
    parameters:
      - name: exitPathid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: exitPath Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitrhys':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitrhys"
                    ],
                    "properties": {
                      "exitrhys": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitrhys"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitrhys": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitrhyId",
                                "projectCompletionStatus",
                                "earlyExitReason",
                                "familyReunificationAchieved",
                                "writtenAfterCarePlan",
                                "assistanceMainStreamBenefits",
                                "permenantHousingPlacement",
                                "tempShelterPlacement",
                                "exitCounseling",
                                "furtherFollowupServices",
                                "scheduledFollowupContacts",
                                "resourcePackage",
                                "otherAftercarePlanOrAction"
                              ],
                              "properties": {
                                "exitrhyId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "projectCompletionStatus": {
                                  "type": "integer"
                                },
                                "earlyExitReason": {
                                  "type": "integer"
                                },
                                "familyReunificationAchieved": {
                                  "type": "integer"
                                },
                                "writtenAfterCarePlan": {
                                  "type": "integer"
                                },
                                "assistanceMainStreamBenefits": {
                                  "type": "integer"
                                },
                                "permenantHousingPlacement": {
                                  "type": "integer"
                                },
                                "tempShelterPlacement": {
                                  "type": "integer"
                                },
                                "exitCounseling": {
                                  "type": "integer"
                                },
                                "furtherFollowupServices": {
                                  "type": "integer"
                                },
                                "scheduledFollowupContacts": {
                                  "type": "integer"
                                },
                                "resourcePackage": {
                                  "type": "integer"
                                },
                                "otherAftercarePlanOrAction": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitrhys:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitrhys:
                        - exitrhyId: 878d7b3f-91d8-4a5d-9eba-81b081f0a9f8
                          projectCompletionStatus: 3
                          earlyExitReason: 1
                          familyReunificationAchieved: 0
                          writtenAfterCarePlan: 2
                          assistanceMainStreamBenefits: 0
                          permenantHousingPlacement: 1
                          tempShelterPlacement: 2
                          exitCounseling: 0
                          furtherFollowupServices: 1
                          scheduledFollowupContacts: 1
                          resourcePackage: 1
                          otherAftercarePlanOrAction: 2
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitrhy.  Returns a list of exitrhy ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-exits-exitId-exitrhys

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitrhy"
                    ],
                    "properties": {
                      "exitrhy": {
                        "type": "object",
                        "required": [
                          "exitrhyId",
                          "sexualOrientation",
                          "formerlyWardChildWelfrForestCare",
                          "yearsChildWelfrForestCare",
                          "monthsChildWelfrForestCare",
                          "formerlyWardOfJuvenileJustice",
                          "yearsJuvenileJustice",
                          "houseHoldDynamics",
                          "sexualOrientationGenderIdentityYouth",
                          "sexualOrientationGenderIdentityFamilyMbr",
                          "housingIssuesYouth",
                          "housingIssuesFamilyMbr",
                          "schoolEducationIssuesYouth",
                          "schoolEducationIssuesFamilyMbr",
                          "unemployementYouth",
                          "unemployementFamilyMbr",
                          "mentalHealthIssuesYouth",
                          "mentalHealthIssuesFamilyMbr",
                          "healthIssuesYouth",
                          "healthIssuesFamilyMbr",
                          "physicalDisabilityYouth",
                          "physicalDisabilityFamilyMbr",
                          "mentalDisabilityYouth",
                          "mentalDisabilityFamilyMbr",
                          "abuseAndNeglectYouth",
                          "abuseAndNeglectFamilyMbr",
                          "alcoholDrugAbuseYouth",
                          "alcoholDrugAbuseFamilyMbr",
                          "insufficientIncomeToSupportYouth",
                          "activeMilitaryParent",
                          "incarceratedParent",
                          "incarceratedParentStatus",
                          "referralSource",
                          "countOutReachReferralApproaches",
                          "exchangeForSex",
                          "exchangeForSexPastThreeMonths",
                          "countOfExchangeForSex",
                          "askedOfForcedToExchangeForSex",
                          "askedOfForcedToExchangeForSexPastThreeMonths",
                          "workPlaceViolenceThreat",
                          "workPlacePromiseDifference",
                          "coercedToContinueWork",
                          "laborExploitPastThreeMonths"
                        ],
                        "properties": {
                          "exitrhyId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "sexualOrientation": {
                            "type": "integer"
                          },
                          "formerlyWardChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "yearsChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "monthsChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "formerlyWardOfJuvenileJustice": {
                            "type": "integer"
                          },
                          "yearsJuvenileJustice": {
                            "type": "integer"
                          },
                          "houseHoldDynamics": {
                            "type": "integer"
                          },
                          "sexualOrientationGenderIdentityYouth": {
                            "type": "integer"
                          },
                          "sexualOrientationGenderIdentityFamilyMbr": {
                            "type": "integer"
                          },
                          "housingIssuesYouth": {
                            "type": "integer"
                          },
                          "housingIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "schoolEducationIssuesYouth": {
                            "type": "integer"
                          },
                          "schoolEducationIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "unemployementYouth": {
                            "type": "integer"
                          },
                          "unemployementFamilyMbr": {
                            "type": "integer"
                          },
                          "mentalHealthIssuesYouth": {
                            "type": "integer"
                          },
                          "mentalHealthIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "healthIssuesYouth": {
                            "type": "integer"
                          },
                          "healthIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "physicalDisabilityYouth": {
                            "type": "integer"
                          },
                          "physicalDisabilityFamilyMbr": {
                            "type": "integer"
                          },
                          "mentalDisabilityYouth": {
                            "type": "integer"
                          },
                          "mentalDisabilityFamilyMbr": {
                            "type": "integer"
                          },
                          "abuseAndNeglectYouth": {
                            "type": "integer"
                          },
                          "abuseAndNeglectFamilyMbr": {
                            "type": "integer"
                          },
                          "alcoholDrugAbuseYouth": {
                            "type": "integer"
                          },
                          "alcoholDrugAbuseFamilyMbr": {
                            "type": "integer"
                          },
                          "insufficientIncomeToSupportYouth": {
                            "type": "integer"
                          },
                          "activeMilitaryParent": {
                            "type": "integer"
                          },
                          "incarceratedParent": {
                            "type": "integer"
                          },
                          "incarceratedParentStatus": {
                            "type": "integer"
                          },
                          "referralSource": {
                            "type": "integer"
                          },
                          "countOutReachReferralApproaches": {
                            "type": "integer"
                          },
                          "exchangeForSex": {
                            "type": "integer"
                          },
                          "exchangeForSexPastThreeMonths": {
                            "type": "integer"
                          },
                          "countOfExchangeForSex": {
                            "type": "integer"
                          },
                          "askedOfForcedToExchangeForSex": {
                            "type": "integer"
                          },
                          "askedOfForcedToExchangeForSexPastThreeMonths": {
                            "type": "integer"
                          },
                          "workPlaceViolenceThreat": {
                            "type": "integer"
                          },
                          "workPlacePromiseDifference": {
                            "type": "integer"
                          },
                          "coercedToContinueWork": {
                            "type": "integer"
                          },
                          "laborExploitPastThreeMonths": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  exitrhy:
                    exitrhyId: 878d7b3f-91d8-4a5d-9eba-81b081f0a9f8
                    sexualOrientation: 0
                    formerlyWardChildWelfrForestCare: 0
                    yearsChildWelfrForestCare: 0
                    monthsChildWelfrForestCare: 0
                    formerlyWardOfJuvenileJustice: 0
                    yearsJuvenileJustice: 0
                    houseHoldDynamics: 0
                    sexualOrientationGenderIdentityYouth: 0
                    sexualOrientationGenderIdentityFamilyMbr: 0
                    housingIssuesYouth: 0
                    housingIssuesFamilyMbr: 0
                    schoolEducationIssuesYouth: 0
                    schoolEducationIssuesFamilyMbr: 0
                    unemployementYouth: 0
                    unemployementFamilyMbr: 0
                    mentalHealthIssuesYouth: 0
                    mentalHealthIssuesFamilyMbr: 0
                    healthIssuesYouth: 0
                    healthIssuesFamilyMbr: 0
                    physicalDisabilityYouth: 0
                    physicalDisabilityFamilyMbr: 0
                    mentalDisabilityYouth: 0
                    mentalDisabilityFamilyMbr: 0
                    abuseAndNeglectYouth: 0
                    abuseAndNeglectFamilyMbr: 0
                    alcoholDrugAbuseYouth: 0
                    alcoholDrugAbuseFamilyMbr: 0
                    insufficientIncomeToSupportYouth: 0
                    activeMilitaryParent: 0
                    incarceratedParent: 0
                    incarceratedParentStatus: 0
                    referralSource: 0
                    countOutReachReferralApproaches: 0
                    exchangeForSex: 0
                    exchangeForSexPastThreeMonths: 0
                    countOfExchangeForSex: 0
                    askedOfForcedToExchangeForSex: 0
                    askedOfForcedToExchangeForSexPastThreeMonths: 0
                    workPlaceViolenceThreat: 0
                    workPlacePromiseDifference: 0
                    coercedToContinueWork: 0
                    laborExploitPastThreeMonths: 0
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exitrhy
      operationId: POST_clients-clientId-enrollments-enrollmentId-exits-exitId-exitrhys
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitrhy"
                  ],
                  "properties": {
                    "exitrhy": {
                      "type": "object",
                      "required": [
                        "sexualOrientation",
                        "formerlyWardChildWelfrForestCare",
                        "yearsChildWelfrForestCare",
                        "monthsChildWelfrForestCare",
                        "formerlyWardOfJuvenileJustice",
                        "yearsJuvenileJustice",
                        "houseHoldDynamics",
                        "sexualOrientationGenderIdentityYouth",
                        "sexualOrientationGenderIdentityFamilyMbr",
                        "housingIssuesYouth",
                        "housingIssuesFamilyMbr",
                        "schoolEducationIssuesYouth",
                        "schoolEducationIssuesFamilyMbr",
                        "unemployementYouth",
                        "unemployementFamilyMbr",
                        "mentalHealthIssuesYouth",
                        "mentalHealthIssuesFamilyMbr",
                        "healthIssuesYouth",
                        "healthIssuesFamilyMbr",
                        "physicalDisabilityYouth",
                        "physicalDisabilityFamilyMbr",
                        "mentalDisabilityYouth",
                        "mentalDisabilityFamilyMbr",
                        "abuseAndNeglectYouth",
                        "abuseAndNeglectFamilyMbr",
                        "alcoholDrugAbuseYouth",
                        "alcoholDrugAbuseFamilyMbr",
                        "insufficientIncomeToSupportYouth",
                        "activeMilitaryParent",
                        "incarceratedParent",
                        "incarceratedParentStatus",
                        "referralSource",
                        "countOutReachReferralApproaches",
                        "exchangeForSex",
                        "exchangeForSexPastThreeMonths",
                        "countOfExchangeForSex",
                        "askedOfForcedToExchangeForSex",
                        "askedOfForcedToExchangeForSexPastThreeMonths",
                        "workPlaceViolenceThreat",
                        "workPlacePromiseDifference",
                        "coercedToContinueWork",
                        "laborExploitPastThreeMonths"
                      ],
                      "properties": {
                        "sexualOrientation": {
                          "type": "integer"
                        },
                        "formerlyWardChildWelfrForestCare": {
                          "type": "integer"
                        },
                        "yearsChildWelfrForestCare": {
                          "type": "integer"
                        },
                        "monthsChildWelfrForestCare": {
                          "type": "integer"
                        },
                        "formerlyWardOfJuvenileJustice": {
                          "type": "integer"
                        },
                        "yearsJuvenileJustice": {
                          "type": "integer"
                        },
                        "houseHoldDynamics": {
                          "type": "integer"
                        },
                        "sexualOrientationGenderIdentityYouth": {
                          "type": "integer"
                        },
                        "sexualOrientationGenderIdentityFamilyMbr": {
                          "type": "integer"
                        },
                        "housingIssuesYouth": {
                          "type": "integer"
                        },
                        "housingIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "schoolEducationIssuesYouth": {
                          "type": "integer"
                        },
                        "schoolEducationIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "unemployementYouth": {
                          "type": "integer"
                        },
                        "unemployementFamilyMbr": {
                          "type": "integer"
                        },
                        "mentalHealthIssuesYouth": {
                          "type": "integer"
                        },
                        "mentalHealthIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "healthIssuesYouth": {
                          "type": "integer"
                        },
                        "healthIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "physicalDisabilityYouth": {
                          "type": "integer"
                        },
                        "physicalDisabilityFamilyMbr": {
                          "type": "integer"
                        },
                        "mentalDisabilityYouth": {
                          "type": "integer"
                        },
                        "mentalDisabilityFamilyMbr": {
                          "type": "integer"
                        },
                        "abuseAndNeglectYouth": {
                          "type": "integer"
                        },
                        "abuseAndNeglectFamilyMbr": {
                          "type": "integer"
                        },
                        "alcoholDrugAbuseYouth": {
                          "type": "integer"
                        },
                        "alcoholDrugAbuseFamilyMbr": {
                          "type": "integer"
                        },
                        "insufficientIncomeToSupportYouth": {
                          "type": "integer"
                        },
                        "activeMilitaryParent": {
                          "type": "integer"
                        },
                        "incarceratedParent": {
                          "type": "integer"
                        },
                        "incarceratedParentStatus": {
                          "type": "integer"
                        },
                        "referralSource": {
                          "type": "integer"
                        },
                        "countOutReachReferralApproaches": {
                          "type": "integer"
                        },
                        "exchangeForSex": {
                          "type": "integer"
                        },
                        "exchangeForSexPastThreeMonths": {
                          "type": "integer"
                        },
                        "countOfExchangeForSex": {
                          "type": "integer"
                        },
                        "askedOfForcedToExchangeForSex": {
                          "type": "integer"
                        },
                        "askedOfForcedToExchangeForSexPastThreeMonths": {
                          "type": "integer"
                        },
                        "workPlaceViolenceThreat": {
                          "type": "integer"
                        },
                        "workPlacePromiseDifference": {
                          "type": "integer"
                        },
                        "coercedToContinueWork": {
                          "type": "integer"
                        },
                        "laborExploitPastThreeMonths": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitrhy:
                    sexualOrientation: 0
                    formerlyWardChildWelfrForestCare: 0
                    yearsChildWelfrForestCare: 0
                    monthsChildWelfrForestCare: 0
                    formerlyWardOfJuvenileJustice: 0
                    yearsJuvenileJustice: 0
                    houseHoldDynamics: 0
                    sexualOrientationGenderIdentityYouth: 0
                    sexualOrientationGenderIdentityFamilyMbr: 0
                    housingIssuesYouth: 0
                    housingIssuesFamilyMbr: 0
                    schoolEducationIssuesYouth: 0
                    schoolEducationIssuesFamilyMbr: 0
                    unemployementYouth: 0
                    unemployementFamilyMbr: 0
                    mentalHealthIssuesYouth: 0
                    mentalHealthIssuesFamilyMbr: 0
                    healthIssuesYouth: 0
                    healthIssuesFamilyMbr: 0
                    physicalDisabilityYouth: 0
                    physicalDisabilityFamilyMbr: 0
                    mentalDisabilityYouth: 0
                    mentalDisabilityFamilyMbr: 0
                    abuseAndNeglectYouth: 0
                    abuseAndNeglectFamilyMbr: 0
                    alcoholDrugAbuseYouth: 0
                    alcoholDrugAbuseFamilyMbr: 0
                    insufficientIncomeToSupportYouth: 0
                    activeMilitaryParent: 0
                    incarceratedParent: 0
                    incarceratedParentStatus: 0
                    referralSource: 0
                    countOutReachReferralApproaches: 0
                    exchangeForSex: 0
                    exchangeForSexPastThreeMonths: 0
                    countOfExchangeForSex: 0
                    askedOfForcedToExchangeForSex: 0
                    askedOfForcedToExchangeForSexPastThreeMonths: 0
                    workPlaceViolenceThreat: 0
                    workPlacePromiseDifference: 0
                    coercedToContinueWork: 0
                    laborExploitPastThreeMonths: 0
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitrhys/{exitrhyid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitrhy"
                    ],
                    "properties": {
                      "exitrhy": {
                        "type": "object",
                        "required": [
                          "exitrhyId",
                          "sexualOrientation",
                          "formerlyWardChildWelfrForestCare",
                          "yearsChildWelfrForestCare",
                          "monthsChildWelfrForestCare",
                          "formerlyWardOfJuvenileJustice",
                          "yearsJuvenileJustice",
                          "houseHoldDynamics",
                          "sexualOrientationGenderIdentityYouth",
                          "sexualOrientationGenderIdentityFamilyMbr",
                          "housingIssuesYouth",
                          "housingIssuesFamilyMbr",
                          "schoolEducationIssuesYouth",
                          "schoolEducationIssuesFamilyMbr",
                          "unemployementYouth",
                          "unemployementFamilyMbr",
                          "mentalHealthIssuesYouth",
                          "mentalHealthIssuesFamilyMbr",
                          "healthIssuesYouth",
                          "healthIssuesFamilyMbr",
                          "physicalDisabilityYouth",
                          "physicalDisabilityFamilyMbr",
                          "mentalDisabilityYouth",
                          "mentalDisabilityFamilyMbr",
                          "abuseAndNeglectYouth",
                          "abuseAndNeglectFamilyMbr",
                          "alcoholDrugAbuseYouth",
                          "alcoholDrugAbuseFamilyMbr",
                          "insufficientIncomeToSupportYouth",
                          "activeMilitaryParent",
                          "incarceratedParent",
                          "incarceratedParentStatus",
                          "referralSource",
                          "countOutReachReferralApproaches",
                          "exchangeForSex",
                          "exchangeForSexPastThreeMonths",
                          "countOfExchangeForSex",
                          "askedOfForcedToExchangeForSex",
                          "askedOfForcedToExchangeForSexPastThreeMonths",
                          "workPlaceViolenceThreat",
                          "workPlacePromiseDifference",
                          "coercedToContinueWork",
                          "laborExploitPastThreeMonths"
                        ],
                        "properties": {
                          "exitrhyId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "sexualOrientation": {
                            "type": "integer"
                          },
                          "formerlyWardChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "yearsChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "monthsChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "formerlyWardOfJuvenileJustice": {
                            "type": "integer"
                          },
                          "yearsJuvenileJustice": {
                            "type": "integer"
                          },
                          "houseHoldDynamics": {
                            "type": "integer"
                          },
                          "sexualOrientationGenderIdentityYouth": {
                            "type": "integer"
                          },
                          "sexualOrientationGenderIdentityFamilyMbr": {
                            "type": "integer"
                          },
                          "housingIssuesYouth": {
                            "type": "integer"
                          },
                          "housingIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "schoolEducationIssuesYouth": {
                            "type": "integer"
                          },
                          "schoolEducationIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "unemployementYouth": {
                            "type": "integer"
                          },
                          "unemployementFamilyMbr": {
                            "type": "integer"
                          },
                          "mentalHealthIssuesYouth": {
                            "type": "integer"
                          },
                          "mentalHealthIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "healthIssuesYouth": {
                            "type": "integer"
                          },
                          "healthIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "physicalDisabilityYouth": {
                            "type": "integer"
                          },
                          "physicalDisabilityFamilyMbr": {
                            "type": "integer"
                          },
                          "mentalDisabilityYouth": {
                            "type": "integer"
                          },
                          "mentalDisabilityFamilyMbr": {
                            "type": "integer"
                          },
                          "abuseAndNeglectYouth": {
                            "type": "integer"
                          },
                          "abuseAndNeglectFamilyMbr": {
                            "type": "integer"
                          },
                          "alcoholDrugAbuseYouth": {
                            "type": "integer"
                          },
                          "alcoholDrugAbuseFamilyMbr": {
                            "type": "integer"
                          },
                          "insufficientIncomeToSupportYouth": {
                            "type": "integer"
                          },
                          "activeMilitaryParent": {
                            "type": "integer"
                          },
                          "incarceratedParent": {
                            "type": "integer"
                          },
                          "incarceratedParentStatus": {
                            "type": "integer"
                          },
                          "referralSource": {
                            "type": "integer"
                          },
                          "countOutReachReferralApproaches": {
                            "type": "integer"
                          },
                          "exchangeForSex": {
                            "type": "integer"
                          },
                          "exchangeForSexPastThreeMonths": {
                            "type": "integer"
                          },
                          "countOfExchangeForSex": {
                            "type": "integer"
                          },
                          "askedOfForcedToExchangeForSex": {
                            "type": "integer"
                          },
                          "askedOfForcedToExchangeForSexPastThreeMonths": {
                            "type": "integer"
                          },
                          "workPlaceViolenceThreat": {
                            "type": "integer"
                          },
                          "workPlacePromiseDifference": {
                            "type": "integer"
                          },
                          "coercedToContinueWork": {
                            "type": "integer"
                          },
                          "laborExploitPastThreeMonths": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    exitrhy:
                      exitrhyId: 878d7b3f-91d8-4a5d-9eba-81b081f0a9f8
                      sexualOrientation: 0
                      formerlyWardChildWelfrForestCare: 0
                      yearsChildWelfrForestCare: 0
                      monthsChildWelfrForestCare: 0
                      formerlyWardOfJuvenileJustice: 0
                      yearsJuvenileJustice: 0
                      houseHoldDynamics: 0
                      sexualOrientationGenderIdentityYouth: 0
                      sexualOrientationGenderIdentityFamilyMbr: 0
                      housingIssuesYouth: 0
                      housingIssuesFamilyMbr: 0
                      schoolEducationIssuesYouth: 0
                      schoolEducationIssuesFamilyMbr: 0
                      unemployementYouth: 0
                      unemployementFamilyMbr: 0
                      mentalHealthIssuesYouth: 0
                      mentalHealthIssuesFamilyMbr: 0
                      healthIssuesYouth: 0
                      healthIssuesFamilyMbr: 0
                      physicalDisabilityYouth: 0
                      physicalDisabilityFamilyMbr: 0
                      mentalDisabilityYouth: 0
                      mentalDisabilityFamilyMbr: 0
                      abuseAndNeglectYouth: 0
                      abuseAndNeglectFamilyMbr: 0
                      alcoholDrugAbuseYouth: 0
                      alcoholDrugAbuseFamilyMbr: 0
                      insufficientIncomeToSupportYouth: 0
                      activeMilitaryParent: 0
                      incarceratedParent: 0
                      incarceratedParentStatus: 0
                      referralSource: 0
                      countOutReachReferralApproaches: 0
                      exchangeForSex: 0
                      exchangeForSexPastThreeMonths: 0
                      countOfExchangeForSex: 0
                      askedOfForcedToExchangeForSex: 0
                      askedOfForcedToExchangeForSexPastThreeMonths: 0
                      workPlaceViolenceThreat: 0
                      workPlacePromiseDifference: 0
                      coercedToContinueWork: 0
                      laborExploitPastThreeMonths: 0
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exitrhy using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-exits-exitId-exitrhys-exitrhyid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific exitrhy specified by the URI resource parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-exits-exitId-exitrhys-exitrhyid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitrhy"
                  ],
                  "properties": {
                    "exitrhy": {
                      "type": "object",
                      "required": [
                        "projectCompletionStatus",
                        "earlyExitReason",
                        "familyReunificationAchieved",
                        "writtenAfterCarePlan",
                        "assistanceMainStreamBenefits",
                        "permenantHousingPlacement",
                        "tempShelterPlacement",
                        "exitCounseling",
                        "furtherFollowupServices",
                        "scheduledFollowupContacts",
                        "resourcePackage",
                        "otherAftercarePlanOrAction"
                      ],
                      "properties": {
                        "projectCompletionStatus": {
                          "type": "integer"
                        },
                        "earlyExitReason": {
                          "type": "integer"
                        },
                        "familyReunificationAchieved": {
                          "type": "integer"
                        },
                        "writtenAfterCarePlan": {
                          "type": "integer"
                        },
                        "assistanceMainStreamBenefits": {
                          "type": "integer"
                        },
                        "permenantHousingPlacement": {
                          "type": "integer"
                        },
                        "tempShelterPlacement": {
                          "type": "integer"
                        },
                        "exitCounseling": {
                          "type": "integer"
                        },
                        "furtherFollowupServices": {
                          "type": "integer"
                        },
                        "scheduledFollowupContacts": {
                          "type": "integer"
                        },
                        "resourcePackage": {
                          "type": "integer"
                        },
                        "otherAftercarePlanOrAction": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitrhy:
                    projectCompletionStatus: 3
                    earlyExitReason: 1
                    familyReunificationAchieved: 0
                    writtenAfterCarePlan: 2
                    assistanceMainStreamBenefits: 0
                    permenantHousingPlacement: 1
                    tempShelterPlacement: 2
                    exitCounseling: 0
                    furtherFollowupServices: 1
                    scheduledFollowupContacts: 1
                    resourcePackage: 1
                    otherAftercarePlanOrAction: 2
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific exitrhy specified by the URI resource parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-exits-exitId-exitrhys-exitrhyid
    parameters:
      - name: exitrhyid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exitrhy Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitrhys/{exitrhyid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitrhys"
                    ],
                    "properties": {
                      "exitrhys": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitrhys"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitrhys": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitrhyId",
                                "projectCompletionStatus",
                                "earlyExitReason",
                                "familyReunificationAchieved",
                                "writtenAfterCarePlan",
                                "assistanceMainStreamBenefits",
                                "permenantHousingPlacement",
                                "tempShelterPlacement",
                                "exitCounseling",
                                "furtherFollowupServices",
                                "scheduledFollowupContacts",
                                "resourcePackage",
                                "otherAftercarePlanOrAction"
                              ],
                              "properties": {
                                "exitrhyId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "projectCompletionStatus": {
                                  "type": "integer"
                                },
                                "earlyExitReason": {
                                  "type": "integer"
                                },
                                "familyReunificationAchieved": {
                                  "type": "integer"
                                },
                                "writtenAfterCarePlan": {
                                  "type": "integer"
                                },
                                "assistanceMainStreamBenefits": {
                                  "type": "integer"
                                },
                                "permenantHousingPlacement": {
                                  "type": "integer"
                                },
                                "tempShelterPlacement": {
                                  "type": "integer"
                                },
                                "exitCounseling": {
                                  "type": "integer"
                                },
                                "furtherFollowupServices": {
                                  "type": "integer"
                                },
                                "scheduledFollowupContacts": {
                                  "type": "integer"
                                },
                                "resourcePackage": {
                                  "type": "integer"
                                },
                                "otherAftercarePlanOrAction": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitrhys:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exitrhys:
                        - exitrhyId: 878d7b3f-91d8-4a5d-9eba-81b081f0a9f8
                          projectCompletionStatus: 3
                          earlyExitReason: 1
                          familyReunificationAchieved: 0
                          writtenAfterCarePlan: 2
                          assistanceMainStreamBenefits: 0
                          permenantHousingPlacement: 1
                          tempShelterPlacement: 2
                          exitCounseling: 0
                          furtherFollowupServices: 1
                          scheduledFollowupContacts: 1
                          resourcePackage: 1
                          otherAftercarePlanOrAction: 2
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitrhy history.  Returns a list of exitrhy ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-exits-exitId-exitrhys-exitrhyid-history
    parameters:
      - name: exitrhyid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exitrhy Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthinsurances':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthinsurances"
                    ],
                    "properties": {
                      "healthinsurances": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "healthinsurances"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "healthinsurances": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "healthinsuranceId",
                                "insuranceFromAnySource",
                                "medicaid",
                                "noMedicaidReason",
                                "medicare",
                                "noMedicareReason",
                                "schip",
                                "noSchipReason",
                                "noVaMedReason",
                                "employerProvided",
                                "noEmployerProvidedReason",
                                "cobra",
                                "noCobraReason",
                                "privatePay",
                                "noPrivatePayReason",
                                "stateHealthIns",
                                "noStateHealthInsReason",
                                "otherSource",
                                "otherSourceIdentify",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "healthinsuranceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "insuranceFromAnySource": {
                                  "type": "integer"
                                },
                                "medicaid": {
                                  "type": "integer"
                                },
                                "noMedicaidReason": {
                                  "type": "integer"
                                },
                                "medicare": {
                                  "type": "integer"
                                },
                                "noMedicareReason": {
                                  "type": "integer"
                                },
                                "schip": {
                                  "type": "integer"
                                },
                                "noSchipReason": {
                                  "type": "integer"
                                },
                                "noVaMedReason": {
                                  "type": "integer"
                                },
                                "employerProvided": {
                                  "type": "integer"
                                },
                                "noEmployerProvidedReason": {
                                  "type": "integer"
                                },
                                "cobra": {
                                  "type": "integer"
                                },
                                "noCobraReason": {
                                  "type": "integer"
                                },
                                "privatePay": {
                                  "type": "integer"
                                },
                                "noPrivatePayReason": {
                                  "type": "integer"
                                },
                                "stateHealthIns": {
                                  "type": "integer"
                                },
                                "noStateHealthInsReason": {
                                  "type": "integer"
                                },
                                "otherSource": {
                                  "type": "integer"
                                },
                                "otherSourceIdentify": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    healthinsurances:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthinsurances:
                        - healthinsuranceId: b7ccbf4c-980d-4163-a7a5-7eecf6829946
                          insuranceFromAnySource: 99
                          medicaid: 1
                          noMedicaidReason: 8
                          medicare: 99
                          noMedicareReason: 4
                          schip: 1
                          noSchipReason: 2
                          noVaMedReason: 9
                          employerProvided: 1929555170
                          noEmployerProvidedReason: 99
                          cobra: 1401014227
                          noCobraReason: 2
                          privatePay: 0
                          noPrivatePayReason: 4
                          stateHealthIns: 0
                          noStateHealthInsReason: 8
                          otherSource: 688424562
                          otherSourceIdentify: 'test    '
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthinsurance.  Returns a list of healthinsurance ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-healthinsurances

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthStatus"
                    ],
                    "properties": {
                      "healthStatus": {
                        "type": "object",
                        "required": [
                          "healthStatusId",
                          "healthCategory",
                          "healthStatus",
                          "dueDate",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "healthStatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "healthCategory": {
                            "type": "integer"
                          },
                          "healthStatus": {
                            "type": "integer"
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  healthStatus:
                    healthStatusId: 81057685-4120-424f-9378-23bc45e01925
                    healthCategory: 27
                    healthStatus: 3
                    dueDate: 04-05-2020
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a healthinsurance
      operationId: POST_clients-clientId-enrollments-enrollmentId-healthinsurances
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "healthinsurance"
                  ],
                  "properties": {
                    "healthinsurance": {
                      "type": "object",
                      "required": [
                        "insuranceFromAnySource",
                        "medicaid",
                        "noMedicaidReason",
                        "medicare",
                        "noMedicareReason",
                        "schip",
                        "noSchipReason",
                        "vaMedicalServices",
                        "noVaMedReason",
                        "employerProvided",
                        "noEmployerProvidedReason",
                        "cobra",
                        "noCobraReason",
                        "privatePay",
                        "noPrivatePayReason",
                        "stateHealthIns",
                        "noStateHealthInsReason",
                        "otherSource",
                        "otherSourceIdentify",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "insuranceFromAnySource": {
                          "type": "integer"
                        },
                        "medicaid": {
                          "type": "integer"
                        },
                        "noMedicaidReason": {
                          "type": "integer"
                        },
                        "medicare": {
                          "type": "integer"
                        },
                        "noMedicareReason": {
                          "type": "integer"
                        },
                        "schip": {
                          "type": "integer"
                        },
                        "noSchipReason": {
                          "type": "integer"
                        },
                        "vaMedicalServices": {
                          "type": "integer"
                        },
                        "noVaMedReason": {
                          "type": "integer"
                        },
                        "employerProvided": {
                          "type": "integer"
                        },
                        "noEmployerProvidedReason": {
                          "type": "integer"
                        },
                        "cobra": {
                          "type": "integer"
                        },
                        "noCobraReason": {
                          "type": "integer"
                        },
                        "privatePay": {
                          "type": "integer"
                        },
                        "noPrivatePayReason": {
                          "type": "integer"
                        },
                        "stateHealthIns": {
                          "type": "integer"
                        },
                        "noStateHealthInsReason": {
                          "type": "integer"
                        },
                        "otherSource": {
                          "type": "integer"
                        },
                        "otherSourceIdentify": {
                          "type": "string",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  healthinsurance:
                    insuranceFromAnySource: 99
                    medicaid: 1
                    noMedicaidReason: 8
                    medicare: 99
                    noMedicareReason: 4
                    schip: 1
                    noSchipReason: 2
                    vaMedicalServices: 9
                    noVaMedReason: 9
                    employerProvided: 1929555170
                    noEmployerProvidedReason: 99
                    cobra: 1401014227
                    noCobraReason: 2
                    privatePay: 0
                    noPrivatePayReason: 4
                    stateHealthIns: 0
                    noStateHealthInsReason: 8
                    otherSource: 688424562
                    otherSourceIdentify: test
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthinsurances/{healthinsuranceid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthInsurance"
                    ],
                    "properties": {
                      "healthInsurance": {
                        "type": "object",
                        "required": [
                          "healthInsuranceId",
                          "insuranceFromAnySource",
                          "medicaid",
                          "noMedicaidReason",
                          "medicare",
                          "noMedicareReason",
                          "schip",
                          "noSchipReason",
                          "noVaMedReason",
                          "employerProvided",
                          "noEmployerProvidedReason",
                          "cobra",
                          "noCobraReason",
                          "privatePay",
                          "noPrivatePayReason",
                          "stateHealthIns",
                          "noStateHealthInsReason",
                          "otherSource",
                          "otherSourceIdentify",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "healthInsuranceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "insuranceFromAnySource": {
                            "type": "integer"
                          },
                          "medicaid": {
                            "type": "integer"
                          },
                          "noMedicaidReason": {
                            "type": "integer"
                          },
                          "medicare": {
                            "type": "integer"
                          },
                          "noMedicareReason": {
                            "type": "integer"
                          },
                          "schip": {
                            "type": "integer"
                          },
                          "noSchipReason": {
                            "type": "integer"
                          },
                          "noVaMedReason": {
                            "type": "integer"
                          },
                          "employerProvided": {
                            "type": "integer"
                          },
                          "noEmployerProvidedReason": {
                            "type": "integer"
                          },
                          "cobra": {
                            "type": "integer"
                          },
                          "noCobraReason": {
                            "type": "integer"
                          },
                          "privatePay": {
                            "type": "integer"
                          },
                          "noPrivatePayReason": {
                            "type": "integer"
                          },
                          "stateHealthIns": {
                            "type": "integer"
                          },
                          "noStateHealthInsReason": {
                            "type": "integer"
                          },
                          "otherSource": {
                            "type": "integer"
                          },
                          "otherSourceIdentify": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    healthInsurance:
                      healthInsuranceId: b7ccbf4c-980d-4163-a7a5-7eecf6829946
                      insuranceFromAnySource: 99
                      medicaid: 1
                      noMedicaidReason: 8
                      medicare: 99
                      noMedicareReason: 4
                      schip: 1
                      noSchipReason: 2
                      noVaMedReason: 9
                      employerProvided: 1929555170
                      noEmployerProvidedReason: 99
                      cobra: 1401014227
                      noCobraReason: 2
                      privatePay: 0
                      noPrivatePayReason: 4
                      stateHealthIns: 0
                      noStateHealthInsReason: 8
                      otherSource: 688424562
                      otherSourceIdentify: 'test    '
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a healthinsurance using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-healthinsurances-healthinsuranceid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific healthinsurance specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-healthinsurances-healthinsuranceid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "healthInsurance"
                  ],
                  "properties": {
                    "healthInsurance": {
                      "type": "object",
                      "required": [
                        "insuranceFromAnySource",
                        "medicaid",
                        "noMedicaidReason",
                        "medicare",
                        "noMedicareReason",
                        "schip",
                        "noSchipReason",
                        "noVaMedReason",
                        "employerProvided",
                        "noEmployerProvidedReason",
                        "cobra",
                        "noCobraReason",
                        "privatePay",
                        "noPrivatePayReason",
                        "stateHealthIns",
                        "noStateHealthInsReason",
                        "otherSource",
                        "otherSourceIdentify",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "insuranceFromAnySource": {
                          "type": "integer"
                        },
                        "medicaid": {
                          "type": "integer"
                        },
                        "noMedicaidReason": {
                          "type": "integer"
                        },
                        "medicare": {
                          "type": "integer"
                        },
                        "noMedicareReason": {
                          "type": "integer"
                        },
                        "schip": {
                          "type": "integer"
                        },
                        "noSchipReason": {
                          "type": "integer"
                        },
                        "noVaMedReason": {
                          "type": "integer"
                        },
                        "employerProvided": {
                          "type": "integer"
                        },
                        "noEmployerProvidedReason": {
                          "type": "integer"
                        },
                        "cobra": {
                          "type": "integer"
                        },
                        "noCobraReason": {
                          "type": "integer"
                        },
                        "privatePay": {
                          "type": "integer"
                        },
                        "noPrivatePayReason": {
                          "type": "integer"
                        },
                        "stateHealthIns": {
                          "type": "integer"
                        },
                        "noStateHealthInsReason": {
                          "type": "integer"
                        },
                        "otherSource": {
                          "type": "integer"
                        },
                        "otherSourceIdentify": {
                          "type": "string",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  healthInsurance:
                    insuranceFromAnySource: 99
                    medicaid: 1
                    noMedicaidReason: 8
                    medicare: 99
                    noMedicareReason: 4
                    schip: 1
                    noSchipReason: 2
                    noVaMedReason: 9
                    employerProvided: 1929555170
                    noEmployerProvidedReason: 99
                    cobra: 1401014227
                    noCobraReason: 2
                    privatePay: 0
                    noPrivatePayReason: 4
                    stateHealthIns: 0
                    noStateHealthInsReason: 8
                    otherSource: 688424562
                    otherSourceIdentify: 'test    '
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific healthinsurance specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-healthinsurances-healthinsuranceid
    parameters:
      - name: healthinsuranceid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Healthinsurance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthinsurances/{healthinsuranceid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthinsurances"
                    ],
                    "properties": {
                      "healthinsurances": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "healthinsurances"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "healthinsurances": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "healthinsuranceId",
                                "insuranceFromAnySource",
                                "medicaid",
                                "noMedicaidReason",
                                "medicare",
                                "noMedicareReason",
                                "schip",
                                "noSchipReason",
                                "noVaMedReason",
                                "employerProvided",
                                "noEmployerProvidedReason",
                                "cobra",
                                "noCobraReason",
                                "privatePay",
                                "noPrivatePayReason",
                                "stateHealthIns",
                                "noStateHealthInsReason",
                                "otherSource",
                                "otherSourceIdentify",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "healthinsuranceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "insuranceFromAnySource": {
                                  "type": "integer"
                                },
                                "medicaid": {
                                  "type": "integer"
                                },
                                "noMedicaidReason": {
                                  "type": "integer"
                                },
                                "medicare": {
                                  "type": "integer"
                                },
                                "noMedicareReason": {
                                  "type": "integer"
                                },
                                "schip": {
                                  "type": "integer"
                                },
                                "noSchipReason": {
                                  "type": "integer"
                                },
                                "noVaMedReason": {
                                  "type": "integer"
                                },
                                "employerProvided": {
                                  "type": "integer"
                                },
                                "noEmployerProvidedReason": {
                                  "type": "integer"
                                },
                                "cobra": {
                                  "type": "integer"
                                },
                                "noCobraReason": {
                                  "type": "integer"
                                },
                                "privatePay": {
                                  "type": "integer"
                                },
                                "noPrivatePayReason": {
                                  "type": "integer"
                                },
                                "stateHealthIns": {
                                  "type": "integer"
                                },
                                "noStateHealthInsReason": {
                                  "type": "integer"
                                },
                                "otherSource": {
                                  "type": "integer"
                                },
                                "otherSourceIdentify": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    healthinsurances:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthinsurances:
                        - healthinsuranceId: b7ccbf4c-980d-4163-a7a5-7eecf6829946
                          insuranceFromAnySource: 99
                          medicaid: 1
                          noMedicaidReason: 8
                          medicare: 99
                          noMedicareReason: 4
                          schip: 1
                          noSchipReason: 2
                          noVaMedReason: 9
                          employerProvided: 1929555170
                          noEmployerProvidedReason: 99
                          cobra: 1401014227
                          noCobraReason: 2
                          privatePay: 0
                          noPrivatePayReason: 4
                          stateHealthIns: 0
                          noStateHealthInsReason: 8
                          otherSource: 688424562
                          otherSourceIdentify: 'test    '
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthinsurance history.  Returns a list of healthinsurance ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-healthinsurances-healthinsuranceid-history
    parameters:
      - name: healthinsuranceid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Healthinsurance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthStatuses"
                    ],
                    "properties": {
                      "healthStatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "healthStatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "healthStatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "healthStatusId",
                                "healthCategory",
                                "healthStatus",
                                "dueDate",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "healthStatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "healthCategory": {
                                  "type": "integer"
                                },
                                "healthStatus": {
                                  "type": "integer"
                                },
                                "dueDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    healthStatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthStatuses:
                        - healthStatusId: 81057685-4120-424f-9378-23bc45e01925
                          healthCategory: 27
                          healthStatus: 3
                          dueDate: 04-05-2020
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthStatus.  Returns a list of healthStatus ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-healthStatuses

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthStatus"
                    ],
                    "properties": {
                      "healthStatus": {
                        "type": "object",
                        "required": [
                          "healthStatusId",
                          "healthCategory",
                          "healthStatus",
                          "dueDate",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "healthStatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "healthCategory": {
                            "type": "integer"
                          },
                          "healthStatus": {
                            "type": "integer"
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  healthStatus:
                    healthStatusId: 81057685-4120-424f-9378-23bc45e01925
                    healthCategory: 27
                    healthStatus: 3
                    dueDate: 04-05-2020
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a healthStatus
      operationId: POST_clients-clientId-enrollments-enrollmentId-healthStatuses
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "healthStatus"
                  ],
                  "properties": {
                    "healthStatus": {
                      "type": "object",
                      "required": [
                        "healthCategory",
                        "healthStatus",
                        "dueDate",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "healthCategory": {
                          "type": "integer"
                        },
                        "healthStatus": {
                          "type": "integer"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  healthStatus:
                    healthCategory: 27
                    healthStatus: 3
                    dueDate: '04-05-2020 11:12'
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses/{healthstatusid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthStatus"
                    ],
                    "properties": {
                      "healthStatus": {
                        "type": "object",
                        "required": [
                          "healthStatusId",
                          "healthCategory",
                          "healthStatus",
                          "dueDate",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "healthStatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "healthCategory": {
                            "type": "integer"
                          },
                          "healthStatus": {
                            "type": "integer"
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    healthStatus:
                      healthStatusId: 81057685-4120-424f-9378-23bc45e01925
                      healthCategory: 27
                      healthStatus: 3
                      dueDate: 04-05-2020
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a healthStatus using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-healthStatuses-healthStatusId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific healthStatus specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-healthStatuses-healthStatusId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "healthStatus"
                  ],
                  "properties": {
                    "healthStatus": {
                      "type": "object",
                      "required": [
                        "healthCategory",
                        "healthStatus",
                        "dueDate",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "healthCategory": {
                          "type": "integer"
                        },
                        "healthStatus": {
                          "type": "integer"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  healthStatus:
                    healthCategory: 27
                    healthStatus: 3
                    dueDate: '04-05-2020 11:12'
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific healthStatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-healthStatuses-healthStatusId
    parameters:
      - name: healthstatusid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: healthStatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses/{healthstatusid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthStatuses"
                    ],
                    "properties": {
                      "healthStatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "healthStatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "healthStatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "healthStatusId",
                                "healthCategory",
                                "healthStatus",
                                "dueDate",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "healthStatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "healthCategory": {
                                  "type": "integer"
                                },
                                "healthStatus": {
                                  "type": "integer"
                                },
                                "dueDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    healthStatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthStatuses:
                        - healthStatusId: 81057685-4120-424f-9378-23bc45e01925
                          healthCategory: 27
                          healthStatus: 3
                          dueDate: 04-05-2020
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthStatus history.  Returns a list of healthStatus ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-healthStatuses-healthStatusId-history
    parameters:
      - name: healthstatusid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: healthStatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "IncomeAndSources"
                    ],
                    "properties": {
                      "IncomeAndSources": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "incomeAndSources"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "incomeAndSources": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "incomeAndSourceId",
                                "alimony",
                                "alimonyAmount",
                                "childSupport",
                                "childSupportAmount",
                                "earned",
                                "earnedAmount",
                                "ga",
                                "gaAmount",
                                "incomeFromAnySource",
                                "otherSource",
                                "otherSourceAmount",
                                "otherSourceidentify",
                                "pension",
                                "pensionAmount",
                                "privatedisability",
                                "privateDisabilityAmount",
                                "socsecretirement",
                                "socsecretirementamount",
                                "ssdi",
                                "ssdiAmount",
                                "ssi",
                                "ssiAmount",
                                "tanf",
                                "tanfAmount",
                                "totalMonthlyIncome",
                                "unemployment",
                                "unemploymentamount",
                                "vadisabilitynonservice",
                                "vaDisabilityNonServiceAmount",
                                "vadisabilityservice",
                                "vaDisabilityServiceAmount",
                                "workerscomp",
                                "workersCompAmount",
                                "dateCreated",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "incomeAndSourceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "alimony": {
                                  "type": "integer"
                                },
                                "alimonyAmount": {
                                  "type": "number"
                                },
                                "childSupport": {
                                  "type": "integer"
                                },
                                "childSupportAmount": {
                                  "type": "number"
                                },
                                "earned": {
                                  "type": "integer"
                                },
                                "earnedAmount": {
                                  "type": "number"
                                },
                                "ga": {
                                  "type": "integer"
                                },
                                "gaAmount": {
                                  "type": "number"
                                },
                                "incomeFromAnySource": {
                                  "type": "integer"
                                },
                                "otherSource": {
                                  "type": "integer"
                                },
                                "otherSourceAmount": {
                                  "type": "number"
                                },
                                "otherSourceidentify": {
                                  "type": "string",
                                },
                                "pension": {
                                  "type": "integer"
                                },
                                "pensionAmount": {
                                  "type": "number"
                                },
                                "privatedisability": {
                                  "type": "integer"
                                },
                                "privateDisabilityAmount": {
                                  "type": "number"
                                },
                                "socsecretirement": {
                                  "type": "integer"
                                },
                                "socsecretirementamount": {
                                  "type": "number"
                                },
                                "ssdi": {
                                  "type": "integer"
                                },
                                "ssdiAmount": {
                                  "type": "number"
                                },
                                "ssi": {
                                  "type": "integer"
                                },
                                "ssiAmount": {
                                  "type": "number"
                                },
                                "tanf": {
                                  "type": "integer"
                                },
                                "tanfAmount": {
                                  "type": "number"
                                },
                                "totalMonthlyIncome": {
                                  "type": "number"
                                },
                                "unemployment": {
                                  "type": "integer"
                                },
                                "unemploymentamount": {
                                  "type": "number"
                                },
                                "vadisabilitynonservice": {
                                  "type": "integer"
                                },
                                "vaDisabilityNonServiceAmount": {
                                  "type": "number"
                                },
                                "vadisabilityservice": {
                                  "type": "integer"
                                },
                                "vaDisabilityServiceAmount": {
                                  "type": "number"
                                },
                                "workerscomp": {
                                  "type": "integer"
                                },
                                "workersCompAmount": {
                                  "type": "number"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "MM-dd-YYYY HH:mm",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    IncomeAndSources:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      incomeAndSources:
                        - incomeAndSourceId: 07577bdf-d44d-4a2f-b0f5-952098158242
                          alimony: 0
                          alimonyAmount: 0.683
                          childSupport: 0
                          childSupportAmount: 0.375
                          earned: 0
                          earnedAmount: 0.974
                          ga: 0
                          gaAmount: 0.638
                          incomeFromAnySource: 0
                          otherSource: 0
                          otherSourceAmount: 0.867
                          otherSourceidentify: TestData
                          pension: 0
                          pensionAmount: 0.375
                          privatedisability: 0
                          privateDisabilityAmount: 0.966
                          socsecretirement: 0
                          socsecretirementamount: 0.635
                          ssdi: 0
                          ssdiAmount: 0.429
                          ssi: 0
                          ssiAmount: 0.33
                          tanf: 0
                          tanfAmount: 0.361
                          totalMonthlyIncome: 0.273
                          unemployment: 0
                          unemploymentamount: 0.584
                          vadisabilitynonservice: 0
                          vaDisabilityNonServiceAmount: 0.816
                          vadisabilityservice: 0
                          vaDisabilityServiceAmount: 0.148
                          workerscomp: 0
                          workersCompAmount: 0.144
                          dateCreated: '04-11-2020 10:32'
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for incomeandsource.  Returns a list of incomeandsource ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-incomeandsources

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  incomeAndSource:
                    incomeAndSourceId: 07577bdf-d44d-4a2f-b0f5-952098158242
                    alimony: 0
                    alimonyAmount: 0.683
                    childSupport: 0
                    childSupportAmount: 0.375
                    earned: 0
                    earnedAmount: 0.974
                    ga: 0
                    gaAmount: 0.638
                    incomeFromAnySource: 0
                    otherSource: 0
                    otherSourceAmount: 0.867
                    otherSourceIdentify: TestData
                    pension: 0
                    pensionAmount: 0.375
                    privateDisability: 0
                    privateDisabilityAmount: 0.966
                    socsecRetirement: 0
                    socsecRetirementAmount: 0.635
                    ssdi: 0
                    ssdiAmount: 0.429
                    ssi: 0
                    ssiAmount: 0.33
                    tanf: 0
                    tanfAmount: 0.361
                    totalMonthlyIncome: 0.273
                    unemployment: 0
                    unemploymentAmount: 0.584
                    vaDisabilitynonService: 0
                    vaDisabilityNonServiceAmount: 0.816
                    vaDisabilityService: 0
                    vaDisabilityServiceAmount: 0.148
                    workersComp: 0
                    workersCompAmount: 0.144
                    dateCreated: '04-11-2020 10:32'
                    dateUpdated: '04-11-2020 10:32'
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a incomeandsource
      operationId: POST_clients-clientId-enrollments-enrollmentId-incomeandsources
      requestBody:
        content:
          application/json:
            schema:
              example:
                  incomeAndSource:
                      incomeAndSourceId: 07577bdf-d44d-4a2f-b0f5-952098158242
                      alimony: 0
                      alimonyAmount: 0.683
                      childSupport: 0
                      childSupportAmount: 0.375
                      earned: 0
                      earnedAmount: 0.974
                      ga: 0
                      gaAmount: 0.638
                      incomeFromAnySource: 0
                      otherSource: 0
                      otherSourceAmount: 0.867
                      otherSourceIdentify: TestData
                      pension: 0
                      pensionAmount: 0.375
                      privateDisability: 0
                      privateDisabilityAmount: 0.966
                      socsecRetirement: 0
                      socsecRetirementAmount: 0.635
                      ssdi: 0
                      ssdiAmount: 0.429
                      ssi: 0
                      ssiAmount: 0.33
                      tanf: 0
                      tanfAmount: 0.361
                      totalMonthlyIncome: 0.273
                      unemployment: 0
                      unemploymentAmount: 0.584
                      vaDisabilitynonService: 0
                      vaDisabilityNonServiceAmount: 0.816
                      vaDisabilityService: 0
                      vaDisabilityServiceAmount: 0.148
                      workersComp: 0
                      workersCompAmount: 0.144
                      dateCreated: '04-11-2020 10:32'
                      dateUpdated: '04-11-2020 10:32'
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources/{incomeandsourceid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "incomeAndSource"
                    ],
                    "properties": {
                      "incomeAndSource": {
                        "type": "object",
                        "required": [
                          "incomeAndSourceId",
                          "alimony",
                          "alimonyAmount",
                          "childSupport",
                          "childSupportAmount",
                          "earned",
                          "earnedAmount",
                          "ga",
                          "gaAmount",
                          "incomeFromAnySource",
                          "otherSource",
                          "otherSourceAmount",
                          "otherSourceIdentify",
                          "pension",
                          "pensionAmount",
                          "privateDisability",
                          "privateDisabilityAmount",
                          "socsecRetirement",
                          "socsecRetirementAmount",
                          "ssdi",
                          "ssdiAmount",
                          "ssi",
                          "ssiAmount",
                          "tanf",
                          "tanfAmount",
                          "totalMonthlyIncome",
                          "unemployment",
                          "unemploymentAmount",
                          "vaDisabilitynonService",
                          "vaDisabilityNonServiceAmount",
                          "vaDisabilityService",
                          "vaDisabilityServiceAmount",
                          "workersComp",
                          "workersCompAmount",
                          "dateCreated",
                          "dateUpdated",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "incomeAndSourceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "alimony": {
                            "type": "integer"
                          },
                          "alimonyAmount": {
                            "type": "number"
                          },
                          "childSupport": {
                            "type": "integer"
                          },
                          "childSupportAmount": {
                            "type": "number"
                          },
                          "earned": {
                            "type": "integer"
                          },
                          "earnedAmount": {
                            "type": "number"
                          },
                          "ga": {
                            "type": "integer"
                          },
                          "gaAmount": {
                            "type": "number"
                          },
                          "incomeFromAnySource": {
                            "type": "integer"
                          },
                          "otherSource": {
                            "type": "integer"
                          },
                          "otherSourceAmount": {
                            "type": "number"
                          },
                          "otherSourceIdentify": {
                            "type": "string",
                          },
                          "pension": {
                            "type": "integer"
                          },
                          "pensionAmount": {
                            "type": "number"
                          },
                          "privateDisability": {
                            "type": "integer"
                          },
                          "privateDisabilityAmount": {
                            "type": "number"
                          },
                          "socsecRetirement": {
                            "type": "integer"
                          },
                          "socsecRetirementAmount": {
                            "type": "number"
                          },
                          "ssdi": {
                            "type": "integer"
                          },
                          "ssdiAmount": {
                            "type": "number"
                          },
                          "ssi": {
                            "type": "integer"
                          },
                          "ssiAmount": {
                            "type": "number"
                          },
                          "tanf": {
                            "type": "integer"
                          },
                          "tanfAmount": {
                            "type": "number"
                          },
                          "totalMonthlyIncome": {
                            "type": "number"
                          },
                          "unemployment": {
                            "type": "integer"
                          },
                          "unemploymentAmount": {
                            "type": "number"
                          },
                          "vaDisabilitynonService": {
                            "type": "integer"
                          },
                          "vaDisabilityNonServiceAmount": {
                            "type": "number"
                          },
                          "vaDisabilityService": {
                            "type": "integer"
                          },
                          "vaDisabilityServiceAmount": {
                            "type": "number"
                          },
                          "workersComp": {
                            "type": "integer"
                          },
                          "workersCompAmount": {
                            "type": "number"
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "MM-dd-YYYY HH:mm",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "MM-dd-YYYY HH:mm",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    incomeAndSource:
                        incomeAndSourceId: 07577bdf-d44d-4a2f-b0f5-952098158242
                        alimony: 0
                        alimonyAmount: 0.683
                        childSupport: 0
                        childSupportAmount: 0.375
                        earned: 0
                        earnedAmount: 0.974
                        ga: 0
                        gaAmount: 0.638
                        incomeFromAnySource: 0
                        otherSource: 0
                        otherSourceAmount: 0.867
                        otherSourceIdentify: TestData
                        pension: 0
                        pensionAmount: 0.375
                        privateDisability: 0
                        privateDisabilityAmount: 0.966
                        socsecRetirement: 0
                        socsecRetirementAmount: 0.635
                        ssdi: 0
                        ssdiAmount: 0.429
                        ssi: 0
                        ssiAmount: 0.33
                        tanf: 0
                        tanfAmount: 0.361
                        totalMonthlyIncome: 0.273
                        unemployment: 0
                        unemploymentAmount: 0.584
                        vaDisabilitynonService: 0
                        vaDisabilityNonServiceAmount: 0.816
                        vaDisabilityService: 0
                        vaDisabilityServiceAmount: 0.148
                        workersComp: 0
                        workersCompAmount: 0.144
                        dateCreated: '04-11-2020 10:32'
                        dateUpdated: '04-11-2020 10:32'
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a incomeandsource using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-incomeandsources-incomeAndSourceId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific incomeandsource specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-incomeandsources-incomeAndSourceId
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "incomeAndSource"
                  ],
                  "properties": {
                    "incomeAndSource": {
                      "type": "object",
                      "required": [
                        "incomeAndSourceId",
                        "alimony",
                        "alimonyAmount",
                        "childSupport",
                        "childSupportAmount",
                        "earned",
                        "earnedAmount",
                        "ga",
                        "gaAmount",
                        "incomeFromAnySource",
                        "otherSource",
                        "otherSourceAmount",
                        "otherSourceIdentify",
                        "pension",
                        "pensionAmount",
                        "privateDisability",
                        "privateDisabilityAmount",
                        "socsecRetirement",
                        "socsecRetirementAmount",
                        "ssdi",
                        "ssdiAmount",
                        "ssi",
                        "ssiAmount",
                        "tanf",
                        "tanfAmount",
                        "totalMonthlyIncome",
                        "unemployment",
                        "unemploymentAmount",
                        "vaDisabilitynonService",
                        "vaDisabilityNonServiceAmount",
                        "vaDisabilityService",
                        "vaDisabilityServiceAmount",
                        "workersComp",
                        "workersCompAmount",
                        "dateCreated",
                        "dateUpdated",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "incomeAndSourceId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "alimony": {
                          "type": "integer"
                        },
                        "alimonyAmount": {
                          "type": "number"
                        },
                        "childSupport": {
                          "type": "integer"
                        },
                        "childSupportAmount": {
                          "type": "number"
                        },
                        "earned": {
                          "type": "integer"
                        },
                        "earnedAmount": {
                          "type": "number"
                        },
                        "ga": {
                          "type": "integer"
                        },
                        "gaAmount": {
                          "type": "number"
                        },
                        "incomeFromAnySource": {
                          "type": "integer"
                        },
                        "otherSource": {
                          "type": "integer"
                        },
                        "otherSourceAmount": {
                          "type": "number"
                        },
                        "otherSourceIdentify": {
                          "type": "string",
                        },
                        "pension": {
                          "type": "integer"
                        },
                        "pensionAmount": {
                          "type": "number"
                        },
                        "privateDisability": {
                          "type": "integer"
                        },
                        "privateDisabilityAmount": {
                          "type": "number"
                        },
                        "socsecRetirement": {
                          "type": "integer"
                        },
                        "socsecRetirementAmount": {
                          "type": "number"
                        },
                        "ssdi": {
                          "type": "integer"
                        },
                        "ssdiAmount": {
                          "type": "number"
                        },
                        "ssi": {
                          "type": "integer"
                        },
                        "ssiAmount": {
                          "type": "number"
                        },
                        "tanf": {
                          "type": "integer"
                        },
                        "tanfAmount": {
                          "type": "number"
                        },
                        "totalMonthlyIncome": {
                          "type": "number"
                        },
                        "unemployment": {
                          "type": "integer"
                        },
                        "unemploymentAmount": {
                          "type": "number"
                        },
                        "vaDisabilitynonService": {
                          "type": "integer"
                        },
                        "vaDisabilityNonServiceAmount": {
                          "type": "number"
                        },
                        "vaDisabilityService": {
                          "type": "integer"
                        },
                        "vaDisabilityServiceAmount": {
                          "type": "number"
                        },
                        "workersComp": {
                          "type": "integer"
                        },
                        "workersCompAmount": {
                          "type": "number"
                        },
                        "dateCreated": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        },
                        "dateUpdated": {
                          "type": "string",
                          "format": "MM-dd-YYYY HH:mm",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  incomeAndSource:
                      incomeAndSourceId: 07577bdf-d44d-4a2f-b0f5-952098158242
                      alimony: 0
                      alimonyAmount: 0.683
                      childSupport: 0
                      childSupportAmount: 0.375
                      earned: 0
                      earnedAmount: 0.974
                      ga: 0
                      gaAmount: 0.638
                      incomeFromAnySource: 0
                      otherSource: 0
                      otherSourceAmount: 0.867
                      otherSourceIdentify: TestData
                      pension: 0
                      pensionAmount: 0.375
                      privateDisability: 0
                      privateDisabilityAmount: 0.966
                      socsecRetirement: 0
                      socsecRetirementAmount: 0.635
                      ssdi: 0
                      ssdiAmount: 0.429
                      ssi: 0
                      ssiAmount: 0.33
                      tanf: 0
                      tanfAmount: 0.361
                      totalMonthlyIncome: 0.273
                      unemployment: 0
                      unemploymentAmount: 0.584
                      vaDisabilitynonService: 0
                      vaDisabilityNonServiceAmount: 0.816
                      vaDisabilityService: 0
                      vaDisabilityServiceAmount: 0.148
                      workersComp: 0
                      workersCompAmount: 0.144
                      dateCreated: '04-11-2020 10:32'
                      dateUpdated: '04-11-2020 10:32'
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific incomeandsource specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-incomeandsources-incomeAndSourceId
    parameters:
      - name: incomeandsourceid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Incomeandsource Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources/{incomeandsourceid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "IncomeAndSources"
                    ],
                    "properties": {
                      "IncomeAndSources": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "incomeAndSources"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "incomeAndSources": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "incomeAndSourceId",
                                "alimony",
                                "alimonyAmount",
                                "childSupport",
                                "childSupportAmount",
                                "earned",
                                "earnedAmount",
                                "ga",
                                "gaAmount",
                                "incomeFromAnySource",
                                "otherSource",
                                "otherSourceAmount",
                                "otherSourceidentify",
                                "pension",
                                "pensionAmount",
                                "privatedisability",
                                "privateDisabilityAmount",
                                "socsecretirement",
                                "socsecretirementamount",
                                "ssdi",
                                "ssdiAmount",
                                "ssi",
                                "ssiAmount",
                                "tanf",
                                "tanfAmount",
                                "totalMonthlyIncome",
                                "unemployment",
                                "unemploymentamount",
                                "vadisabilitynonservice",
                                "vaDisabilityNonServiceAmount",
                                "vadisabilityservice",
                                "vaDisabilityServiceAmount",
                                "workerscomp",
                                "workersCompAmount",
                                "dateCreated",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "incomeAndSourceId": {
                                  "type": "string",
                                },
                                "alimony": {
                                  "type": "integer"
                                },
                                "alimonyAmount": {
                                  "type": "number"
                                },
                                "childSupport": {
                                  "type": "integer"
                                },
                                "childSupportAmount": {
                                  "type": "number"
                                },
                                "earned": {
                                  "type": "integer"
                                },
                                "earnedAmount": {
                                  "type": "number"
                                },
                                "ga": {
                                  "type": "integer"
                                },
                                "gaAmount": {
                                  "type": "number"
                                },
                                "incomeFromAnySource": {
                                  "type": "integer"
                                },
                                "otherSource": {
                                  "type": "integer"
                                },
                                "otherSourceAmount": {
                                  "type": "number"
                                },
                                "otherSourceidentify": {
                                  "type": "string",
                                },
                                "pension": {
                                  "type": "integer"
                                },
                                "pensionAmount": {
                                  "type": "number"
                                },
                                "privatedisability": {
                                  "type": "integer"
                                },
                                "privateDisabilityAmount": {
                                  "type": "number"
                                },
                                "socsecretirement": {
                                  "type": "integer"
                                },
                                "socsecretirementamount": {
                                  "type": "number"
                                },
                                "ssdi": {
                                  "type": "integer"
                                },
                                "ssdiAmount": {
                                  "type": "number"
                                },
                                "ssi": {
                                  "type": "integer"
                                },
                                "ssiAmount": {
                                  "type": "number"
                                },
                                "tanf": {
                                  "type": "integer"
                                },
                                "tanfAmount": {
                                  "type": "number"
                                },
                                "totalMonthlyIncome": {
                                  "type": "number"
                                },
                                "unemployment": {
                                  "type": "integer"
                                },
                                "unemploymentamount": {
                                  "type": "number"
                                },
                                "vadisabilitynonservice": {
                                  "type": "integer"
                                },
                                "vaDisabilityNonServiceAmount": {
                                  "type": "number"
                                },
                                "vadisabilityservice": {
                                  "type": "integer"
                                },
                                "vaDisabilityServiceAmount": {
                                  "type": "number"
                                },
                                "workerscomp": {
                                  "type": "integer"
                                },
                                "workersCompAmount": {
                                  "type": "number"
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "MM-dd-YYYY HH:mm",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    IncomeAndSources:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      incomeAndSources:
                        - incomeAndSourceId: 07577bdf-d44d-4a2f-b0f5-952098158242
                          alimony: 0
                          alimonyAmount: 0.683
                          childSupport: 0
                          childSupportAmount: 0.375
                          earned: 0
                          earnedAmount: 0.974
                          ga: 0
                          gaAmount: 0.638
                          incomeFromAnySource: 0
                          otherSource: 0
                          otherSourceAmount: 0.867
                          otherSourceidentify: TestData
                          pension: 0
                          pensionAmount: 0.375
                          privatedisability: 0
                          privateDisabilityAmount: 0.966
                          socsecretirement: 0
                          socsecretirementamount: 0.635
                          ssdi: 0
                          ssdiAmount: 0.429
                          ssi: 0
                          ssiAmount: 0.33
                          tanf: 0
                          tanfAmount: 0.361
                          totalMonthlyIncome: 0.273
                          unemployment: 0
                          unemploymentamount: 0.584
                          vadisabilitynonservice: 0
                          vaDisabilityNonServiceAmount: 0.816
                          vadisabilityservice: 0
                          vaDisabilityServiceAmount: 0.148
                          workerscomp: 0
                          workersCompAmount: 0.144
                          dateCreated: '04-11-2020 10:32'
                          dataCollectionStage: 1
                          informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for incomeandsource history.  Returns a list of incomeandsource ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-incomeandsources-incomeAndSourceId-history
    parameters:
      - name: incomeandsourceid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Incomeandsource Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/medicalassistances':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                medicalAssistances:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  medicalassistances:
                    - medicalAssistanceId: 17125891-0fa3-4680-9093-fc866cf2f838
                      hivAidsAssistance: 9
                      noHivAidsAssistanceReason: 3
                      adap: 0
                      noAdapReason: 2
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
              schema:
                {
                  "type": "object",
                  "required": [
                    "medicalAssistances"
                  ],
                  "properties": {
                    "medicalAssistances": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "medicalassistances"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "medicalassistances": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "medicalAssistanceId",
                              "hivAidsAssistance",
                              "noHivAidsAssistanceReason",
                              "adap",
                              "noAdapReason",
                              "dataCollectionStage",
                              "informationDate"
                            ],
                            "properties": {
                              "medicalAssistanceId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "hivAidsAssistance": {
                                "type": "integer"
                              },
                              "noHivAidsAssistanceReason": {
                                "type": "integer"
                              },
                              "adap": {
                                "type": "integer"
                              },
                              "noAdapReason": {
                                "type": "integer"
                              },
                              "dataCollectionStage": {
                                "type": "integer"
                              },
                              "informationDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for medicalassistance.  Returns a list of medicalassistance
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-medicalassistances

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "medicalassistance"
                    ],
                    "properties": {
                      "medicalassistance": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "medicalAssistanceId",
                            "hivAidsAssistance",
                            "noHivAidsAssistanceReason",
                            "adap",
                            "noAdapReason",
                            "dataCollectionStage",
                            "informationDate"
                          ],
                          "properties": {
                            "medicalAssistanceId": {
                              "type": "string",
                              "format": "uuid",
                            },
                            "hivAidsAssistance": {
                              "type": "integer"
                            },
                            "noHivAidsAssistanceReason": {
                              "type": "integer"
                            },
                            "adap": {
                              "type": "integer"
                            },
                            "noAdapReason": {
                              "type": "integer"
                            },
                            "dataCollectionStage": {
                              "type": "integer"
                            },
                            "informationDate": {
                              "type": "string",
                              "format": "mm-dd-yyyy",
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  medicalassistance:
                      - medicalAssistanceId: 17125891-0fa3-4680-9093-fc866cf2f838
                        hivAidsAssistance: 9
                        noHivAidsAssistanceReason: 3
                        adap: 0
                        noAdapReason: 2
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a medicalassistance
      operationId: POST_clients-clientId-enrollments-enrollmentId-medicalassistances
      requestBody:
        content:
          application/json:
            example:
              medicalassistance:
                adap: 0
                hivAidsAssistance: 9
                noHivAidsAssistanceReason: 3
                noAdapReason: 2
                dataCollectionStage: 1
                informationDate: 03-17-2016
            schema:
              {
                "type": "object",
                "required": [
                  "medicalassistance"
                ],
                "properties": {
                  "medicalassistance": {
                    "type": "object",
                    "required": [
                      "adap",
                      "hivAidsAssistance",
                      "noHivAidsAssistanceReason",
                      "noAdapReason",
                      "dataCollectionStage",
                      "informationDate"
                    ],
                    "properties": {
                      "adap": {
                        "type": "integer"
                      },
                      "hivAidsAssistance": {
                        "type": "integer"
                      },
                      "noHivAidsAssistanceReason": {
                        "type": "integer"
                      },
                      "noAdapReason": {
                        "type": "integer"
                      },
                      "dataCollectionStage": {
                        "type": "integer"
                      },
                      "informationDate": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/medicalassistances/{medicalassistanceid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                medicalassistance:
                  - medicalAssistanceId: 17125891-0fa3-4680-9093-fc866cf2f838
                    hivAidsAssistance: 9
                    noHivAidsAssistanceReason: 3
                    adap: 0
                    noAdapReason: 2
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
              schema:
                {
                  "type": "object",
                  "required": [
                    "medicalassistance"
                  ],
                  "properties": {
                    "medicalassistance": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "medicalAssistanceId",
                          "hivAidsAssistance",
                          "noHivAidsAssistanceReason",
                          "adap",
                          "noAdapReason",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "medicalAssistanceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "hivAidsAssistance": {
                            "type": "integer"
                          },
                          "noHivAidsAssistanceReason": {
                            "type": "integer"
                          },
                          "adap": {
                            "type": "integer"
                          },
                          "noAdapReason": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a medicalassistance using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-medicalassistances-medicalassistanceid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific medicalassistance specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-medicalassistances-medicalassistanceid
      requestBody:
        content:
          application/json:
            example:
              medicalAssistance:
                adap: 0
                hivAidsAssistance: 9
                noHivAidsAssistanceReason: 3
                noAdapReason: 2
                dataCollectionStage: 1
                informationDate: 03-17-2016
            schema:
              {
                "type": "object",
                "required": [
                  "medicalAssistance"
                ],
                "properties": {
                  "medicalAssistance": {
                    "type": "object",
                    "required": [
                      "adap",
                      "hivAidsAssistance",
                      "noHivAidsAssistanceReason",
                      "noAdapReason",
                      "dataCollectionStage",
                      "informationDate"
                    ],
                    "properties": {
                      "adap": {
                        "type": "integer"
                      },
                      "hivAidsAssistance": {
                        "type": "integer"
                      },
                      "noHivAidsAssistanceReason": {
                        "type": "integer"
                      },
                      "noAdapReason": {
                        "type": "integer"
                      },
                      "dataCollectionStage": {
                        "type": "integer"
                      },
                      "informationDate": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific medicalassistance specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-medicalassistances-medicalassistanceid
    parameters:
      - name: medicalassistanceid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Medicalassistance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/medicalassistances/{medicalassistanceid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                medicalAssistances:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  medicalassistances:
                    - medicalAssistanceId: 17125891-0fa3-4680-9093-fc866cf2f838
                      hivAidsAssistance: 9
                      noHivAidsAssistanceReason: 3
                      adap: 0
                      noAdapReason: 2
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
              schema:
                {
                  "type": "object",
                  "required": [
                    "medicalAssistances"
                  ],
                  "properties": {
                    "medicalAssistances": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "medicalassistances"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "medicalassistances": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "medicalAssistanceId",
                              "hivAidsAssistance",
                              "noHivAidsAssistanceReason",
                              "adap",
                              "noAdapReason",
                              "dataCollectionStage",
                              "informationDate"
                            ],
                            "properties": {
                              "medicalAssistanceId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "hivAidsAssistance": {
                                "type": "integer"
                              },
                              "noHivAidsAssistanceReason": {
                                "type": "integer"
                              },
                              "adap": {
                                "type": "integer"
                              },
                              "noAdapReason": {
                                "type": "integer"
                              },
                              "dataCollectionStage": {
                                "type": "integer"
                              },
                              "informationDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for medicalassistance history.  Returns a list of medicalassistance
        ids history, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-medicalassistances-medicalassistanceid-history
    parameters:
      - name: medicalassistanceid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Medicalassistance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                nonCashBenefitsList:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  nonCashBenefitsList:
                    - nonCashBenefitsID: 80dfa67e-bf60-4227-822f-6d3850d9c5e5
                      benefitsFromAnySource: 0
                      otherSource: 99
                      otherSourceIdentify: test
                      otherTanf: 0
                      rentalAssistanceOngoing: 0
                      rentalAssistanceTemp: 0
                      snap: 0
                      tanfChildcare: 0
                      tanfTransportation: 0
                      wic: 0
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
              schema:
                {
                  "type": "object",
                  "required": [
                    "nonCashBenefitsList"
                  ],
                  "properties": {
                    "nonCashBenefitsList": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "nonCashBenefitsList"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "nonCashBenefitsList": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "nonCashBenefitsID",
                              "benefitsFromAnySource",
                              "otherSource",
                              "otherSourceIdentify",
                              "otherTanf",
                              "rentalAssistanceOngoing",
                              "rentalAssistanceTemp",
                              "snap",
                              "tanfChildcare",
                              "tanfTransportation",
                              "wic",
                              "dataCollectionStage",
                              "informationDate"
                            ],
                            "properties": {
                              "nonCashBenefitsID": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "benefitsFromAnySource": {
                                "type": "integer"
                              },
                              "otherSource": {
                                "type": "integer"
                              },
                              "otherSourceIdentify": {
                                "type": "string",
                              },
                              "otherTanf": {
                                "type": "integer"
                              },
                              "rentalAssistanceOngoing": {
                                "type": "integer"
                              },
                              "rentalAssistanceTemp": {
                                "type": "integer"
                              },
                              "snap": {
                                "type": "integer"
                              },
                              "tanfChildcare": {
                                "type": "integer"
                              },
                              "tanfTransportation": {
                                "type": "integer"
                              },
                              "wic": {
                                "type": "integer"
                              },
                              "dataCollectionStage": {
                                "type": "integer"
                              },
                              "informationDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for noncashbenefit.  Returns a list of noncashbenefit ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-noncashbenefits

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "nonCashBenefits"
                    ],
                    "properties": {
                      "nonCashBenefits": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "nonCashBenefitsID",
                            "benefitsFromAnySource",
                            "otherSource",
                            "otherSourceIdentify",
                            "otherTanf",
                            "rentalAssistanceOngoing",
                            "rentalAssistanceTemp",
                            "snap",
                            "tanfChildcare",
                            "tanfTransportation",
                            "wic",
                            "dataCollectionStage",
                            "informationDate"
                          ],
                          "properties": {
                            "nonCashBenefitsID": {
                              "type": "string",
                              "format": "uuid",
                            },
                            "benefitsFromAnySource": {
                              "type": "integer"
                            },
                            "otherSource": {
                              "type": "integer"
                            },
                            "otherSourceIdentify": {
                              "type": "string",
                            },
                            "otherTanf": {
                              "type": "integer"
                            },
                            "rentalAssistanceOngoing": {
                              "type": "integer"
                            },
                            "rentalAssistanceTemp": {
                              "type": "integer"
                            },
                            "snap": {
                              "type": "integer"
                            },
                            "tanfChildcare": {
                              "type": "integer"
                            },
                            "tanfTransportation": {
                              "type": "integer"
                            },
                            "wic": {
                              "type": "integer"
                            },
                            "dataCollectionStage": {
                              "type": "integer"
                            },
                            "informationDate": {
                              "type": "string",
                              "format": "mm-dd-yyyy",
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  nonCashBenefits:
                      - nonCashBenefitsID: 80dfa67e-bf60-4227-822f-6d3850d9c5e5
                        benefitsFromAnySource: 0
                        otherSource: 99
                        otherSourceIdentify: test
                        otherTanf: 0
                        rentalAssistanceOngoing: 0
                        rentalAssistanceTemp: 0
                        snap: 0
                        tanfChildcare: 0
                        tanfTransportation: 0
                        wic: 0
                        dataCollectionStage: 1
                        informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a noncashbenefit
      operationId: POST_clients-clientId-enrollments-enrollmentId-noncashbenefits
      requestBody:
        content:
          application/json:
            example:
              nonCashBenefits:
                  benefitsFromAnySource: 0
                  otherSource: 99
                  otherSourceIdentify: test
                  otherTanf: 0
                  rentalAssistanceOngoing: 0
                  rentalAssistanceTemp: 0
                  snap: 0
                  tanfChildcare: 0
                  tanfTransportation: 0
                  wic: 0
                  dataCollectionStage: 1
                  informationDate: 03-17-2016
            schema:
              {
                "type": "object",
                "required": [
                  "nonCashBenefits"
                ],
                "properties": {
                  "nonCashBenefits": {
                    "type": "object",
                    "required": [
                      "benefitsFromAnySource",
                      "otherSource",
                      "otherSourceIdentify",
                      "otherTanf",
                      "rentalAssistanceOngoing",
                      "rentalAssistanceTemp",
                      "snap",
                      "tanfChildcare",
                      "tanfTransportation",
                      "wic",
                      "dataCollectionStage",
                      "informationDate"
                    ],
                    "properties": {
                      "benefitsFromAnySource": {
                        "type": "integer"
                      },
                      "otherSource": {
                        "type": "integer"
                      },
                      "otherSourceIdentify": {
                        "type": "string",
                      },
                      "otherTanf": {
                        "type": "integer"
                      },
                      "rentalAssistanceOngoing": {
                        "type": "integer"
                      },
                      "rentalAssistanceTemp": {
                        "type": "integer"
                      },
                      "snap": {
                        "type": "integer"
                      },
                      "tanfChildcare": {
                        "type": "integer"
                      },
                      "tanfTransportation": {
                        "type": "integer"
                      },
                      "wic": {
                        "type": "integer"
                      },
                      "dataCollectionStage": {
                        "type": "integer"
                      },
                      "informationDate": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits/{noncashbenefitid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                nonCashBenefits:
                    - nonCashBenefitsID: 80dfa67e-bf60-4227-822f-6d3850d9c5e5
                      benefitsFromAnySource: 0
                      otherSource: 99
                      otherSourceIdentify: test
                      otherTanf: 0
                      rentalAssistanceOngoing: 0
                      rentalAssistanceTemp: 0
                      snap: 0
                      tanfChildcare: 0
                      tanfTransportation: 0
                      wic: 0
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
              schema:
                {
                  "type": "object",
                  "required": [
                    "nonCashBenefits"
                  ],
                  "properties": {
                    "nonCashBenefits": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "nonCashBenefitsID",
                          "benefitsFromAnySource",
                          "otherSource",
                          "otherSourceIdentify",
                          "otherTanf",
                          "rentalAssistanceOngoing",
                          "rentalAssistanceTemp",
                          "snap",
                          "tanfChildcare",
                          "tanfTransportation",
                          "wic",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "nonCashBenefitsID": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "benefitsFromAnySource": {
                            "type": "integer"
                          },
                          "otherSource": {
                            "type": "integer"
                          },
                          "otherSourceIdentify": {
                            "type": "string",
                          },
                          "otherTanf": {
                            "type": "integer"
                          },
                          "rentalAssistanceOngoing": {
                            "type": "integer"
                          },
                          "rentalAssistanceTemp": {
                            "type": "integer"
                          },
                          "snap": {
                            "type": "integer"
                          },
                          "tanfChildcare": {
                            "type": "integer"
                          },
                          "tanfTransportation": {
                            "type": "integer"
                          },
                          "wic": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a noncashbenefit using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-noncashbenefits-noncashbenefitid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific noncashbenefit specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-noncashbenefits-noncashbenefitid
      requestBody:
        content:
          application/json:
            example:
              nonCashBenefits:
                    benefitsFromAnySource: 0
                    otherSource: 99
                    otherSourceIdentify: test
                    otherTanf: 0
                    rentalAssistanceOngoing: 0
                    rentalAssistanceTemp: 0
                    snap: 0
                    tanfChildcare: 0
                    tanfTransportation: 0
                    wic: 0
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
            schema:
              {
                "type": "object",
                "required": [
                  "nonCashBenefits"
                ],
                "properties": {
                  "nonCashBenefits": {
                    "type": "object",
                    "required": [
                      "benefitsFromAnySource",
                      "otherSource",
                      "otherSourceIdentify",
                      "otherTanf",
                      "rentalAssistanceOngoing",
                      "rentalAssistanceTemp",
                      "snap",
                      "tanfChildcare",
                      "tanfTransportation",
                      "wic",
                      "dataCollectionStage",
                      "informationDate"
                    ],
                    "properties": {
                      "benefitsFromAnySource": {
                        "type": "integer"
                      },
                      "otherSource": {
                        "type": "integer"
                      },
                      "otherSourceIdentify": {
                        "type": "string",
                      },
                      "otherTanf": {
                        "type": "integer"
                      },
                      "rentalAssistanceOngoing": {
                        "type": "integer"
                      },
                      "rentalAssistanceTemp": {
                        "type": "integer"
                      },
                      "snap": {
                        "type": "integer"
                      },
                      "tanfChildcare": {
                        "type": "integer"
                      },
                      "tanfTransportation": {
                        "type": "integer"
                      },
                      "wic": {
                        "type": "integer"
                      },
                      "dataCollectionStage": {
                        "type": "integer"
                      },
                      "informationDate": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific noncashbenefit specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-noncashbenefits-noncashbenefitid
    parameters:
      - name: noncashbenefitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Noncashbenefit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits/{noncashbenefitid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                nonCashBenefitsList:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  nonCashBenefitsList:
                    - nonCashBenefitsID: 80dfa67e-bf60-4227-822f-6d3850d9c5e5
                      benefitsFromAnySource: 0
                      otherSource: 99
                      otherSourceIdentify: test
                      otherTanf: 0
                      rentalAssistanceOngoing: 0
                      rentalAssistanceTemp: 0
                      snap: 0
                      tanfChildcare: 0
                      tanfTransportation: 0
                      wic: 0
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
              schema:
                {
                  "type": "object",
                  "required": [
                    "nonCashBenefitsList"
                  ],
                  "properties": {
                    "nonCashBenefitsList": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "nonCashBenefitsList"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "nonCashBenefitsList": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "nonCashBenefitsID",
                              "benefitsFromAnySource",
                              "otherSource",
                              "otherSourceIdentify",
                              "otherTanf",
                              "rentalAssistanceOngoing",
                              "rentalAssistanceTemp",
                              "snap",
                              "tanfChildcare",
                              "tanfTransportation",
                              "wic",
                              "dataCollectionStage",
                              "informationDate"
                            ],
                            "properties": {
                              "nonCashBenefitsID": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "benefitsFromAnySource": {
                                "type": "integer"
                              },
                              "otherSource": {
                                "type": "integer"
                              },
                              "otherSourceIdentify": {
                                "type": "string",
                              },
                              "otherTanf": {
                                "type": "integer"
                              },
                              "rentalAssistanceOngoing": {
                                "type": "integer"
                              },
                              "rentalAssistanceTemp": {
                                "type": "integer"
                              },
                              "snap": {
                                "type": "integer"
                              },
                              "tanfChildcare": {
                                "type": "integer"
                              },
                              "tanfTransportation": {
                                "type": "integer"
                              },
                              "wic": {
                                "type": "integer"
                              },
                              "dataCollectionStage": {
                                "type": "integer"
                              },
                              "informationDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for noncashbenefit history.  Returns a list of noncashbenefit ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-noncashbenefits-noncashbenefitid-history
    parameters:
      - name: noncashbenefitid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Noncashbenefit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveindates':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                residentialMoveinDates:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  residentialMoveinDates:
                    - residentialMoveinDateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                      inPermanentHousing: 0
                      residentialMoveinDate: 04-05-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "residentialMoveinDates"
                  ],
                  "properties": {
                    "residentialMoveinDates": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "residentialMoveinDates"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "residentialMoveinDates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "residentialMoveinDateId",
                              "inPermanentHousing",
                              "residentialMoveinDate"
                            ],
                            "properties": {
                              "residentialMoveinDateId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "inPermanentHousing": {
                                "type": "integer"
                              },
                              "residentialMoveinDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for residentialMoveinDate.  Returns a list of
        residentialMoveinDate ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-residentialMoveinDates

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "residentialMoveinDate"
                    ],
                    "properties": {
                      "residentialMoveinDate": {
                        "type": "object",
                        "required": [
                          "residentialMoveinDateId",
                          "inPermanentHousing"
                        ],
                        "properties": {
                          "residentialMoveinDateId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "inPermanentHousing": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  residentialMoveinDate:
                    residentialMoveinDateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                    inPermanentHousing: 0
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a residentialMoveinDate
      operationId: POST_clients-clientId-enrollments-enrollmentId-residentialMoveinDates
      requestBody:
        content:
          application/json:
            example:
              residentialMoveinDate:
                residentialMoveinDateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                inPermanentHousing: 0
            schema:
              {
                "type": "object",
                "required": [
                  "residentialMoveinDate"
                ],
                "properties": {
                  "residentialMoveinDate": {
                    "type": "object",
                    "required": [
                      "residentialMoveinDateId",
                      "inPermanentHousing"
                    ],
                    "properties": {
                      "residentialMoveinDateId": {
                        "type": "string",
                        "format": "uuid",
                      },
                      "inPermanentHousing": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveindates/{residentialmoveindateid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                residentialMoveinDate:
                  residentialMoveinDateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                  inPermanentHousing: 0
              schema:
                {
                  "type": "object",
                  "required": [
                    "residentialMoveinDate"
                  ],
                  "properties": {
                    "residentialMoveinDate": {
                      "type": "object",
                      "required": [
                        "residentialMoveinDateId",
                        "inPermanentHousing"
                      ],
                      "properties": {
                        "residentialMoveinDateId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "inPermanentHousing": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a residentialMoveinDate using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-residentialMoveinDates-residentialMoveinDateid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific residentialMoveinDate specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-residentialMoveinDates-residentialMoveinDateid
      requestBody:
        content:
          application/json:
            example:
              residentialMoveinDate:
                inPermanentHousing: 0
                residentialMoveinDate: '04-05-2020 11:12'
            schema:
              {
                "type": "object",
                "required": [
                  "residentialMoveinDate"
                ],
                "properties": {
                  "residentialMoveinDate": {
                    "type": "object",
                    "required": [
                      "inPermanentHousing",
                      "residentialMoveinDate"
                    ],
                    "properties": {
                      "inPermanentHousing": {
                        "type": "integer"
                      },
                      "residentialMoveinDate": {
                        "type": "string",
                        "format": "MM-dd-YYYY HH:mm",
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific residentialMoveinDate specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-residentialMoveinDates-residentialMoveinDateid
    parameters:
      - name: residentialmoveindateid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: residentialMoveinDate Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveindates/{residentialmoveindateid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                residentialMoveinDates:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  residentialMoveinDates:
                    - residentialMoveinDateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                      inPermanentHousing: 0
                      residentialMoveinDate: 04-05-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "residentialMoveinDates"
                  ],
                  "properties": {
                    "residentialMoveinDates": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "residentialMoveinDates"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "residentialMoveinDates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "residentialMoveinDateId",
                              "inPermanentHousing",
                              "residentialMoveinDate"
                            ],
                            "properties": {
                              "residentialMoveinDateId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "inPermanentHousing": {
                                "type": "integer"
                              },
                              "residentialMoveinDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for residentialMoveinDate history.  Returns a list of
        residentialMoveinDate ids history, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-residentialMoveinDates-residentialMoveinDateid-history
    parameters:
      - name: residentialmoveindateid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: residentialMoveinDate Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialMoveinDates':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                residentialMoveinDates:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  residentialMoveinDates:
                    - residentialMoveinDateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                      inPermanentHousing: 0
                      residentialMoveinDate: 04-05-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "residentialMoveinDates"
                  ],
                  "properties": {
                    "residentialMoveinDates": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "residentialMoveinDates"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "residentialMoveinDates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "residentialMoveinDateId",
                              "inPermanentHousing",
                              "residentialMoveinDate"
                            ],
                            "properties": {
                              "residentialMoveinDateId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "inPermanentHousing": {
                                "type": "integer"
                              },
                              "residentialMoveinDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for residentialMoveinDate.  Returns a list of
        residentialMoveinDate ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-residentialMoveinDates

    post:
      deprecated: true
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "residentialMoveinDate"
                    ],
                    "properties": {
                      "residentialMoveinDate": {
                        "type": "object",
                        "required": [
                          "residentialMoveinDateId",
                          "inPermanentHousing"
                        ],
                        "properties": {
                          "residentialMoveinDateId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "inPermanentHousing": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  residentialMoveinDate:
                    residentialMoveinDateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                    inPermanentHousing: 0
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a residentialMoveinDate
      operationId: POST_dep_clients-clientId-enrollments-enrollmentId-residentialMoveinDates
      requestBody:
        content:
          application/json:
            example:
              residentialMoveinDate:
                residentialMoveinDateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                inPermanentHousing: 0
            schema:
              {
                "type": "object",
                "required": [
                  "residentialMoveinDate"
                ],
                "properties": {
                  "residentialMoveinDate": {
                    "type": "object",
                    "required": [
                      "residentialMoveinDateId",
                      "inPermanentHousing"
                    ],
                    "properties": {
                      "residentialMoveinDateId": {
                        "type": "string",
                        "format": "uuid",
                      },
                      "inPermanentHousing": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialMoveinDates/{residentialmoveindateid}':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                residentialMoveinDate:
                  residentialMoveinDateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                  inPermanentHousing: 0
              schema:
                {
                  "type": "object",
                  "required": [
                    "residentialMoveinDate"
                  ],
                  "properties": {
                    "residentialMoveinDate": {
                      "type": "object",
                      "required": [
                        "residentialMoveinDateId",
                        "inPermanentHousing"
                      ],
                      "properties": {
                        "residentialMoveinDateId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "inPermanentHousing": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a residentialMoveinDate using a URI resource parameter/ID.
      operationId: >-
        GET_dep_clients-clientId-enrollments-enrollmentId-residentialMoveinDates-residentialMoveinDateid
    put:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific residentialMoveinDate specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_dep_clients-clientId-enrollments-enrollmentId-residentialMoveinDates-residentialMoveinDateid
      requestBody:
        content:
          application/json:
            example:
              residentialMoveinDate:
                inPermanentHousing: 0
                residentialMoveinDate: '04-05-2020 11:12'
            schema:
              {
                "type": "object",
                "required": [
                  "residentialMoveinDate"
                ],
                "properties": {
                  "residentialMoveinDate": {
                    "type": "object",
                    "required": [
                      "inPermanentHousing",
                      "residentialMoveinDate"
                    ],
                    "properties": {
                      "inPermanentHousing": {
                        "type": "integer"
                      },
                      "residentialMoveinDate": {
                        "type": "string",
                        "format": "MM-dd-YYYY HH:mm",
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      deprecated: true
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific residentialMoveinDate specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_dep_clients-clientId-enrollments-enrollmentId-residentialMoveinDates-residentialMoveinDateid
    parameters:
      - name: residentialmoveindateid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: residentialMoveinDate Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialMoveinDates/{residentialmoveindateid}/history':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                residentialMoveinDates:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  residentialMoveinDates:
                    - residentialMoveinDateId: 37775c5e-72ea-4b1d-92ad-91c76decebd1
                      inPermanentHousing: 0
                      residentialMoveinDate: 04-05-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "residentialMoveinDates"
                  ],
                  "properties": {
                    "residentialMoveinDates": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "residentialMoveinDates"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "residentialMoveinDates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "residentialMoveinDateId",
                              "inPermanentHousing",
                              "residentialMoveinDate"
                            ],
                            "properties": {
                              "residentialMoveinDateId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "inPermanentHousing": {
                                "type": "integer"
                              },
                              "residentialMoveinDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for residentialMoveinDate history.  Returns a list of
        residentialMoveinDate ids history, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-residentialMoveinDates-residentialMoveinDateid-history
    parameters:
      - name: residentialmoveindateid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: residentialMoveinDate Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                pathStatuses:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  pathStatuses:
                    - pathStatusId: 5c70ea90-df48-4a5a-8d48-6fee70e3c4ec
                      clientEnrolledInPath: 123545
                      reasonNotEnrolled: 99
                      dateOfStatus: 04-16-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "pathStatuses"
                  ],
                  "properties": {
                    "pathStatuses": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "pathStatuses"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "pathStatuses": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "pathStatusId",
                              "clientEnrolledInPath",
                              "reasonNotEnrolled",
                              "dateOfStatus"
                            ],
                            "properties": {
                              "pathStatusId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "clientEnrolledInPath": {
                                "type": "integer"
                              },
                              "reasonNotEnrolled": {
                                "type": "integer"
                              },
                              "dateOfStatus": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for pathstatus.  Returns a list of pathstatus ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-pathstatuses

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "pathStatus"
                    ],
                    "properties": {
                      "pathStatus": {
                        "type": "object",
                        "required": [
                          "pathStatusId",
                          "clientEnrolledInPath",
                          "reasonNotEnrolled",
                          "dateOfStatus"
                        ],
                        "properties": {
                          "pathStatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientEnrolledInPath": {
                            "type": "integer"
                          },
                          "reasonNotEnrolled": {
                            "type": "integer"
                          },
                          "dateOfStatus": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  pathStatus:
                    pathStatusId: 5c70ea90-df48-4a5a-8d48-6fee70e3c4ec
                    clientEnrolledInPath: 123545
                    reasonNotEnrolled: 99
                    dateOfStatus: 04-16-2020
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a pathstatus
      operationId: POST_clients-clientId-enrollments-enrollmentId-pathstatuses
      requestBody:
        content:
          application/json:
            example:
              pathStatus:
                clientEnrolledInPath: -170011723306562560
                dateOfStatus: '04-16-2020 11:11'
                reasonNotEnrolled: 99
            schema:
              {
                "type": "object",
                "required": [
                  "pathStatus"
                ],
                "properties": {
                  "pathStatus": {
                    "type": "object",
                    "required": [
                      "clientEnrolledInPath",
                      "dateOfStatus",
                      "reasonNotEnrolled"
                    ],
                    "properties": {
                      "clientEnrolledInPath": {
                        "type": "integer"
                      },
                      "dateOfStatus": {
                        "type": "string",
                        "format": "MM-dd-YYYY HH:mm",
                      },
                      "reasonNotEnrolled": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses/{pathstatusid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                pathStatus:
                  pathstatusId: 5c70ea90-df48-4a5a-8d48-6fee70e3c4ec
                  clientEnrolledInPath: 123545
                  reasonNotEnrolled: 99
                  dateOfStatus: 04-16-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "pathStatus"
                  ],
                  "properties": {
                    "pathStatus": {
                      "type": "object",
                      "required": [
                        "pathstatusId",
                        "clientEnrolledInPath",
                        "reasonNotEnrolled",
                        "dateOfStatus"
                      ],
                      "properties": {
                        "pathstatusId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "clientEnrolledInPath": {
                          "type": "integer"
                        },
                        "reasonNotEnrolled": {
                          "type": "integer"
                        },
                        "dateOfStatus": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a pathstatus using a URI resource parameter/ID.
      operationId: GET_clients-clientId-enrollments-enrollmentId-pathstatuses-pathstatusid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific pathstatus specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientId-enrollments-enrollmentId-pathstatuses-pathstatusid
      requestBody:
        content:
          application/json:
            example:
              pathStatus:
                clientEnrolledInPath: -170011723306562560
                dateOfStatus: '04-16-2020 11:11'
                reasonNotEnrolled: 99
            schema:
              {
                "type": "object",
                "required": [
                  "pathStatus"
                ],
                "properties": {
                  "pathStatus": {
                    "type": "object",
                    "required": [
                      "clientEnrolledInPath",
                      "dateOfStatus",
                      "reasonNotEnrolled"
                    ],
                    "properties": {
                      "clientEnrolledInPath": {
                        "type": "integer"
                      },
                      "dateOfStatus": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      },
                      "reasonNotEnrolled": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific pathstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-pathstatuses-pathstatusid
    parameters:
      - name: pathstatusid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Pathstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses/{pathstatusid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                pathStatuses:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  pathStatuses:
                    - pathStatusId: 5c70ea90-df48-4a5a-8d48-6fee70e3c4ec
                      clientEnrolledInPath: 123545
                      reasonNotEnrolled: 99
                      dateOfStatus: 04-16-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "pathStatuses"
                  ],
                  "properties": {
                    "pathStatuses": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "pathStatuses"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "pathStatuses": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "pathStatusId",
                              "clientEnrolledInPath",
                              "reasonNotEnrolled",
                              "dateOfStatus"
                            ],
                            "properties": {
                              "pathStatusId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "clientEnrolledInPath": {
                                "type": "integer"
                              },
                              "reasonNotEnrolled": {
                                "type": "integer"
                              },
                              "dateOfStatus": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for pathstatus history.  Returns a list of pathstatus ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-pathstatuses-pathstatusid-history
    parameters:
      - name: pathstatusid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Pathstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryrhsps':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                entryRhsps:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  entryRhsps:
                    - entryRhspId: 4fe746e5-0323-46b9-866f-209d81dbda51
                      worstHousingSituation: 781317225
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryRhsps"
                  ],
                  "properties": {
                    "entryRhsps": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "entryRhsps"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "entryRhsps": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "entryRhspId",
                              "worstHousingSituation"
                            ],
                            "properties": {
                              "entryRhspId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "worstHousingSituation": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryRhsp.  Returns a list of entryRhsp ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-entryRhsps

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "entryRhsp"
                    ],
                    "properties": {
                      "entryRhsp": {
                        "type": "object",
                        "required": [
                          "entryRhspId",
                          "worstHousingSituation"
                        ],
                        "properties": {
                          "entryRhspId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "worstHousingSituation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  entryRhsp:
                    entryRhspId: c10f31e4-9e09-4fab-b788-e89fc074c9f8
                    worstHousingSituation: 781317225
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a entryRhsp
      operationId: POST_clients-clientId-enrollments-enrollmentId-entryRhsps
      requestBody:
        content:
          application/json:
            example:
              entryRhsp:
                worstHousingSituation: 781317225
            schema:
              {
                "type": "object",
                "required": [
                  "entryRhsp"
                ],
                "properties": {
                  "entryRhsp": {
                    "type": "object",
                    "required": [
                      "worstHousingSituation"
                    ],
                    "properties": {
                      "worstHousingSituation": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryrhsps/{entryrhspid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                entryRhsp:
                  entryRhspId: c10f31e4-9e09-4fab-b788-e89fc074c9f8
                  worstHousingSituation: 781317225
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryRhsp"
                  ],
                  "properties": {
                    "entryRhsp": {
                      "type": "object",
                      "required": [
                        "entryRhspId",
                        "worstHousingSituation"
                      ],
                      "properties": {
                        "entryRhspId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "worstHousingSituation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a entryRhsp using a URI resource parameter/ID.
      operationId: GET_clients-clientId-enrollments-enrollmentId-entryRhsps-entryRhspId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific entryRhsp specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientId-enrollments-enrollmentId-entryRhsps-entryRhspId
      requestBody:
        content:
          application/json:
            example:
              entryRhsp:
                worstHousingSituation: 781317225
            schema:
              {
                "type": "object",
                "required": [
                  "entryRhsp"
                ],
                "properties": {
                  "entryRhsp": {
                    "type": "object",
                    "required": [
                      "worstHousingSituation"
                    ],
                    "properties": {
                      "worstHousingSituation": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific entryRhsp specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientId-enrollments-enrollmentId-entryRhsps-entryRhspId
    parameters:
      - name: entryrhspid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: entryRhsp Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryrhsps/{entryrhspid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                entryRhsps:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  entryRhsps:
                    - entryRhspId: 4fe746e5-0323-46b9-866f-209d81dbda51
                      worstHousingSituation: 781317225
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryRhsps"
                  ],
                  "properties": {
                    "entryRhsps": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "entryRhsps"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "entryRhsps": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "entryRhspId",
                              "worstHousingSituation"
                            ],
                            "properties": {
                              "entryRhspId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "worstHousingSituation": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryRhsp history.  Returns a list of entryRhsp ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-entryRhsps-entryRhspId-history
    parameters:
      - name: entryrhspid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: entryRhsp Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryRhsps':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                entryRhsps:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  entryRhsps:
                    - entryRhspId: 4fe746e5-0323-46b9-866f-209d81dbda51
                      worstHousingSituation: 781317225
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryRhsps"
                  ],
                  "properties": {
                    "entryRhsps": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "entryRhsps"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "entryRhsps": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "entryRhspId",
                              "worstHousingSituation"
                            ],
                            "properties": {
                              "entryRhspId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "worstHousingSituation": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryRhsp.  Returns a list of entryRhsp ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-entryRhsps

    post:
      deprecated: true
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "entryRhsp"
                    ],
                    "properties": {
                      "entryRhsp": {
                        "type": "object",
                        "required": [
                          "entryRhspId",
                          "worstHousingSituation"
                        ],
                        "properties": {
                          "entryRhspId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "worstHousingSituation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  entryRhsp:
                    entryRhspId: c10f31e4-9e09-4fab-b788-e89fc074c9f8
                    worstHousingSituation: 781317225
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a entryRhsp
      operationId: POST_dep_clients-clientId-enrollments-enrollmentId-entryRhsps
      requestBody:
        content:
          application/json:
            example:
              entryRhsp:
                worstHousingSituation: 781317225
            schema:
              {
                "type": "object",
                "required": [
                  "entryRhsp"
                ],
                "properties": {
                  "entryRhsp": {
                    "type": "object",
                    "required": [
                      "worstHousingSituation"
                    ],
                    "properties": {
                      "worstHousingSituation": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryRhsps/{entryrhspid}':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                entryRhsp:
                  entryRhspId: c10f31e4-9e09-4fab-b788-e89fc074c9f8
                  worstHousingSituation: 781317225
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryRhsp"
                  ],
                  "properties": {
                    "entryRhsp": {
                      "type": "object",
                      "required": [
                        "entryRhspId",
                        "worstHousingSituation"
                      ],
                      "properties": {
                        "entryRhspId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "worstHousingSituation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a entryRhsp using a URI resource parameter/ID.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-entryRhsps-entryRhspId
    put:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific entryRhsp specified by the URI resource parameter/ID.
      operationId: PUT_dep_clients-clientId-enrollments-enrollmentId-entryRhsps-entryRhspId
      requestBody:
        content:
          application/json:
            example:
              entryRhsp:
                worstHousingSituation: 781317225
            schema:
              {
                "type": "object",
                "required": [
                  "entryRhsp"
                ],
                "properties": {
                  "entryRhsp": {
                    "type": "object",
                    "required": [
                      "worstHousingSituation"
                    ],
                    "properties": {
                      "worstHousingSituation": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      deprecated: true
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific entryRhsp specified by the URI resource parameter/ID.
      operationId: DELETE_dep_clients-clientId-enrollments-enrollmentId-entryRhsps-entryRhspId
    parameters:
      - name: entryrhspid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: entryRhsp Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryRhsps/{entryrhspid}/history':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                entryRhsps:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  entryRhsps:
                    - entryRhspId: 4fe746e5-0323-46b9-866f-209d81dbda51
                      worstHousingSituation: 781317225
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryRhsps"
                  ],
                  "properties": {
                    "entryRhsps": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "entryRhsps"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "entryRhsps": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "entryRhspId",
                              "worstHousingSituation"
                            ],
                            "properties": {
                              "entryRhspId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "worstHousingSituation": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryRhsp history.  Returns a list of entryRhsp ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-entryRhsps-entryRhspId-history
    parameters:
      - name: entryrhspid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: entryRhsp Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryrhys':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                entryrhys:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  entryrhys:
                    - entryrhyId: 6304041b-b997-4b01-9987-63d7e78070f1
                      formerlyWardChildWelfrForestCare: 99
                      yearsChildWelfrForestCare: 2
                      monthsChildWelfrForestCare: 4538
                      formerlyWardOfJuvenileJustice: 8
                      yearsJuvenileJustice: 3
                      houseHoldDynamics: 1
                      sexualOrientatiionGenderIdentityYouth: 99
                      sexualOrientatiionGenderIdentityFamilyMbr: 1
                      housingIssuesYouth: 99
                      housingIssuesFamilyMbr: 1
                      schoolEducationIssuesYouth: 99
                      schoolEducationIssuesFamilyMbr: 1
                      unemployementYouth: 99
                      unemployementFamilyMbr: 1
                      mentalHealthIssuesYouth: 99
                      mentalHealthIssuesFamilyMbr: 1
                      healthIssuesYouth: 1
                      healthIssuesFamilyMbr: 99
                      physicalDisabilityYouth: 1
                      physicalDisabilityFamilyMbr: 99
                      mentalDisabilityYouth: 99
                      mentalDisabilityFamilyMbr: 99
                      abuseAndNeglectYouth: 99
                      abuseAndNeglectFamilyMbr: 99
                      alcoholDrugAbuseYouth: 99
                      alcoholDrugAbuseFamilyMbr: 99
                      insufficientIncomeToSupportYouth: 1
                      activeMilitaryParent: 1
                      incarceratedParent: 1
                      incarceratedParentStatus: 3
                      referralSource: 663
                      countOutReachReferralApproaches: 234
                      exchangeForSex: 8
                      exchangeForSexPastThreeMonths: 9
                      countOfExchangeForSex: 4
                      askedOfForcedToExchangeForSex: 8
                      askedOfForcedToExchangeForSexPastThreeMonths: 8
                      workPlaceViolenceThreat: 1
                      workPlacePromiseDifference: 8
                      coercedToContinueWork: 9
                      laborExploitPastThreeMonths: 420
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryrhys"
                  ],
                  "properties": {
                    "entryrhys": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "entryrhys"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "entryrhys": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "entryrhyId",
                              "formerlyWardChildWelfrForestCare",
                              "yearsChildWelfrForestCare",
                              "monthsChildWelfrForestCare",
                              "formerlyWardOfJuvenileJustice",
                              "yearsJuvenileJustice",
                              "houseHoldDynamics",
                              "sexualOrientatiionGenderIdentityYouth",
                              "sexualOrientatiionGenderIdentityFamilyMbr",
                              "housingIssuesYouth",
                              "housingIssuesFamilyMbr",
                              "schoolEducationIssuesYouth",
                              "schoolEducationIssuesFamilyMbr",
                              "unemployementYouth",
                              "unemployementFamilyMbr",
                              "mentalHealthIssuesYouth",
                              "mentalHealthIssuesFamilyMbr",
                              "healthIssuesYouth",
                              "healthIssuesFamilyMbr",
                              "physicalDisabilityYouth",
                              "physicalDisabilityFamilyMbr",
                              "mentalDisabilityYouth",
                              "mentalDisabilityFamilyMbr",
                              "abuseAndNeglectYouth",
                              "abuseAndNeglectFamilyMbr",
                              "alcoholDrugAbuseYouth",
                              "alcoholDrugAbuseFamilyMbr",
                              "insufficientIncomeToSupportYouth",
                              "activeMilitaryParent",
                              "incarceratedParent",
                              "incarceratedParentStatus",
                              "referralSource",
                              "countOutReachReferralApproaches",
                              "exchangeForSex",
                              "exchangeForSexPastThreeMonths",
                              "countOfExchangeForSex",
                              "askedOfForcedToExchangeForSex",
                              "askedOfForcedToExchangeForSexPastThreeMonths",
                              "workPlaceViolenceThreat",
                              "workPlacePromiseDifference",
                              "coercedToContinueWork",
                              "laborExploitPastThreeMonths",
                              "dataCollectionStage",
                              "informationDate"
                            ],
                            "properties": {
                              "entryrhyId": {
                                "type": "string",
                              },
                              "formerlyWardChildWelfrForestCare": {
                                "type": "integer"
                              },
                              "yearsChildWelfrForestCare": {
                                "type": "integer"
                              },
                              "monthsChildWelfrForestCare": {
                                "type": "integer"
                              },
                              "formerlyWardOfJuvenileJustice": {
                                "type": "integer"
                              },
                              "yearsJuvenileJustice": {
                                "type": "integer"
                              },
                              "houseHoldDynamics": {
                                "type": "integer"
                              },
                              "sexualOrientatiionGenderIdentityYouth": {
                                "type": "integer"
                              },
                              "sexualOrientatiionGenderIdentityFamilyMbr": {
                                "type": "integer"
                              },
                              "housingIssuesYouth": {
                                "type": "integer"
                              },
                              "housingIssuesFamilyMbr": {
                                "type": "integer"
                              },
                              "schoolEducationIssuesYouth": {
                                "type": "integer"
                              },
                              "schoolEducationIssuesFamilyMbr": {
                                "type": "integer"
                              },
                              "unemployementYouth": {
                                "type": "integer"
                              },
                              "unemployementFamilyMbr": {
                                "type": "integer"
                              },
                              "mentalHealthIssuesYouth": {
                                "type": "integer"
                              },
                              "mentalHealthIssuesFamilyMbr": {
                                "type": "integer"
                              },
                              "healthIssuesYouth": {
                                "type": "integer"
                              },
                              "healthIssuesFamilyMbr": {
                                "type": "integer"
                              },
                              "physicalDisabilityYouth": {
                                "type": "integer"
                              },
                              "physicalDisabilityFamilyMbr": {
                                "type": "integer"
                              },
                              "mentalDisabilityYouth": {
                                "type": "integer"
                              },
                              "mentalDisabilityFamilyMbr": {
                                "type": "integer"
                              },
                              "abuseAndNeglectYouth": {
                                "type": "integer"
                              },
                              "abuseAndNeglectFamilyMbr": {
                                "type": "integer"
                              },
                              "alcoholDrugAbuseYouth": {
                                "type": "integer"
                              },
                              "alcoholDrugAbuseFamilyMbr": {
                                "type": "integer"
                              },
                              "insufficientIncomeToSupportYouth": {
                                "type": "integer"
                              },
                              "activeMilitaryParent": {
                                "type": "integer"
                              },
                              "incarceratedParent": {
                                "type": "integer"
                              },
                              "incarceratedParentStatus": {
                                "type": "integer"
                              },
                              "referralSource": {
                                "type": "integer"
                              },
                              "countOutReachReferralApproaches": {
                                "type": "integer"
                              },
                              "exchangeForSex": {
                                "type": "integer"
                              },
                              "exchangeForSexPastThreeMonths": {
                                "type": "integer"
                              },
                              "countOfExchangeForSex": {
                                "type": "integer"
                              },
                              "askedOfForcedToExchangeForSex": {
                                "type": "integer"
                              },
                              "askedOfForcedToExchangeForSexPastThreeMonths": {
                                "type": "integer"
                              },
                              "workPlaceViolenceThreat": {
                                "type": "integer"
                              },
                              "workPlacePromiseDifference": {
                                "type": "integer"
                              },
                              "coercedToContinueWork": {
                                "type": "integer"
                              },
                              "laborExploitPastThreeMonths": {
                                "type": "integer"
                              },
                              "dataCollectionStage": {
                                "type": "integer"
                              },
                              "informationDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryrhy.  Returns a list of entryrhy ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-entryrhys

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "entryrhy"
                    ],
                    "properties": {
                      "entryrhy": {
                        "type": "object",
                        "required": [
                          "entryrhyId",
                          "formerlyWardChildWelfrForestCare",
                          "yearsChildWelfrForestCare",
                          "monthsChildWelfrForestCare",
                          "formerlyWardOfJuvenileJustice",
                          "yearsJuvenileJustice",
                          "houseHoldDynamics",
                          "sexualOrientationGenderIdentityYouth",
                          "sexualOrientationGenderIdentityFamilyMbr",
                          "housingIssuesYouth",
                          "housingIssuesFamilyMbr",
                          "schoolEducationIssuesYouth",
                          "schoolEducationIssuesFamilyMbr",
                          "unemployementYouth",
                          "unemployementFamilyMbr",
                          "mentalHealthIssuesYouth",
                          "mentalHealthIssuesFamilyMbr",
                          "healthIssuesYouth",
                          "healthIssuesFamilyMbr",
                          "physicalDisabilityYouth",
                          "physicalDisabilityFamilyMbr",
                          "mentalDisabilityYouth",
                          "mentalDisabilityFamilyMbr",
                          "abuseAndNeglectYouth",
                          "abuseAndNeglectFamilyMbr",
                          "alcoholDrugAbuseYouth",
                          "alcoholDrugAbuseFamilyMbr",
                          "insufficientIncomeToSupportYouth",
                          "activeMilitaryParent",
                          "incarceratedParent",
                          "incarceratedParentStatus",
                          "referralSource",
                          "countOutReachReferralApproaches",
                          "exchangeForSex",
                          "exchangeForSexPastThreeMonths",
                          "countOfExchangeForSex",
                          "askedOfForcedToExchangeForSex",
                          "askedOfForcedToExchangeForSexPastThreeMonths",
                          "workPlaceViolenceThreat",
                          "workPlacePromiseDifference",
                          "coercedToContinueWork",
                          "laborExploitPastThreeMonths",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "entryrhyId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "formerlyWardChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "yearsChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "monthsChildWelfrForestCare": {
                            "type": "integer"
                          },
                          "formerlyWardOfJuvenileJustice": {
                            "type": "integer"
                          },
                          "yearsJuvenileJustice": {
                            "type": "integer"
                          },
                          "houseHoldDynamics": {
                            "type": "integer"
                          },
                          "sexualOrientationGenderIdentityYouth": {
                            "type": "integer"
                          },
                          "sexualOrientationGenderIdentityFamilyMbr": {
                            "type": "integer"
                          },
                          "housingIssuesYouth": {
                            "type": "integer"
                          },
                          "housingIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "schoolEducationIssuesYouth": {
                            "type": "integer"
                          },
                          "schoolEducationIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "unemployementYouth": {
                            "type": "integer"
                          },
                          "unemployementFamilyMbr": {
                            "type": "integer"
                          },
                          "mentalHealthIssuesYouth": {
                            "type": "integer"
                          },
                          "mentalHealthIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "healthIssuesYouth": {
                            "type": "integer"
                          },
                          "healthIssuesFamilyMbr": {
                            "type": "integer"
                          },
                          "physicalDisabilityYouth": {
                            "type": "integer"
                          },
                          "physicalDisabilityFamilyMbr": {
                            "type": "integer"
                          },
                          "mentalDisabilityYouth": {
                            "type": "integer"
                          },
                          "mentalDisabilityFamilyMbr": {
                            "type": "integer"
                          },
                          "abuseAndNeglectYouth": {
                            "type": "integer"
                          },
                          "abuseAndNeglectFamilyMbr": {
                            "type": "integer"
                          },
                          "alcoholDrugAbuseYouth": {
                            "type": "integer"
                          },
                          "alcoholDrugAbuseFamilyMbr": {
                            "type": "integer"
                          },
                          "insufficientIncomeToSupportYouth": {
                            "type": "integer"
                          },
                          "activeMilitaryParent": {
                            "type": "integer"
                          },
                          "incarceratedParent": {
                            "type": "integer"
                          },
                          "incarceratedParentStatus": {
                            "type": "integer"
                          },
                          "referralSource": {
                            "type": "integer"
                          },
                          "countOutReachReferralApproaches": {
                            "type": "integer"
                          },
                          "exchangeForSex": {
                            "type": "integer"
                          },
                          "exchangeForSexPastThreeMonths": {
                            "type": "integer"
                          },
                          "countOfExchangeForSex": {
                            "type": "integer"
                          },
                          "askedOfForcedToExchangeForSex": {
                            "type": "integer"
                          },
                          "askedOfForcedToExchangeForSexPastThreeMonths": {
                            "type": "integer"
                          },
                          "workPlaceViolenceThreat": {
                            "type": "integer"
                          },
                          "workPlacePromiseDifference": {
                            "type": "integer"
                          },
                          "coercedToContinueWork": {
                            "type": "integer"
                          },
                          "laborExploitPastThreeMonths": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  entryrhy:
                    entryrhyId: 6304041b-b997-4b01-9987-63d7e78070f1
                    formerlyWardChildWelfrForestCare: 99
                    yearsChildWelfrForestCare: 2
                    monthsChildWelfrForestCare: 4538
                    formerlyWardOfJuvenileJustice: 8
                    yearsJuvenileJustice: 3
                    houseHoldDynamics: 1
                    sexualOrientationGenderIdentityYouth: 99
                    sexualOrientationGenderIdentityFamilyMbr: 1
                    housingIssuesYouth: 99
                    housingIssuesFamilyMbr: 1
                    schoolEducationIssuesYouth: 99
                    schoolEducationIssuesFamilyMbr: 1
                    unemployementYouth: 99
                    unemployementFamilyMbr: 1
                    mentalHealthIssuesYouth: 99
                    mentalHealthIssuesFamilyMbr: 1
                    healthIssuesYouth: 1
                    healthIssuesFamilyMbr: 99
                    physicalDisabilityYouth: 1
                    physicalDisabilityFamilyMbr: 99
                    mentalDisabilityYouth: 99
                    mentalDisabilityFamilyMbr: 99
                    abuseAndNeglectYouth: 99
                    abuseAndNeglectFamilyMbr: 99
                    alcoholDrugAbuseYouth: 99
                    alcoholDrugAbuseFamilyMbr: 99
                    insufficientIncomeToSupportYouth: 1
                    activeMilitaryParent: 1
                    incarceratedParent: 1
                    incarceratedParentStatus: 3
                    referralSource: 663
                    countOutReachReferralApproaches: 234
                    exchangeForSex: 8
                    exchangeForSexPastThreeMonths: 9
                    countOfExchangeForSex: 4
                    askedOfForcedToExchangeForSex: 8
                    askedOfForcedToExchangeForSexPastThreeMonths: 8
                    workPlaceViolenceThreat: 1
                    workPlacePromiseDifference: 8
                    coercedToContinueWork: 9
                    laborExploitPastThreeMonths: 420
                    dataCollectionStage: 1
                    informationDate: 03-17-2016
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a entryrhy
      operationId: POST_clients-clientId-enrollments-enrollmentId-entryrhys
      requestBody:
        content:
          application/json:
            example:
              entryrhy:
                formerlyWardChildWelfrForestCare: 99
                yearsChildWelfrForestCare: 2
                monthsChildWelfrForestCare: 4538
                formerlyWardOfJuvenileJustice: 8
                yearsJuvenileJustice: 3
                houseHoldDynamics: 1
                sexualOrientatiionGenderIdentityYouth: 99
                sexualOrientatiionGenderIdentityFamilyMbr: 1
                housingIssuesYouth: 99
                housingIssuesFamilyMbr: 1
                schoolEducationIssuesYouth: 99
                schoolEducationIssuesFamilyMbr: 1
                unemployementYouth: 99
                unemployementFamilyMbr: 1
                mentalHealthIssuesYouth: 99
                mentalHealthIssuesFamilyMbr: 1
                healthIssuesYouth: 1
                healthIssuesFamilyMbr: 99
                physicalDisabilityYouth: 1
                physicalDisabilityFamilyMbr: 99
                mentalDisabilityYouth: 99
                mentalDisabilityFamilyMbr: 99
                abuseAndNeglectYouth: 99
                abuseAndNeglectFamilyMbr: 99
                alcoholDrugAbuseYouth: 99
                alcoholDrugAbuseFamilyMbr: 99
                insufficientIncomeToSupportYouth: 1
                activeMilitaryParent: 1
                incarceratedParent: 1
                incarceratedParentStatus: 3
                referralSource: 663
                countOutReachReferralApproaches: 234
                exchangeForSex: 8
                exchangeForSexPastThreeMonths: 9
                countOfExchangeForSex: 4
                askedOfForcedToExchangeForSex: 8
                askedOfForcedToExchangeForSexPastThreeMonths: 8
                workPlaceViolenceThreat: 1
                workPlacePromiseDifference: 8
                coercedToContinueWork: 9
                laborExploitPastThreeMonths: 420
                dataCollectionStage: 1
                informationDate: 03-17-2016
            schema:
              {
                "type": "object",
                "required": [
                  "entryrhy"
                ],
                "properties": {
                  "entryrhy": {
                    "type": "object",
                    "required": [
                      "formerlyWardChildWelfrForestCare",
                      "yearsChildWelfrForestCare",
                      "monthsChildWelfrForestCare",
                      "formerlyWardOfJuvenileJustice",
                      "yearsJuvenileJustice",
                      "houseHoldDynamics",
                      "sexualOrientatiionGenderIdentityYouth",
                      "sexualOrientatiionGenderIdentityFamilyMbr",
                      "housingIssuesYouth",
                      "housingIssuesFamilyMbr",
                      "schoolEducationIssuesYouth",
                      "schoolEducationIssuesFamilyMbr",
                      "unemployementYouth",
                      "unemployementFamilyMbr",
                      "mentalHealthIssuesYouth",
                      "mentalHealthIssuesFamilyMbr",
                      "healthIssuesYouth",
                      "healthIssuesFamilyMbr",
                      "physicalDisabilityYouth",
                      "physicalDisabilityFamilyMbr",
                      "mentalDisabilityYouth",
                      "mentalDisabilityFamilyMbr",
                      "abuseAndNeglectYouth",
                      "abuseAndNeglectFamilyMbr",
                      "alcoholDrugAbuseYouth",
                      "alcoholDrugAbuseFamilyMbr",
                      "insufficientIncomeToSupportYouth",
                      "activeMilitaryParent",
                      "incarceratedParent",
                      "incarceratedParentStatus",
                      "referralSource",
                      "countOutReachReferralApproaches",
                      "exchangeForSex",
                      "exchangeForSexPastThreeMonths",
                      "countOfExchangeForSex",
                      "askedOfForcedToExchangeForSex",
                      "askedOfForcedToExchangeForSexPastThreeMonths",
                      "workPlaceViolenceThreat",
                      "workPlacePromiseDifference",
                      "coercedToContinueWork",
                      "laborExploitPastThreeMonths",
                      "dataCollectionStage",
                      "informationDate"
                    ],
                    "properties": {
                      "formerlyWardChildWelfrForestCare": {
                        "type": "integer"
                      },
                      "yearsChildWelfrForestCare": {
                        "type": "integer"
                      },
                      "monthsChildWelfrForestCare": {
                        "type": "integer"
                      },
                      "formerlyWardOfJuvenileJustice": {
                        "type": "integer"
                      },
                      "yearsJuvenileJustice": {
                        "type": "integer"
                      },
                      "houseHoldDynamics": {
                        "type": "integer"
                      },
                      "sexualOrientatiionGenderIdentityYouth": {
                        "type": "integer"
                      },
                      "sexualOrientatiionGenderIdentityFamilyMbr": {
                        "type": "integer"
                      },
                      "housingIssuesYouth": {
                        "type": "integer"
                      },
                      "housingIssuesFamilyMbr": {
                        "type": "integer"
                      },
                      "schoolEducationIssuesYouth": {
                        "type": "integer"
                      },
                      "schoolEducationIssuesFamilyMbr": {
                        "type": "integer"
                      },
                      "unemployementYouth": {
                        "type": "integer"
                      },
                      "unemployementFamilyMbr": {
                        "type": "integer"
                      },
                      "mentalHealthIssuesYouth": {
                        "type": "integer"
                      },
                      "mentalHealthIssuesFamilyMbr": {
                        "type": "integer"
                      },
                      "healthIssuesYouth": {
                        "type": "integer"
                      },
                      "healthIssuesFamilyMbr": {
                        "type": "integer"
                      },
                      "physicalDisabilityYouth": {
                        "type": "integer"
                      },
                      "physicalDisabilityFamilyMbr": {
                        "type": "integer"
                      },
                      "mentalDisabilityYouth": {
                        "type": "integer"
                      },
                      "mentalDisabilityFamilyMbr": {
                        "type": "integer"
                      },
                      "abuseAndNeglectYouth": {
                        "type": "integer"
                      },
                      "abuseAndNeglectFamilyMbr": {
                        "type": "integer"
                      },
                      "alcoholDrugAbuseYouth": {
                        "type": "integer"
                      },
                      "alcoholDrugAbuseFamilyMbr": {
                        "type": "integer"
                      },
                      "insufficientIncomeToSupportYouth": {
                        "type": "integer"
                      },
                      "activeMilitaryParent": {
                        "type": "integer"
                      },
                      "incarceratedParent": {
                        "type": "integer"
                      },
                      "incarceratedParentStatus": {
                        "type": "integer"
                      },
                      "referralSource": {
                        "type": "integer"
                      },
                      "countOutReachReferralApproaches": {
                        "type": "integer"
                      },
                      "exchangeForSex": {
                        "type": "integer"
                      },
                      "exchangeForSexPastThreeMonths": {
                        "type": "integer"
                      },
                      "countOfExchangeForSex": {
                        "type": "integer"
                      },
                      "askedOfForcedToExchangeForSex": {
                        "type": "integer"
                      },
                      "askedOfForcedToExchangeForSexPastThreeMonths": {
                        "type": "integer"
                      },
                      "workPlaceViolenceThreat": {
                        "type": "integer"
                      },
                      "workPlacePromiseDifference": {
                        "type": "integer"
                      },
                      "coercedToContinueWork": {
                        "type": "integer"
                      },
                      "laborExploitPastThreeMonths": {
                        "type": "integer"
                      },
                      "dataCollectionStage": {
                        "type": "integer"
                      },
                      "informationDate": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryrhys/{entryrhyid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                entryrhy:
                  entryrhyId: 6304041b-b997-4b01-9987-63d7e78070f1
                  formerlyWardChildWelfrForestCare: 99
                  yearsChildWelfrForestCare: 2
                  monthsChildWelfrForestCare: 4538
                  formerlyWardOfJuvenileJustice: 8
                  yearsJuvenileJustice: 3
                  houseHoldDynamics: 1
                  sexualOrientationGenderIdentityYouth: 99
                  sexualOrientationGenderIdentityFamilyMbr: 1
                  housingIssuesYouth: 99
                  housingIssuesFamilyMbr: 1
                  schoolEducationIssuesYouth: 99
                  schoolEducationIssuesFamilyMbr: 1
                  unemployementYouth: 99
                  unemployementFamilyMbr: 1
                  mentalHealthIssuesYouth: 99
                  mentalHealthIssuesFamilyMbr: 1
                  healthIssuesYouth: 1
                  healthIssuesFamilyMbr: 99
                  physicalDisabilityYouth: 1
                  physicalDisabilityFamilyMbr: 99
                  mentalDisabilityYouth: 99
                  mentalDisabilityFamilyMbr: 99
                  abuseAndNeglectYouth: 99
                  abuseAndNeglectFamilyMbr: 99
                  alcoholDrugAbuseYouth: 99
                  alcoholDrugAbuseFamilyMbr: 99
                  insufficientIncomeToSupportYouth: 1
                  activeMilitaryParent: 1
                  incarceratedParent: 1
                  incarceratedParentStatus: 3
                  referralSource: 663
                  countOutReachReferralApproaches: 234
                  exchangeForSex: 8
                  exchangeForSexPastThreeMonths: 9
                  countOfExchangeForSex: 4
                  askedOfForcedToExchangeForSex: 8
                  askedOfForcedToExchangeForSexPastThreeMonths: 8
                  workPlaceViolenceThreat: 1
                  workPlacePromiseDifference: 8
                  coercedToContinueWork: 9
                  laborExploitPastThreeMonths: 420
                  dataCollectionStage: 1
                  informationDate: 03-17-2016
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryrhy"
                  ],
                  "properties": {
                    "entryrhy": {
                      "type": "object",
                      "required": [
                        "entryrhyId",
                        "formerlyWardChildWelfrForestCare",
                        "yearsChildWelfrForestCare",
                        "monthsChildWelfrForestCare",
                        "formerlyWardOfJuvenileJustice",
                        "yearsJuvenileJustice",
                        "houseHoldDynamics",
                        "sexualOrientationGenderIdentityYouth",
                        "sexualOrientationGenderIdentityFamilyMbr",
                        "housingIssuesYouth",
                        "housingIssuesFamilyMbr",
                        "schoolEducationIssuesYouth",
                        "schoolEducationIssuesFamilyMbr",
                        "unemployementYouth",
                        "unemployementFamilyMbr",
                        "mentalHealthIssuesYouth",
                        "mentalHealthIssuesFamilyMbr",
                        "healthIssuesYouth",
                        "healthIssuesFamilyMbr",
                        "physicalDisabilityYouth",
                        "physicalDisabilityFamilyMbr",
                        "mentalDisabilityYouth",
                        "mentalDisabilityFamilyMbr",
                        "abuseAndNeglectYouth",
                        "abuseAndNeglectFamilyMbr",
                        "alcoholDrugAbuseYouth",
                        "alcoholDrugAbuseFamilyMbr",
                        "insufficientIncomeToSupportYouth",
                        "activeMilitaryParent",
                        "incarceratedParent",
                        "incarceratedParentStatus",
                        "referralSource",
                        "countOutReachReferralApproaches",
                        "exchangeForSex",
                        "exchangeForSexPastThreeMonths",
                        "countOfExchangeForSex",
                        "askedOfForcedToExchangeForSex",
                        "askedOfForcedToExchangeForSexPastThreeMonths",
                        "workPlaceViolenceThreat",
                        "workPlacePromiseDifference",
                        "coercedToContinueWork",
                        "laborExploitPastThreeMonths",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "entryrhyId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "formerlyWardChildWelfrForestCare": {
                          "type": "integer"
                        },
                        "yearsChildWelfrForestCare": {
                          "type": "integer"
                        },
                        "monthsChildWelfrForestCare": {
                          "type": "integer"
                        },
                        "formerlyWardOfJuvenileJustice": {
                          "type": "integer"
                        },
                        "yearsJuvenileJustice": {
                          "type": "integer"
                        },
                        "houseHoldDynamics": {
                          "type": "integer"
                        },
                        "sexualOrientationGenderIdentityYouth": {
                          "type": "integer"
                        },
                        "sexualOrientationGenderIdentityFamilyMbr": {
                          "type": "integer"
                        },
                        "housingIssuesYouth": {
                          "type": "integer"
                        },
                        "housingIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "schoolEducationIssuesYouth": {
                          "type": "integer"
                        },
                        "schoolEducationIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "unemployementYouth": {
                          "type": "integer"
                        },
                        "unemployementFamilyMbr": {
                          "type": "integer"
                        },
                        "mentalHealthIssuesYouth": {
                          "type": "integer"
                        },
                        "mentalHealthIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "healthIssuesYouth": {
                          "type": "integer"
                        },
                        "healthIssuesFamilyMbr": {
                          "type": "integer"
                        },
                        "physicalDisabilityYouth": {
                          "type": "integer"
                        },
                        "physicalDisabilityFamilyMbr": {
                          "type": "integer"
                        },
                        "mentalDisabilityYouth": {
                          "type": "integer"
                        },
                        "mentalDisabilityFamilyMbr": {
                          "type": "integer"
                        },
                        "abuseAndNeglectYouth": {
                          "type": "integer"
                        },
                        "abuseAndNeglectFamilyMbr": {
                          "type": "integer"
                        },
                        "alcoholDrugAbuseYouth": {
                          "type": "integer"
                        },
                        "alcoholDrugAbuseFamilyMbr": {
                          "type": "integer"
                        },
                        "insufficientIncomeToSupportYouth": {
                          "type": "integer"
                        },
                        "activeMilitaryParent": {
                          "type": "integer"
                        },
                        "incarceratedParent": {
                          "type": "integer"
                        },
                        "incarceratedParentStatus": {
                          "type": "integer"
                        },
                        "referralSource": {
                          "type": "integer"
                        },
                        "countOutReachReferralApproaches": {
                          "type": "integer"
                        },
                        "exchangeForSex": {
                          "type": "integer"
                        },
                        "exchangeForSexPastThreeMonths": {
                          "type": "integer"
                        },
                        "countOfExchangeForSex": {
                          "type": "integer"
                        },
                        "askedOfForcedToExchangeForSex": {
                          "type": "integer"
                        },
                        "askedOfForcedToExchangeForSexPastThreeMonths": {
                          "type": "integer"
                        },
                        "workPlaceViolenceThreat": {
                          "type": "integer"
                        },
                        "workPlacePromiseDifference": {
                          "type": "integer"
                        },
                        "coercedToContinueWork": {
                          "type": "integer"
                        },
                        "laborExploitPastThreeMonths": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a entryrhy using a URI resource parameter/ID.
      operationId: GET_clients-clientId-enrollments-enrollmentId-entryrhys-entryrhyid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific entryrhy specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientId-enrollments-enrollmentId-entryrhys-entryrhyid
      requestBody:
        content:
          application/json:
            example:
              entryrhy:
                formerlyWardChildWelfrForestCare: 99
                yearsChildWelfrForestCare: 2
                monthsChildWelfrForestCare: 4538
                formerlyWardOfJuvenileJustice: 8
                yearsJuvenileJustice: 3
                houseHoldDynamics: 1
                sexualOrientatiionGenderIdentityYouth: 99
                sexualOrientatiionGenderIdentityFamilyMbr: 1
                housingIssuesYouth: 99
                housingIssuesFamilyMbr: 1
                schoolEducationIssuesYouth: 99
                schoolEducationIssuesFamilyMbr: 1
                unemployementYouth: 99
                unemployementFamilyMbr: 1
                mentalHealthIssuesYouth: 99
                mentalHealthIssuesFamilyMbr: 1
                healthIssuesYouth: 1
                healthIssuesFamilyMbr: 99
                physicalDisabilityYouth: 1
                physicalDisabilityFamilyMbr: 99
                mentalDisabilityYouth: 99
                mentalDisabilityFamilyMbr: 99
                abuseAndNeglectYouth: 99
                abuseAndNeglectFamilyMbr: 99
                alcoholDrugAbuseYouth: 99
                alcoholDrugAbuseFamilyMbr: 99
                insufficientIncomeToSupportYouth: 1
                activeMilitaryParent: 1
                incarceratedParent: 1
                incarceratedParentStatus: 3
                referralSource: 663
                countOutReachReferralApproaches: 234
                exchangeForSex: 8
                exchangeForSexPastThreeMonths: 9
                countOfExchangeForSex: 4
                askedOfForcedToExchangeForSex: 8
                askedOfForcedToExchangeForSexPastThreeMonths: 8
                workPlaceViolenceThreat: 1
                workPlacePromiseDifference: 8
                coercedToContinueWork: 9
                laborExploitPastThreeMonths: 420
                dataCollectionStage: 1
                informationDate: 03-17-2016
            schema:
              {
                "type": "object",
                "required": [
                  "entryrhy"
                ],
                "properties": {
                  "entryrhy": {
                    "type": "object",
                    "required": [
                      "formerlyWardChildWelfrForestCare",
                      "yearsChildWelfrForestCare",
                      "monthsChildWelfrForestCare",
                      "formerlyWardOfJuvenileJustice",
                      "yearsJuvenileJustice",
                      "houseHoldDynamics",
                      "sexualOrientatiionGenderIdentityYouth",
                      "sexualOrientatiionGenderIdentityFamilyMbr",
                      "housingIssuesYouth",
                      "housingIssuesFamilyMbr",
                      "schoolEducationIssuesYouth",
                      "schoolEducationIssuesFamilyMbr",
                      "unemployementYouth",
                      "unemployementFamilyMbr",
                      "mentalHealthIssuesYouth",
                      "mentalHealthIssuesFamilyMbr",
                      "healthIssuesYouth",
                      "healthIssuesFamilyMbr",
                      "physicalDisabilityYouth",
                      "physicalDisabilityFamilyMbr",
                      "mentalDisabilityYouth",
                      "mentalDisabilityFamilyMbr",
                      "abuseAndNeglectYouth",
                      "abuseAndNeglectFamilyMbr",
                      "alcoholDrugAbuseYouth",
                      "alcoholDrugAbuseFamilyMbr",
                      "insufficientIncomeToSupportYouth",
                      "activeMilitaryParent",
                      "incarceratedParent",
                      "incarceratedParentStatus",
                      "referralSource",
                      "countOutReachReferralApproaches",
                      "exchangeForSex",
                      "exchangeForSexPastThreeMonths",
                      "countOfExchangeForSex",
                      "askedOfForcedToExchangeForSex",
                      "askedOfForcedToExchangeForSexPastThreeMonths",
                      "workPlaceViolenceThreat",
                      "workPlacePromiseDifference",
                      "coercedToContinueWork",
                      "laborExploitPastThreeMonths",
                      "dataCollectionStage",
                      "informationDate"
                    ],
                    "properties": {
                      "formerlyWardChildWelfrForestCare": {
                        "type": "integer"
                      },
                      "yearsChildWelfrForestCare": {
                        "type": "integer"
                      },
                      "monthsChildWelfrForestCare": {
                        "type": "integer"
                      },
                      "formerlyWardOfJuvenileJustice": {
                        "type": "integer"
                      },
                      "yearsJuvenileJustice": {
                        "type": "integer"
                      },
                      "houseHoldDynamics": {
                        "type": "integer"
                      },
                      "sexualOrientatiionGenderIdentityYouth": {
                        "type": "integer"
                      },
                      "sexualOrientatiionGenderIdentityFamilyMbr": {
                        "type": "integer"
                      },
                      "housingIssuesYouth": {
                        "type": "integer"
                      },
                      "housingIssuesFamilyMbr": {
                        "type": "integer"
                      },
                      "schoolEducationIssuesYouth": {
                        "type": "integer"
                      },
                      "schoolEducationIssuesFamilyMbr": {
                        "type": "integer"
                      },
                      "unemployementYouth": {
                        "type": "integer"
                      },
                      "unemployementFamilyMbr": {
                        "type": "integer"
                      },
                      "mentalHealthIssuesYouth": {
                        "type": "integer"
                      },
                      "mentalHealthIssuesFamilyMbr": {
                        "type": "integer"
                      },
                      "healthIssuesYouth": {
                        "type": "integer"
                      },
                      "healthIssuesFamilyMbr": {
                        "type": "integer"
                      },
                      "physicalDisabilityYouth": {
                        "type": "integer"
                      },
                      "physicalDisabilityFamilyMbr": {
                        "type": "integer"
                      },
                      "mentalDisabilityYouth": {
                        "type": "integer"
                      },
                      "mentalDisabilityFamilyMbr": {
                        "type": "integer"
                      },
                      "abuseAndNeglectYouth": {
                        "type": "integer"
                      },
                      "abuseAndNeglectFamilyMbr": {
                        "type": "integer"
                      },
                      "alcoholDrugAbuseYouth": {
                        "type": "integer"
                      },
                      "alcoholDrugAbuseFamilyMbr": {
                        "type": "integer"
                      },
                      "insufficientIncomeToSupportYouth": {
                        "type": "integer"
                      },
                      "activeMilitaryParent": {
                        "type": "integer"
                      },
                      "incarceratedParent": {
                        "type": "integer"
                      },
                      "incarceratedParentStatus": {
                        "type": "integer"
                      },
                      "referralSource": {
                        "type": "integer"
                      },
                      "countOutReachReferralApproaches": {
                        "type": "integer"
                      },
                      "exchangeForSex": {
                        "type": "integer"
                      },
                      "exchangeForSexPastThreeMonths": {
                        "type": "integer"
                      },
                      "countOfExchangeForSex": {
                        "type": "integer"
                      },
                      "askedOfForcedToExchangeForSex": {
                        "type": "integer"
                      },
                      "askedOfForcedToExchangeForSexPastThreeMonths": {
                        "type": "integer"
                      },
                      "workPlaceViolenceThreat": {
                        "type": "integer"
                      },
                      "workPlacePromiseDifference": {
                        "type": "integer"
                      },
                      "coercedToContinueWork": {
                        "type": "integer"
                      },
                      "laborExploitPastThreeMonths": {
                        "type": "integer"
                      },
                      "dataCollectionStage": {
                        "type": "integer"
                      },
                      "informationDate": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific entryrhy specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientId-enrollments-enrollmentId-entryrhys-entryrhyid
    parameters:
      - name: entryrhyid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Entryrhy Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryrhys/{entryrhyid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                entryrhys:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  entryrhys:
                    - entryrhyId: 6304041b-b997-4b01-9987-63d7e78070f1
                      formerlyWardChildWelfrForestCare: 99
                      yearsChildWelfrForestCare: 2
                      monthsChildWelfrForestCare: 4538
                      formerlyWardOfJuvenileJustice: 8
                      yearsJuvenileJustice: 3
                      houseHoldDynamics: 1
                      sexualOrientatiionGenderIdentityYouth: 99
                      sexualOrientatiionGenderIdentityFamilyMbr: 1
                      housingIssuesYouth: 99
                      housingIssuesFamilyMbr: 1
                      schoolEducationIssuesYouth: 99
                      schoolEducationIssuesFamilyMbr: 1
                      unemployementYouth: 99
                      unemployementFamilyMbr: 1
                      mentalHealthIssuesYouth: 99
                      mentalHealthIssuesFamilyMbr: 1
                      healthIssuesYouth: 1
                      healthIssuesFamilyMbr: 99
                      physicalDisabilityYouth: 1
                      physicalDisabilityFamilyMbr: 99
                      mentalDisabilityYouth: 99
                      mentalDisabilityFamilyMbr: 99
                      abuseAndNeglectYouth: 99
                      abuseAndNeglectFamilyMbr: 99
                      alcoholDrugAbuseYouth: 99
                      alcoholDrugAbuseFamilyMbr: 99
                      insufficientIncomeToSupportYouth: 1
                      activeMilitaryParent: 1
                      incarceratedParent: 1
                      incarceratedParentStatus: 3
                      referralSource: 663
                      countOutReachReferralApproaches: 234
                      exchangeForSex: 8
                      exchangeForSexPastThreeMonths: 9
                      countOfExchangeForSex: 4
                      askedOfForcedToExchangeForSex: 8
                      askedOfForcedToExchangeForSexPastThreeMonths: 8
                      workPlaceViolenceThreat: 1
                      workPlacePromiseDifference: 8
                      coercedToContinueWork: 9
                      laborExploitPastThreeMonths: 420
                      dataCollectionStage: 1
                      informationDate: 03-17-2016
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryrhys"
                  ],
                  "properties": {
                    "entryrhys": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "entryrhys"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "entryrhys": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "entryrhyId",
                              "formerlyWardChildWelfrForestCare",
                              "yearsChildWelfrForestCare",
                              "monthsChildWelfrForestCare",
                              "formerlyWardOfJuvenileJustice",
                              "yearsJuvenileJustice",
                              "houseHoldDynamics",
                              "sexualOrientatiionGenderIdentityYouth",
                              "sexualOrientatiionGenderIdentityFamilyMbr",
                              "housingIssuesYouth",
                              "housingIssuesFamilyMbr",
                              "schoolEducationIssuesYouth",
                              "schoolEducationIssuesFamilyMbr",
                              "unemployementYouth",
                              "unemployementFamilyMbr",
                              "mentalHealthIssuesYouth",
                              "mentalHealthIssuesFamilyMbr",
                              "healthIssuesYouth",
                              "healthIssuesFamilyMbr",
                              "physicalDisabilityYouth",
                              "physicalDisabilityFamilyMbr",
                              "mentalDisabilityYouth",
                              "mentalDisabilityFamilyMbr",
                              "abuseAndNeglectYouth",
                              "abuseAndNeglectFamilyMbr",
                              "alcoholDrugAbuseYouth",
                              "alcoholDrugAbuseFamilyMbr",
                              "insufficientIncomeToSupportYouth",
                              "activeMilitaryParent",
                              "incarceratedParent",
                              "incarceratedParentStatus",
                              "referralSource",
                              "countOutReachReferralApproaches",
                              "exchangeForSex",
                              "exchangeForSexPastThreeMonths",
                              "countOfExchangeForSex",
                              "askedOfForcedToExchangeForSex",
                              "askedOfForcedToExchangeForSexPastThreeMonths",
                              "workPlaceViolenceThreat",
                              "workPlacePromiseDifference",
                              "coercedToContinueWork",
                              "laborExploitPastThreeMonths",
                              "dataCollectionStage",
                              "informationDate"
                            ],
                            "properties": {
                              "entryrhyId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "formerlyWardChildWelfrForestCare": {
                                "type": "integer"
                              },
                              "yearsChildWelfrForestCare": {
                                "type": "integer"
                              },
                              "monthsChildWelfrForestCare": {
                                "type": "integer"
                              },
                              "formerlyWardOfJuvenileJustice": {
                                "type": "integer"
                              },
                              "yearsJuvenileJustice": {
                                "type": "integer"
                              },
                              "houseHoldDynamics": {
                                "type": "integer"
                              },
                              "sexualOrientatiionGenderIdentityYouth": {
                                "type": "integer"
                              },
                              "sexualOrientatiionGenderIdentityFamilyMbr": {
                                "type": "integer"
                              },
                              "housingIssuesYouth": {
                                "type": "integer"
                              },
                              "housingIssuesFamilyMbr": {
                                "type": "integer"
                              },
                              "schoolEducationIssuesYouth": {
                                "type": "integer"
                              },
                              "schoolEducationIssuesFamilyMbr": {
                                "type": "integer"
                              },
                              "unemployementYouth": {
                                "type": "integer"
                              },
                              "unemployementFamilyMbr": {
                                "type": "integer"
                              },
                              "mentalHealthIssuesYouth": {
                                "type": "integer"
                              },
                              "mentalHealthIssuesFamilyMbr": {
                                "type": "integer"
                              },
                              "healthIssuesYouth": {
                                "type": "integer"
                              },
                              "healthIssuesFamilyMbr": {
                                "type": "integer"
                              },
                              "physicalDisabilityYouth": {
                                "type": "integer"
                              },
                              "physicalDisabilityFamilyMbr": {
                                "type": "integer"
                              },
                              "mentalDisabilityYouth": {
                                "type": "integer"
                              },
                              "mentalDisabilityFamilyMbr": {
                                "type": "integer"
                              },
                              "abuseAndNeglectYouth": {
                                "type": "integer"
                              },
                              "abuseAndNeglectFamilyMbr": {
                                "type": "integer"
                              },
                              "alcoholDrugAbuseYouth": {
                                "type": "integer"
                              },
                              "alcoholDrugAbuseFamilyMbr": {
                                "type": "integer"
                              },
                              "insufficientIncomeToSupportYouth": {
                                "type": "integer"
                              },
                              "activeMilitaryParent": {
                                "type": "integer"
                              },
                              "incarceratedParent": {
                                "type": "integer"
                              },
                              "incarceratedParentStatus": {
                                "type": "integer"
                              },
                              "referralSource": {
                                "type": "integer"
                              },
                              "countOutReachReferralApproaches": {
                                "type": "integer"
                              },
                              "exchangeForSex": {
                                "type": "integer"
                              },
                              "exchangeForSexPastThreeMonths": {
                                "type": "integer"
                              },
                              "countOfExchangeForSex": {
                                "type": "integer"
                              },
                              "askedOfForcedToExchangeForSex": {
                                "type": "integer"
                              },
                              "askedOfForcedToExchangeForSexPastThreeMonths": {
                                "type": "integer"
                              },
                              "workPlaceViolenceThreat": {
                                "type": "integer"
                              },
                              "workPlacePromiseDifference": {
                                "type": "integer"
                              },
                              "coercedToContinueWork": {
                                "type": "integer"
                              },
                              "laborExploitPastThreeMonths": {
                                "type": "integer"
                              },
                              "dataCollectionStage": {
                                "type": "integer"
                              },
                              "informationDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryrhy history.  Returns a list of entryrhy ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-entryrhys-entryrhyid-history
    parameters:
      - name: entryrhyid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Entryrhy Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryssvfs':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                entryssvfs:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  entryssvfs:
                    - entryssvfId: 9f992ad8-ab78-474e-a2ae-c7c9db551d27
                      percentAmi: 1
                      lastPermanentStreet: 'T3Jjj1bpCBUlIZKpFdty                              '
                      lastPermanentCity: 'kqF7MpodPSizewhiiTuX                              '
                      lastPermanentState: 'F8NdGzYX5ghd8lam535D                              '
                      lastPermanentZip: 'mIJY7hM4DW                                        '
                      addressDataQuality: -1958091791
                      hpScreenScore: -2033078268
                      vamcStaction: 'DcM25FFnWsll4D9HAsjCeaqzRDyvM0                    '
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryssvfs"
                  ],
                  "properties": {
                    "entryssvfs": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "entryssvfs"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "entryssvfs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "entryssvfId",
                              "percentAmi",
                              "lastPermanentStreet",
                              "lastPermanentCity",
                              "lastPermanentState",
                              "lastPermanentZip",
                              "addressDataQuality",
                              "hpScreenScore",
                              "vamcStaction"
                            ],
                            "properties": {
                              "entryssvfId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "percentAmi": {
                                "type": "integer"
                              },
                              "lastPermanentStreet": {
                                "type": "string",
                              },
                              "lastPermanentCity": {
                                "type": "string",
                              },
                              "lastPermanentState": {
                                "type": "string",
                              },
                              "lastPermanentZip": {
                                "type": "string",
                              },
                              "addressDataQuality": {
                                "type": "integer"
                              },
                              "hpScreenScore": {
                                "type": "integer"
                              },
                              "vamcStaction": {
                                "type": "string",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryssvf.  Returns a list of entryssvf ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-entryssvfs

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "entryssvf"
                    ],
                    "properties": {
                      "entryssvf": {
                        "type": "object",
                        "required": [
                          "entryssvfId",
                          "percentAmi",
                          "lastPermanentStreet",
                          "lastPermanentCity",
                          "lastPermanentState",
                          "lastPermanentZip",
                          "addressDataQuality",
                          "hpScreenScore",
                          "vamcStaction"
                        ],
                        "properties": {
                          "entryssvfId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "percentAmi": {
                            "type": "integer"
                          },
                          "lastPermanentStreet": {
                            "type": "string",
                          },
                          "lastPermanentCity": {
                            "type": "string",
                          },
                          "lastPermanentState": {
                            "type": "string",
                          },
                          "lastPermanentZip": {
                            "type": "string",
                          },
                          "addressDataQuality": {
                            "type": "integer"
                          },
                          "hpScreenScore": {
                            "type": "integer"
                          },
                          "vamcStaction": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                  entryssvf:
                    entryssvfId: 9f992ad8-ab78-474e-a2ae-c7c9db551d27
                    percentAmi: 2
                    lastPermanentStreet: 'T3Jjj1bpCBUlIZKpFdty                              '
                    lastPermanentCity: 'kqF7MpodPSizewhiiTuX                              '
                    lastPermanentState: 'F8NdGzYX5ghd8lam535D                              '
                    lastPermanentZip: 'mIJY7hM4DW                                        '
                    addressDataQuality: -1958091791
                    hpScreenScore: -2033078268
                    vamcStaction: 'DcM25FFnWsll4D9HAsjCeaqzRDyvM0                    '
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a entryssvf
      operationId: POST_clients-clientId-enrollments-enrollmentId-entryssvfs
      requestBody:
        content:
          application/json:
            example:
              entryssvf:
                percentAmi: 1
                lastPermanentStreet: T3Jjj1bpCBUlIZKpFdty
                lastPermanentCity: kqF7MpodPSizewhiiTuX
                lastPermanentState: F8NdGzYX5ghd8lam535D
                lastPermanentZip: mIJY7hM4DW
                addressDataQuality: -1958091791
                hpScreenScore: -2033078268
                vamcStaction: DcM25FFnWsll4D9HAsjCeaqzRDyvM0
            schema:
              {
                "type": "object",
                "required": [
                  "entryssvf"
                ],
                "properties": {
                  "entryssvf": {
                    "type": "object",
                    "required": [
                      "percentAmi",
                      "lastPermanentStreet",
                      "lastPermanentCity",
                      "lastPermanentState",
                      "lastPermanentZip",
                      "addressDataQuality",
                      "hpScreenScore",
                      "vamcStaction"
                    ],
                    "properties": {
                      "percentAmi": {
                        "type": "integer"
                      },
                      "lastPermanentStreet": {
                        "type": "string",
                      },
                      "lastPermanentCity": {
                        "type": "string",
                      },
                      "lastPermanentState": {
                        "type": "string",
                      },
                      "lastPermanentZip": {
                        "type": "string",
                      },
                      "addressDataQuality": {
                        "type": "integer"
                      },
                      "hpScreenScore": {
                        "type": "integer"
                      },
                      "vamcStaction": {
                        "type": "string",
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryssvfs/{entryssvfid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                entryssvf:
                  entryssvfId: 9f992ad8-ab78-474e-a2ae-c7c9db551d27
                  percentAmi: 2
                  lastPermanentStreet: 'T3Jjj1bpCBUlIZKpFdty                              '
                  lastPermanentCity: 'kqF7MpodPSizewhiiTuX                              '
                  lastPermanentState: 'F8NdGzYX5ghd8lam535D                              '
                  lastPermanentZip: 'mIJY7hM4DW                                        '
                  addressDataQuality: -1958091791
                  hpScreenScore: -2033078268
                  vamcStaction: 'DcM25FFnWsll4D9HAsjCeaqzRDyvM0                    '
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryssvf"
                  ],
                  "properties": {
                    "entryssvf": {
                      "type": "object",
                      "required": [
                        "entryssvfId",
                        "percentAmi",
                        "lastPermanentStreet",
                        "lastPermanentCity",
                        "lastPermanentState",
                        "lastPermanentZip",
                        "addressDataQuality",
                        "hpScreenScore",
                        "vamcStaction"
                      ],
                      "properties": {
                        "entryssvfId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "percentAmi": {
                          "type": "integer"
                        },
                        "lastPermanentStreet": {
                          "type": "string",
                        },
                        "lastPermanentCity": {
                          "type": "string",
                        },
                        "lastPermanentState": {
                          "type": "string",
                        },
                        "lastPermanentZip": {
                          "type": "string",
                        },
                        "addressDataQuality": {
                          "type": "integer"
                        },
                        "hpScreenScore": {
                          "type": "integer"
                        },
                        "vamcStaction": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a entryssvf using a URI resource parameter/ID.
      operationId: GET_clients-clientId-enrollments-enrollmentId-entryssvfs-entryssvfid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific entryssvf specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientId-enrollments-enrollmentId-entryssvfs-entryssvfid
      requestBody:
        content:
          application/json:
            example:
              entryssvf:
                percentAmi: 1
                lastPermanentStreet: T3Jjj1bpCBUlIZKpFdty
                lastPermanentCity: kqF7MpodPSizewhiiTuX
                lastPermanentState: F8NdGzYX5ghd8lam535D
                lastPermanentZip: mIJY7hM4DW
                addressDataQuality: -1958091791
                hpScreenScore: -2033078268
                vamcStaction: DcM25FFnWsll4D9HAsjCeaqzRDyvM0
            schema:
              {
                "type": "object",
                "required": [
                  "entryssvf"
                ],
                "properties": {
                  "entryssvf": {
                    "type": "object",
                    "required": [
                      "percentAmi",
                      "lastPermanentStreet",
                      "lastPermanentCity",
                      "lastPermanentState",
                      "lastPermanentZip",
                      "addressDataQuality",
                      "hpScreenScore",
                      "vamcStaction"
                    ],
                    "properties": {
                      "percentAmi": {
                        "type": "integer"
                      },
                      "lastPermanentStreet": {
                        "type": "string",
                      },
                      "lastPermanentCity": {
                        "type": "string",
                      },
                      "lastPermanentState": {
                        "type": "string",
                      },
                      "lastPermanentZip": {
                        "type": "string",
                      },
                      "addressDataQuality": {
                        "type": "integer"
                      },
                      "hpScreenScore": {
                        "type": "integer"
                      },
                      "vamcStaction": {
                        "type": "string",
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific entryssvf specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientId-enrollments-enrollmentId-entryssvfs-entryssvfid
    parameters:
      - name: entryssvfid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Entryssvf Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/entryssvfs/{entryssvfid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                entryssvfs:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  entryssvfs:
                    - entryssvfId: 9f992ad8-ab78-474e-a2ae-c7c9db551d27
                      percentAmi: 1
                      lastPermanentStreet: 'T3Jjj1bpCBUlIZKpFdty                              '
                      lastPermanentCity: 'kqF7MpodPSizewhiiTuX                              '
                      lastPermanentState: 'F8NdGzYX5ghd8lam535D                              '
                      lastPermanentZip: 'mIJY7hM4DW                                        '
                      addressDataQuality: -1958091791
                      hpScreenScore: -2033078268
                      vamcStaction: 'DcM25FFnWsll4D9HAsjCeaqzRDyvM0                    '
              schema:
                {
                  "type": "object",
                  "required": [
                    "entryssvfs"
                  ],
                  "properties": {
                    "entryssvfs": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "entryssvfs"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "entryssvfs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "entryssvfId",
                              "percentAmi",
                              "lastPermanentStreet",
                              "lastPermanentCity",
                              "lastPermanentState",
                              "lastPermanentZip",
                              "addressDataQuality",
                              "hpScreenScore",
                              "vamcStaction"
                            ],
                            "properties": {
                              "entryssvfId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "percentAmi": {
                                "type": "integer"
                              },
                              "lastPermanentStreet": {
                                "type": "string",
                              },
                              "lastPermanentCity": {
                                "type": "string",
                              },
                              "lastPermanentState": {
                                "type": "string",
                              },
                              "lastPermanentZip": {
                                "type": "string",
                              },
                              "addressDataQuality": {
                                "type": "integer"
                              },
                              "hpScreenScore": {
                                "type": "integer"
                              },
                              "vamcStaction": {
                                "type": "string",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for entryssvf history.  Returns a list of entryssvf ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-entryssvfs-entryssvfid-GET_clients_clientId_history
    parameters:
      - name: entryssvfid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Entryssvf Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/servicefareferrals':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                serviceFaReferrals:
                  pagination:
                    from: 0
                    returned: 1
                    total: 0
                    maximum: 30
                    sort: {}
                  serviceFaReferrals:
                    - serviceFaReferralId: bf09eb50-b641-486e-bf7e-49e9faa37c41
                      serviceCategory: 8945
                      funderList: 1234
                      typeProvided: 4566
                      otherTypeProvided: Test
                      subTypeProvided: 1234
                      faAmount: 20.4
                      referralOutcome: 1234
              schema:
                {
                  "type": "object",
                  "required": [
                    "serviceFaReferrals"
                  ],
                  "properties": {
                    "serviceFaReferrals": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "serviceFaReferrals"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "serviceFaReferrals": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "serviceFaReferralId",
                              "serviceCategory",
                              "funderList",
                              "typeProvided",
                              "otherTypeProvided",
                              "subTypeProvided",
                              "faAmount",
                              "referralOutcome"
                            ],
                            "properties": {
                              "serviceFaReferralId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "serviceCategory": {
                                "type": "integer"
                              },
                              "funderList": {
                                "type": "integer"
                              },
                              "typeProvided": {
                                "type": "integer"
                              },
                              "otherTypeProvided": {
                                "type": "string",
                              },
                              "subTypeProvided": {
                                "type": "integer"
                              },
                              "faAmount": {
                                "type": "number"
                              },
                              "referralOutcome": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for serviceFaReferral.  Returns a list of serviceFaReferral
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-serviceFaReferrals

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "serviceFaReferral"
                    ],
                    "properties": {
                      "serviceFaReferral": {
                        "type": "object",
                        "required": [
                          "serviceFaReferralId",
                          "serviceCategory",
                          "funderList",
                          "typeProvided",
                          "otherTypeProvided",
                          "subTypeProvided",
                          "faAmount",
                          "referralOutcome"
                        ],
                        "properties": {
                          "serviceFaReferralId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "serviceCategory": {
                            "type": "integer"
                          },
                          "funderList": {
                            "type": "integer"
                          },
                          "typeProvided": {
                            "type": "integer"
                          },
                          "otherTypeProvided": {
                            "type": "string",
                          },
                          "subTypeProvided": {
                            "type": "integer"
                          },
                          "faAmount": {
                            "type": "number"
                          },
                          "referralOutcome": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  serviceFaReferral:
                    serviceFaReferralId: 408f4b64-4044-4e6d-86df-a1c080de3c65
                    serviceCategory: 263773532
                    funderList: 745361973
                    typeProvided: 2086918905
                    otherTypeProvided: jiXUV3kg8qIAsApVR40P
                    subTypeProvided: -36199245
                    faAmount: 3.14
                    referralOutcome: 804780709
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a serviceFaReferral
      operationId: POST_clients-clientId-enrollments-enrollmentId-serviceFaReferrals
      requestBody:
        content:
          application/json:
            example:
              serviceFaReferral:
                serviceCategory: 8945
                funderList: 1234
                typeProvided: 4566
                otherTypeProvided: Test
                subTypeProvided: 1234
                referralOutcome: 1234
                faAmount: 20.4
            schema:
              {
                "type": "object",
                "required": [
                  "serviceFaReferral"
                ],
                "properties": {
                  "serviceFaReferral": {
                    "type": "object",
                    "required": [
                      "serviceCategory",
                      "funderList",
                      "typeProvided",
                      "otherTypeProvided",
                      "subTypeProvided",
                      "referralOutcome",
                      "faAmount"
                    ],
                    "properties": {
                      "serviceCategory": {
                        "type": "integer"
                      },
                      "funderList": {
                        "type": "integer"
                      },
                      "typeProvided": {
                        "type": "integer"
                      },
                      "otherTypeProvided": {
                        "type": "string",
                      },
                      "subTypeProvided": {
                        "type": "integer"
                      },
                      "referralOutcome": {
                        "type": "integer"
                      },
                      "faAmount": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/servicefareferrals/{servicefareferralid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                serviceFaReferral:
                  serviceFaReferralId: 408f4b64-4044-4e6d-86df-a1c080de3c65
                  serviceCategory: 263773532
                  funderList: 745361973
                  typeProvided: 2086918905
                  otherTypeProvided: jiXUV3kg8qIAsApVR40P
                  subTypeProvided: -36199245
                  faAmount: 3.14
                  referralOutcome: 804780709
              schema:
                {
                  "type": "object",
                  "required": [
                    "serviceFaReferral"
                  ],
                  "properties": {
                    "serviceFaReferral": {
                      "type": "object",
                      "required": [
                        "serviceFaReferralId",
                        "serviceCategory",
                        "funderList",
                        "typeProvided",
                        "otherTypeProvided",
                        "subTypeProvided",
                        "faAmount",
                        "referralOutcome"
                      ],
                      "properties": {
                        "serviceFaReferralId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "serviceCategory": {
                          "type": "integer"
                        },
                        "funderList": {
                          "type": "integer"
                        },
                        "typeProvided": {
                          "type": "integer"
                        },
                        "otherTypeProvided": {
                          "type": "string",
                        },
                        "subTypeProvided": {
                          "type": "integer"
                        },
                        "faAmount": {
                          "type": "number"
                        },
                        "referralOutcome": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a serviceFaReferral using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientId-enrollments-enrollmentId-serviceFaReferrals-serviceFaReferralid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific serviceFaReferral specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientId-enrollments-enrollmentId-serviceFaReferrals-serviceFaReferralid
      requestBody:
        content:
          application/json:
            example:
              serviceFaReferral:
                serviceCategory: 8945
                funderList: 1234
                typeProvided: 4566
                otherTypeProvided: Test
                subTypeProvided: 1234
                referralOutcome: 1234
                faAmount: 20.4
            schema:
              {
                "type": "object",
                "required": [
                  "serviceFaReferral"
                ],
                "properties": {
                  "serviceFaReferral": {
                    "type": "object",
                    "required": [
                      "serviceCategory",
                      "funderList",
                      "typeProvided",
                      "otherTypeProvided",
                      "subTypeProvided",
                      "referralOutcome",
                      "faAmount"
                    ],
                    "properties": {
                      "serviceCategory": {
                        "type": "integer"
                      },
                      "funderList": {
                        "type": "integer"
                      },
                      "typeProvided": {
                        "type": "integer"
                      },
                      "otherTypeProvided": {
                        "type": "string",
                      },
                      "subTypeProvided": {
                        "type": "integer"
                      },
                      "referralOutcome": {
                        "type": "integer"
                      },
                      "faAmount": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific serviceFaReferral specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientId-enrollments-enrollmentId-serviceFaReferrals-serviceFaReferralid
    parameters:
      - name: servicefareferralid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: serviceFaReferral Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/servicefareferrals/{servicefareferralid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                serviceFaReferrals:
                  pagination:
                    from: 0
                    returned: 1
                    total: 0
                    maximum: 30
                    sort: {}
                  serviceFaReferrals:
                    - serviceFaReferralId: bf09eb50-b641-486e-bf7e-49e9faa37c41
                      serviceCategory: 8945
                      funderList: 1234
                      typeProvided: 4566
                      otherTypeProvided: Test
                      subTypeProvided: 1234
                      faAmount: 20.4
                      referralOutcome: 1234
              schema:
                {
                  "type": "object",
                  "required": [
                    "serviceFaReferrals"
                  ],
                  "properties": {
                    "serviceFaReferrals": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "serviceFaReferrals"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "serviceFaReferrals": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "serviceFaReferralId",
                              "serviceCategory",
                              "funderList",
                              "typeProvided",
                              "otherTypeProvided",
                              "subTypeProvided",
                              "faAmount",
                              "referralOutcome"
                            ],
                            "properties": {
                              "serviceFaReferralId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "serviceCategory": {
                                "type": "integer"
                              },
                              "funderList": {
                                "type": "integer"
                              },
                              "typeProvided": {
                                "type": "integer"
                              },
                              "otherTypeProvided": {
                                "type": "string",
                              },
                              "subTypeProvided": {
                                "type": "integer"
                              },
                              "faAmount": {
                                "type": "number"
                              },
                              "referralOutcome": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for serviceFaReferral history.  Returns a list of serviceFaReferral
        ids history, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientId-enrollments-enrollmentId-serviceFaReferrals-serviceFaReferralid-history
    parameters:
      - name: servicefareferralid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: serviceFaReferral Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/serviceFaReferrals':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                serviceFaReferrals:
                  pagination:
                    from: 0
                    returned: 1
                    total: 0
                    maximum: 30
                    sort: {}
                  serviceFaReferrals:
                    - serviceFaReferralId: bf09eb50-b641-486e-bf7e-49e9faa37c41
                      serviceCategory: 8945
                      funderList: 1234
                      typeProvided: 4566
                      otherTypeProvided: Test
                      subTypeProvided: 1234
                      faAmount: 20.4
                      referralOutcome: 1234
              schema:
                {
                  "type": "object",
                  "required": [
                    "serviceFaReferrals"
                  ],
                  "properties": {
                    "serviceFaReferrals": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "serviceFaReferrals"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "serviceFaReferrals": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "serviceFaReferralId",
                              "serviceCategory",
                              "funderList",
                              "typeProvided",
                              "otherTypeProvided",
                              "subTypeProvided",
                              "faAmount",
                              "referralOutcome"
                            ],
                            "properties": {
                              "serviceFaReferralId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "serviceCategory": {
                                "type": "integer"
                              },
                              "funderList": {
                                "type": "integer"
                              },
                              "typeProvided": {
                                "type": "integer"
                              },
                              "otherTypeProvided": {
                                "type": "string",
                              },
                              "subTypeProvided": {
                                "type": "integer"
                              },
                              "faAmount": {
                                "type": "number"
                              },
                              "referralOutcome": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for serviceFaReferral.  Returns a list of serviceFaReferral
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-serviceFaReferrals

    post:
      deprecated: true
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "serviceFaReferral"
                    ],
                    "properties": {
                      "serviceFaReferral": {
                        "type": "object",
                        "required": [
                          "serviceFaReferralId",
                          "serviceCategory",
                          "funderList",
                          "typeProvided",
                          "otherTypeProvided",
                          "subTypeProvided",
                          "faAmount",
                          "referralOutcome"
                        ],
                        "properties": {
                          "serviceFaReferralId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "serviceCategory": {
                            "type": "integer"
                          },
                          "funderList": {
                            "type": "integer"
                          },
                          "typeProvided": {
                            "type": "integer"
                          },
                          "otherTypeProvided": {
                            "type": "string",
                          },
                          "subTypeProvided": {
                            "type": "integer"
                          },
                          "faAmount": {
                            "type": "number"
                          },
                          "referralOutcome": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  serviceFaReferral:
                    serviceFaReferralId: 408f4b64-4044-4e6d-86df-a1c080de3c65
                    serviceCategory: 263773532
                    funderList: 745361973
                    typeProvided: 2086918905
                    otherTypeProvided: jiXUV3kg8qIAsApVR40P
                    subTypeProvided: -36199245
                    faAmount: 3.14
                    referralOutcome: 804780709
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a serviceFaReferral
      operationId: POST_dep_clients-clientId-enrollments-enrollmentId-serviceFaReferrals
      requestBody:
        content:
          application/json:
            example:
              serviceFaReferral:
                serviceCategory: 8945
                funderList: 1234
                typeProvided: 4566
                otherTypeProvided: Test
                subTypeProvided: 1234
                referralOutcome: 1234
                faAmount: 20.4
            schema:
              {
                "type": "object",
                "required": [
                  "serviceFaReferral"
                ],
                "properties": {
                  "serviceFaReferral": {
                    "type": "object",
                    "required": [
                      "serviceCategory",
                      "funderList",
                      "typeProvided",
                      "otherTypeProvided",
                      "subTypeProvided",
                      "referralOutcome",
                      "faAmount"
                    ],
                    "properties": {
                      "serviceCategory": {
                        "type": "integer"
                      },
                      "funderList": {
                        "type": "integer"
                      },
                      "typeProvided": {
                        "type": "integer"
                      },
                      "otherTypeProvided": {
                        "type": "string",
                      },
                      "subTypeProvided": {
                        "type": "integer"
                      },
                      "referralOutcome": {
                        "type": "integer"
                      },
                      "faAmount": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/serviceFaReferrals/{servicefareferralid}':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                serviceFaReferral:
                  serviceFaReferralId: 408f4b64-4044-4e6d-86df-a1c080de3c65
                  serviceCategory: 263773532
                  funderList: 745361973
                  typeProvided: 2086918905
                  otherTypeProvided: jiXUV3kg8qIAsApVR40P
                  subTypeProvided: -36199245
                  faAmount: 3.14
                  referralOutcome: 804780709
              schema:
                {
                  "type": "object",
                  "required": [
                    "serviceFaReferral"
                  ],
                  "properties": {
                    "serviceFaReferral": {
                      "type": "object",
                      "required": [
                        "serviceFaReferralId",
                        "serviceCategory",
                        "funderList",
                        "typeProvided",
                        "otherTypeProvided",
                        "subTypeProvided",
                        "faAmount",
                        "referralOutcome"
                      ],
                      "properties": {
                        "serviceFaReferralId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "serviceCategory": {
                          "type": "integer"
                        },
                        "funderList": {
                          "type": "integer"
                        },
                        "typeProvided": {
                          "type": "integer"
                        },
                        "otherTypeProvided": {
                          "type": "string",
                        },
                        "subTypeProvided": {
                          "type": "integer"
                        },
                        "faAmount": {
                          "type": "number"
                        },
                        "referralOutcome": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a serviceFaReferral using a URI resource parameter/ID.
      operationId: >-
        GET_dep_clients-clientId-enrollments-enrollmentId-serviceFaReferrals-serviceFaReferralid
    put:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific serviceFaReferral specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_dep_clients-clientId-enrollments-enrollmentId-serviceFaReferrals-serviceFaReferralid
      requestBody:
        content:
          application/json:
            example:
              serviceFaReferral:
                serviceCategory: 8945
                funderList: 1234
                typeProvided: 4566
                otherTypeProvided: Test
                subTypeProvided: 1234
                referralOutcome: 1234
                faAmount: 20.4
            schema:
              {
                "type": "object",
                "required": [
                  "serviceFaReferral"
                ],
                "properties": {
                  "serviceFaReferral": {
                    "type": "object",
                    "required": [
                      "serviceCategory",
                      "funderList",
                      "typeProvided",
                      "otherTypeProvided",
                      "subTypeProvided",
                      "referralOutcome",
                      "faAmount"
                    ],
                    "properties": {
                      "serviceCategory": {
                        "type": "integer"
                      },
                      "funderList": {
                        "type": "integer"
                      },
                      "typeProvided": {
                        "type": "integer"
                      },
                      "otherTypeProvided": {
                        "type": "string",
                      },
                      "subTypeProvided": {
                        "type": "integer"
                      },
                      "referralOutcome": {
                        "type": "integer"
                      },
                      "faAmount": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      deprecated: true
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific serviceFaReferral specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_dep_clients-clientId-enrollments-enrollmentId-serviceFaReferrals-serviceFaReferralid
    parameters:
      - name: servicefareferralid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: serviceFaReferral Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/serviceFaReferrals/{servicefareferralid}/history':
    get:
      deprecated: true
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                serviceFaReferrals:
                  pagination:
                    from: 0
                    returned: 1
                    total: 0
                    maximum: 30
                    sort: {}
                  serviceFaReferrals:
                    - serviceFaReferralId: bf09eb50-b641-486e-bf7e-49e9faa37c41
                      serviceCategory: 8945
                      funderList: 1234
                      typeProvided: 4566
                      otherTypeProvided: Test
                      subTypeProvided: 1234
                      faAmount: 20.4
                      referralOutcome: 1234
              schema:
                {
                  "type": "object",
                  "required": [
                    "serviceFaReferrals"
                  ],
                  "properties": {
                    "serviceFaReferrals": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "serviceFaReferrals"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "serviceFaReferrals": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "serviceFaReferralId",
                              "serviceCategory",
                              "funderList",
                              "typeProvided",
                              "otherTypeProvided",
                              "subTypeProvided",
                              "faAmount",
                              "referralOutcome"
                            ],
                            "properties": {
                              "serviceFaReferralId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "serviceCategory": {
                                "type": "integer"
                              },
                              "funderList": {
                                "type": "integer"
                              },
                              "typeProvided": {
                                "type": "integer"
                              },
                              "otherTypeProvided": {
                                "type": "string",
                              },
                              "subTypeProvided": {
                                "type": "integer"
                              },
                              "faAmount": {
                                "type": "number"
                              },
                              "referralOutcome": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for serviceFaReferral history.  Returns a list of serviceFaReferral
        ids history, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_dep_clients-clientId-enrollments-enrollmentId-serviceFaReferrals-serviceFaReferralid-history
    parameters:
      - name: servicefareferralid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: serviceFaReferral Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/veteraninfos':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                veteranInfos:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  veteranInfos:
                    - veteranInfoId: d0f7f763-dba8-4bc5-9602-d6e3775c59d3
                      yearEntrdService: 1164728538
                      yearSeperated: -410173299
                      worldWar2: 1
                      koreanWar: 8
                      vietnamWar: 9
                      desertStorm: 8
                      afghanistanOef: 99
                      iraqOif: 1
                      iraqOnd: 1
                      otherTheater: 9
                      militaryBranch: 2
                      dischargeStatus: 5
              schema:
                {
                  "type": "object",
                  "required": [
                    "veteranInfos"
                  ],
                  "properties": {
                    "veteranInfos": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "veteranInfos"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "veteranInfos": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "veteranInfoId",
                              "yearEntrdService",
                              "yearSeperated",
                              "worldWar2",
                              "koreanWar",
                              "vietnamWar",
                              "desertStorm",
                              "afghanistanOef",
                              "iraqOif",
                              "iraqOnd",
                              "otherTheater",
                              "militaryBranch",
                              "dischargeStatus"
                            ],
                            "properties": {
                              "veteranInfoId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "yearEntrdService": {
                                "type": "integer"
                              },
                              "yearSeperated": {
                                "type": "integer"
                              },
                              "worldWar2": {
                                "type": "integer"
                              },
                              "koreanWar": {
                                "type": "integer"
                              },
                              "vietnamWar": {
                                "type": "integer"
                              },
                              "desertStorm": {
                                "type": "integer"
                              },
                              "afghanistanOef": {
                                "type": "integer"
                              },
                              "iraqOif": {
                                "type": "integer"
                              },
                              "iraqOnd": {
                                "type": "integer"
                              },
                              "otherTheater": {
                                "type": "integer"
                              },
                              "militaryBranch": {
                                "type": "integer"
                              },
                              "dischargeStatus": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for veteraninfo.  Returns a list of veteraninfo ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-veteraninfos

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "veteranInfo"
                    ],
                    "properties": {
                      "veteranInfo": {
                        "type": "object",
                        "required": [
                          "veteranInfoId",
                          "yearEntrdService",
                          "yearSeparated",
                          "worldWar2",
                          "koreanWar",
                          "vietnamWar",
                          "desertStorm",
                          "afghanistanOef",
                          "iraqOif",
                          "iraqOnd",
                          "otherTheater",
                          "militaryBranch",
                          "dischargeStatus"
                        ],
                        "properties": {
                          "veteranInfoId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "yearEntrdService": {
                            "type": "integer"
                          },
                          "yearSeparated": {
                            "type": "integer"
                          },
                          "worldWar2": {
                            "type": "integer"
                          },
                          "koreanWar": {
                            "type": "integer"
                          },
                          "vietnamWar": {
                            "type": "integer"
                          },
                          "desertStorm": {
                            "type": "integer"
                          },
                          "afghanistanOef": {
                            "type": "integer"
                          },
                          "iraqOif": {
                            "type": "integer"
                          },
                          "iraqOnd": {
                            "type": "integer"
                          },
                          "otherTheater": {
                            "type": "integer"
                          },
                          "militaryBranch": {
                            "type": "integer"
                          },
                          "dischargeStatus": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  veteranInfo:
                    veteranInfoId: bf09eb50-b641-486e-bf7e-49e9faa37c41
                    yearEntrdService: 1
                    yearSeparated: 1
                    worldWar2: 1
                    koreanWar: 1
                    vietnamWar: 1
                    desertStorm: 1
                    afghanistanOef: 1
                    iraqOif: 1
                    iraqOnd: 1
                    otherTheater: 1
                    militaryBranch: 1
                    dischargeStatus: 1
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a veteraninfo
      operationId: POST_clients-clientId-veteraninfos
      requestBody:
        content:
          application/json:
            example:
              veteranInfo:
                yearEntrdService: 1164728538
                yearSeperated: -410173299
                worldWar2: 1
                koreanWar: 8
                vietnamWar: 9
                desertStorm: 8
                afghanistanOef: 99
                iraqOif: 1
                iraqOnd: 1
                otherTheater: 9
                militaryBranch: 2
                dischargeStatus: 5
            schema:
              {
                "type": "object",
                "required": [
                  "veteranInfo"
                ],
                "properties": {
                  "veteranInfo": {
                    "type": "object",
                    "required": [
                      "yearEntrdService",
                      "yearSeperated",
                      "worldWar2",
                      "koreanWar",
                      "vietnamWar",
                      "desertStorm",
                      "afghanistanOef",
                      "iraqOif",
                      "iraqOnd",
                      "otherTheater",
                      "militaryBranch",
                      "dischargeStatus"
                    ],
                    "properties": {
                      "yearEntrdService": {
                        "type": "integer"
                      },
                      "yearSeperated": {
                        "type": "integer"
                      },
                      "worldWar2": {
                        "type": "integer"
                      },
                      "koreanWar": {
                        "type": "integer"
                      },
                      "vietnamWar": {
                        "type": "integer"
                      },
                      "desertStorm": {
                        "type": "integer"
                      },
                      "afghanistanOef": {
                        "type": "integer"
                      },
                      "iraqOif": {
                        "type": "integer"
                      },
                      "iraqOnd": {
                        "type": "integer"
                      },
                      "otherTheater": {
                        "type": "integer"
                      },
                      "militaryBranch": {
                        "type": "integer"
                      },
                      "dischargeStatus": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/veteraninfos/{veteraninfoid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                veteranInfo:
                  veteranInfoId: bf09eb50-b641-486e-bf7e-49e9faa37c41
                  yearEntrdService: 1
                  yearSeparated: 1
                  worldWar2: 1
                  koreanWar: 1
                  vietnamWar: 1
                  desertStorm: 1
                  afghanistanOef: 1
                  iraqOif: 1
                  iraqOnd: 1
                  otherTheater: 1
                  militaryBranch: 1
                  dischargeStatus: 1
              schema:
                {
                  "type": "object",
                  "required": [
                    "veteranInfo"
                  ],
                  "properties": {
                    "veteranInfo": {
                      "type": "object",
                      "required": [
                        "veteranInfoId",
                        "yearEntrdService",
                        "yearSeparated",
                        "worldWar2",
                        "koreanWar",
                        "vietnamWar",
                        "desertStorm",
                        "afghanistanOef",
                        "iraqOif",
                        "iraqOnd",
                        "otherTheater",
                        "militaryBranch",
                        "dischargeStatus"
                      ],
                      "properties": {
                        "veteranInfoId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "yearEntrdService": {
                          "type": "integer"
                        },
                        "yearSeparated": {
                          "type": "integer"
                        },
                        "worldWar2": {
                          "type": "integer"
                        },
                        "koreanWar": {
                          "type": "integer"
                        },
                        "vietnamWar": {
                          "type": "integer"
                        },
                        "desertStorm": {
                          "type": "integer"
                        },
                        "afghanistanOef": {
                          "type": "integer"
                        },
                        "iraqOif": {
                          "type": "integer"
                        },
                        "iraqOnd": {
                          "type": "integer"
                        },
                        "otherTheater": {
                          "type": "integer"
                        },
                        "militaryBranch": {
                          "type": "integer"
                        },
                        "dischargeStatus": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a veteraninfo using a URI resource parameter/ID.
      operationId: GET_clients-clientId-veteraninfos-veteraninfoid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific veteraninfo specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientId-veteraninfos-veteraninfoid
      requestBody:
        content:
          application/json:
            example:
              veteranInfo:
                yearEntrdService: 1164728538
                yearSeperated: -410173299
                worldWar2: 1
                koreanWar: 8
                vietnamWar: 9
                desertStorm: 8
                afghanistanOef: 99
                iraqOif: 1
                iraqOnd: 1
                otherTheater: 9
                militaryBranch: 2
                dischargeStatus: 5
            schema:
              {
                "type": "object",
                "required": [
                  "veteranInfo"
                ],
                "properties": {
                  "veteranInfo": {
                    "type": "object",
                    "required": [
                      "yearEntrdService",
                      "yearSeperated",
                      "worldWar2",
                      "koreanWar",
                      "vietnamWar",
                      "desertStorm",
                      "afghanistanOef",
                      "iraqOif",
                      "iraqOnd",
                      "otherTheater",
                      "militaryBranch",
                      "dischargeStatus"
                    ],
                    "properties": {
                      "yearEntrdService": {
                        "type": "integer"
                      },
                      "yearSeperated": {
                        "type": "integer"
                      },
                      "worldWar2": {
                        "type": "integer"
                      },
                      "koreanWar": {
                        "type": "integer"
                      },
                      "vietnamWar": {
                        "type": "integer"
                      },
                      "desertStorm": {
                        "type": "integer"
                      },
                      "afghanistanOef": {
                        "type": "integer"
                      },
                      "iraqOif": {
                        "type": "integer"
                      },
                      "iraqOnd": {
                        "type": "integer"
                      },
                      "otherTheater": {
                        "type": "integer"
                      },
                      "militaryBranch": {
                        "type": "integer"
                      },
                      "dischargeStatus": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific veteraninfo specified by the URI resource
        parameter/ID.
      operationId: DELETE_clients-clientId-veteraninfos-veteraninfoid
    parameters:
      - name: veteraninfoid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Veteraninfo Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  '/clients/{clientid}/veteraninfos/{veteraninfoid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                veteranInfos:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  veteranInfos:
                    - veteranInfoId: d0f7f763-dba8-4bc5-9602-d6e3775c59d3
                      yearEntrdService: 1164728538
                      yearSeperated: -410173299
                      worldWar2: 1
                      koreanWar: 8
                      vietnamWar: 9
                      desertStorm: 8
                      afghanistanOef: 99
                      iraqOif: 1
                      iraqOnd: 1
                      otherTheater: 9
                      militaryBranch: 2
                      dischargeStatus: 5
              schema:
                {
                  "type": "object",
                  "required": [
                    "veteranInfos"
                  ],
                  "properties": {
                    "veteranInfos": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "veteranInfos"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "veteranInfos": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "veteranInfoId",
                              "yearEntrdService",
                              "yearSeperated",
                              "worldWar2",
                              "koreanWar",
                              "vietnamWar",
                              "desertStorm",
                              "afghanistanOef",
                              "iraqOif",
                              "iraqOnd",
                              "otherTheater",
                              "militaryBranch",
                              "dischargeStatus"
                            ],
                            "properties": {
                              "veteranInfoId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "yearEntrdService": {
                                "type": "integer"
                              },
                              "yearSeperated": {
                                "type": "integer"
                              },
                              "worldWar2": {
                                "type": "integer"
                              },
                              "koreanWar": {
                                "type": "integer"
                              },
                              "vietnamWar": {
                                "type": "integer"
                              },
                              "desertStorm": {
                                "type": "integer"
                              },
                              "afghanistanOef": {
                                "type": "integer"
                              },
                              "iraqOif": {
                                "type": "integer"
                              },
                              "iraqOnd": {
                                "type": "integer"
                              },
                              "otherTheater": {
                                "type": "integer"
                              },
                              "militaryBranch": {
                                "type": "integer"
                              },
                              "dischargeStatus": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for veteraninfo history.  Returns a list of veteraninfo ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientId-veteraninfos-veteraninfoid-history
    parameters:
      - name: veteraninfoid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Veteraninfo Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
          format: "uuid"
        description: Client Identifier
  /projects:
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                projects:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  projects:
                    - projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                      projectName: Homeless People Project
                      projectCommonName: Homeless People Project
                      continuumProject: 0
                      projectType: 1
                      residentialAffiliation: 0
                      targetPopulation: 1
                      trackingMethod: 0
                      sourceSystemId: source123
                      dateCreated: 03-15-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "projects"
                  ],
                  "properties": {
                    "projects": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "projects"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "projects": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "projectId",
                              "projectName",
                              "projectCommonName",
                              "continuumProject",
                              "projectType",
                              "residentialAffiliation",
                              "targetPopulation",
                              "trackingMethod",
                              "sourceSystemId",
                              "dateCreated"
                            ],
                            "properties": {
                              "projectId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "projectName": {
                                "type": "string",
                              },
                              "projectCommonName": {
                                "type": "string",
                              },
                              "continuumProject": {
                                "type": "integer"
                              },
                              "projectType": {
                                "type": "integer"
                              },
                              "residentialAffiliation": {
                                "type": "integer"
                              },
                              "targetPopulation": {
                                "type": "integer"
                              },
                              "trackingMethod": {
                                "type": "integer"
                              },
                              "sourceSystemId": {
                                "type": "string",
                              },
                              "dateCreated": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for project.  Returns a list of project ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "project"
                    ],
                    "properties": {
                      "project": {
                        "type": "object",
                        "required": [
                          "projectId",
                          "projectName",
                          "projectCommonName",
                          "continuumProject",
                          "projectType",
                          "targetPopulation",
                          "trackingMethod",
                          "sourceSystemId",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "projectId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "projectName": {
                            "type": "string",
                          },
                          "projectCommonName": {
                            "type": "string",
                          },
                          "continuumProject": {
                            "type": "integer"
                          },
                          "projectType": {
                            "type": "integer"
                          },
                          "targetPopulation": {
                            "type": "integer"
                          },
                          "trackingMethod": {
                            "type": "integer"
                          },
                          "sourceSystemId": {
                            "type": "string",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  project:
                    projectId: d12a5b43-9411-4fe3-8cd3-0778459d0911
                    projectName: ProjectName_1459515376900
                    projectCommonName: ProjectCommonName_1459515376900
                    continuumProject: 0
                    projectType: 2
                    targetPopulation: 3
                    trackingMethod: 0
                    sourceSystemId: source123
                    dateCreated: 05-11-2020
                    dateUpdated: 05-11-2020
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a project
      operationId: POST_projects
      requestBody:
        content:
          application/json:
            example:
              project:
                projectName: ProjectName_1459515376900
                projectCommonName: ProjectCommonName_1459515376900
                continuumProject: 0
                projectType: 2
                residentialAffiliation: 0
                targetPopulation: 3
                trackingMethod: 0
                sourceSystemId: source123
            schema:
              {
                "type": "object",
                "required": [
                  "project"
                ],
                "properties": {
                  "project": {
                    "type": "object",
                    "required": [
                      "projectName",
                      "projectCommonName",
                      "continuumProject",
                      "projectType",
                      "residentialAffiliation",
                      "targetPopulation",
                      "trackingMethod",
                      "sourceSystemId"
                    ],
                    "properties": {
                      "projectName": {
                        "type": "string",
                      },
                      "projectCommonName": {
                        "type": "string",
                      },
                      "continuumProject": {
                        "type": "integer"
                      },
                      "projectType": {
                        "type": "integer"
                      },
                      "residentialAffiliation": {
                        "type": "integer"
                      },
                      "targetPopulation": {
                        "type": "integer"
                      },
                      "trackingMethod": {
                        "type": "integer"
                      },
                      "sourceSystemId": {
                        "type": "string",
                      }
                    }
                  }
                }
              }
        required: true
  '/projects/{projectid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                project:
                  projectId: d12a5b43-9411-4fe3-8cd3-0778459d0911
                  projectName: ProjectName_1459515376900
                  projectCommonName: ProjectCommonName_1459515376900
                  continuumProject: 0
                  projectType: 2
                  targetPopulation: 3
                  trackingMethod: 0
                  dateCreated: 05-11-2020
                  dateUpdated: 05-11-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "project"
                  ],
                  "properties": {
                    "project": {
                      "type": "object",
                      "required": [
                        "projectId",
                        "projectName",
                        "projectCommonName",
                        "continuumProject",
                        "projectType",
                        "targetPopulation",
                        "trackingMethod",
                        "dateCreated",
                        "dateUpdated"
                      ],
                      "properties": {
                        "projectId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "projectName": {
                          "type": "string",
                        },
                        "projectCommonName": {
                          "type": "string",
                        },
                        "continuumProject": {
                          "type": "integer"
                        },
                        "projectType": {
                          "type": "integer"
                        },
                        "targetPopulation": {
                          "type": "integer"
                        },
                        "trackingMethod": {
                          "type": "integer"
                        },
                        "dateCreated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dateUpdated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a project using a URI resource parameter/ID.
      operationId: GET_projects-projectId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific project specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectId
      requestBody:
        content:
          application/json:
            example:
              project:
                projectName: ProjectName_1459515376900
                projectCommonName: ProjectCommonName_1459515376900
                continuumProject: 0
                projectType: 2
                residentialAffiliation: 0
                targetPopulation: 3
                trackingMethod: 0
                sourceSystemId: source123
            schema:
              {
                "type": "object",
                "required": [
                  "project"
                ],
                "properties": {
                  "project": {
                    "type": "object",
                    "required": [
                      "projectName",
                      "projectCommonName",
                      "continuumProject",
                      "projectType",
                      "residentialAffiliation",
                      "targetPopulation",
                      "trackingMethod",
                      "sourceSystemId"
                    ],
                    "properties": {
                      "projectName": {
                        "type": "string",
                      },
                      "projectCommonName": {
                        "type": "string",
                      },
                      "continuumProject": {
                        "type": "integer"
                      },
                      "projectType": {
                        "type": "integer"
                      },
                      "residentialAffiliation": {
                        "type": "integer"
                      },
                      "targetPopulation": {
                        "type": "integer"
                      },
                      "trackingMethod": {
                        "type": "integer"
                      },
                      "sourceSystemId": {
                        "type": "string",
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific project specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectId
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                projects:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  projects:
                    - projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                      projectName: Homeless People Project
                      projectCommonName: Homeless People Project
                      continuumProject: 0
                      projectType: 1
                      residentialAffiliation: 0
                      targetPopulation: 1
                      trackingMethod: 0
                      sourceSystemId: source123
                      dateCreated: 03-15-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "projects"
                  ],
                  "properties": {
                    "projects": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "projects"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "projects": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "projectId",
                              "projectName",
                              "projectCommonName",
                              "continuumProject",
                              "projectType",
                              "residentialAffiliation",
                              "targetPopulation",
                              "trackingMethod",
                              "sourceSystemId",
                              "dateCreated"
                            ],
                            "properties": {
                              "projectId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "projectName": {
                                "type": "string",
                              },
                              "projectCommonName": {
                                "type": "string",
                              },
                              "continuumProject": {
                                "type": "integer"
                              },
                              "projectType": {
                                "type": "integer"
                              },
                              "residentialAffiliation": {
                                "type": "integer"
                              },
                              "targetPopulation": {
                                "type": "integer"
                              },
                              "trackingMethod": {
                                "type": "integer"
                              },
                              "sourceSystemId": {
                                "type": "string",
                              },
                              "dateCreated": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.

        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for project history.  Returns a list of project ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectId-history
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                projectCocs:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  projectCocs:
                    - projectCocId: a72c1666-cf51-47e4-8c2e-6ae5b8688cca
                      cocCode: HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y
                      dateCreated: 05-11-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "projectCocs"
                  ],
                  "properties": {
                    "projectCocs": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "projectCocs"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "projectCocs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "projectCocId",
                              "cocCode",
                              "dateCreated"
                            ],
                            "properties": {
                              "projectCocId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "cocCode": {
                                "type": "string",
                              },
                              "dateCreated": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for projectCoc.  Returns a list of projectCoc ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectId-projectCocs

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectCoc"
                    ],
                    "properties": {
                      "projectCoc": {
                        "type": "object",
                        "required": [
                          "projectCocId",
                          "cocCode",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "projectCocId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "cocCode": {
                            "type": "string",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  projectCoc:
                    projectCocId: a72c1666-cf51-47e4-8c2e-6ae5b8688cca
                    cocCode: HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y
                    dateCreated: 05-11-2020
                    dateUpdated: 05-11-2020
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a projectCoc
      operationId: POST_projects-projectId-projectCocs
      requestBody:
        content:
          application/json:
            example:
              projectCoc:
                cocCode: HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y
            schema:
              {
                "type": "object",
                "required": [
                  "projectCoc"
                ],
                "properties": {
                  "projectCoc": {
                    "type": "object",
                    "required": [
                      "cocCode"
                    ],
                    "properties": {
                      "cocCode": {
                        "type": "string",
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                projectCoc:
                  projectCocId: a72c1666-cf51-47e4-8c2e-6ae5b8688cca
                  cocCode: HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y
                  dateCreated: 05-11-2020
                  dateUpdated: 05-11-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "projectCoc"
                  ],
                  "properties": {
                    "projectCoc": {
                      "type": "object",
                      "required": [
                        "projectCocId",
                        "cocCode",
                        "dateCreated",
                        "dateUpdated"
                      ],
                      "properties": {
                        "projectCocId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "cocCode": {
                          "type": "string",
                        },
                        "dateCreated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dateUpdated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a projectCoc using a URI resource parameter/ID.
      operationId: GET_projects-projectId-projectCocs-projectCocid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific projectCoc specified by the URI resource
        parameter/ID.
      operationId: PUT_projects-projectId-projectCocs-projectCocid
      requestBody:
        content:
          application/json:
            example:
              projectCoc:
                cocCode: HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y
            schema:
              {
                "type": "object",
                "required": [
                  "projectCoc"
                ],
                "properties": {
                  "projectCoc": {
                    "type": "object",
                    "required": [
                      "cocCode"
                    ],
                    "properties": {
                      "cocCode": {
                        "type": "string",
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific projectCoc specified by the URI resource
        parameter/ID.
      operationId: DELETE_projects-projectId-projectCocs-projectCocid
    parameters:
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: projectCoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                projectCocs:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  projectCocs:
                    - projectCocId: a72c1666-cf51-47e4-8c2e-6ae5b8688cca
                      cocCode: HPltHrjWAdDWKDYBj7dvUfzEvrNc2Y
                      dateCreated: 05-11-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "projectCocs"
                  ],
                  "properties": {
                    "projectCocs": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "projectCocs"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "projectCocs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "projectCocId",
                              "cocCode",
                              "dateCreated"
                            ],
                            "properties": {
                              "projectCocId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "cocCode": {
                                "type": "string",
                              },
                              "dateCreated": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for projectCoc history.  Returns a list of projectCoc ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectId-projectCocs-projectCocid-history
    parameters:
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: projectCoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/inventories':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                Inventories:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  inventories:
                    - inventoryId: 74e4ed15-688e-4dfa-9609-1c6161d0dedd
                      availabilty: 2
                      bedType: 1
                      hmisParticipatingBeds: -791575690
                      householdType: 3
                      chBedInventory: 1
                      vetBedInventory: 2
                      youthBedinventory: 3
                      youthAgegroup: 4
                      unitInventory: 1579850350
                      dateCreated: 05-12-2020
                      inventoryendDate: 02-04-2020
                      inventorystartDate: 02-04-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "Inventories"
                  ],
                  "properties": {
                    "Inventories": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "inventories"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "inventories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "inventoryId",
                              "availabilty",
                              "bedType",
                              "hmisParticipatingBeds",
                              "householdType",
                              "chBedInventory",
                              "vetBedInventory",
                              "youthBedinventory",
                              "youthAgegroup",
                              "unitInventory",
                              "dateCreated",
                              "inventoryendDate",
                              "inventorystartDate"
                            ],
                            "properties": {
                              "inventoryId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "availabilty": {
                                "type": "integer"
                              },
                              "bedType": {
                                "type": "integer"
                              },
                              "hmisParticipatingBeds": {
                                "type": "integer"
                              },
                              "householdType": {
                                "type": "integer"
                              },
                              "chBedInventory": {
                                "type": "integer"
                              },
                              "vetBedInventory": {
                                "type": "integer"
                              },
                              "youthBedinventory": {
                                "type": "integer"
                              },
                              "youthAgegroup": {
                                "type": "integer"
                              },
                              "unitInventory": {
                                "type": "integer"
                              },
                              "dateCreated": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              },
                              "inventoryendDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              },
                              "inventorystartDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for inventory.  Returns a list of inventory ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectId-inventories

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "inventory"
                    ],
                    "properties": {
                      "inventory": {
                        "type": "object",
                        "required": [
                          "inventoryId",
                          "availabilty",
                          "bedType",
                          "hmisParticipatingBeds",
                          "householdType",
                          "chBedInventory",
                          "vetBedInventory",
                          "youthBedinventory",
                          "youthAgegroup",
                          "unitInventory",
                          "dateCreated",
                          "inventoryendDate",
                          "inventorystartDate",
                          "dateUpdated"
                        ],
                        "properties": {
                          "inventoryId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "availabilty": {
                            "type": "integer"
                          },
                          "bedType": {
                            "type": "integer"
                          },
                          "hmisParticipatingBeds": {
                            "type": "integer"
                          },
                          "householdType": {
                            "type": "integer"
                          },
                          "chBedInventory": {
                            "type": "integer"
                          },
                          "vetBedInventory": {
                            "type": "integer"
                          },
                          "youthBedinventory": {
                            "type": "integer"
                          },
                          "youthAgegroup": {
                            "type": "integer"
                          },
                          "unitInventory": {
                            "type": "integer"
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "inventoryendDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "inventorystartDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  inventory:
                    inventoryId: 74e4ed15-688e-4dfa-9609-1c6161d0dedd
                    availabilty: 2
                    bedType: 1
                    hmisParticipatingBeds: -791575690
                    householdType: 3
                    chBedInventory: 1
                    vetBedInventory: 2
                    youthBedinventory: 3
                    youthAgegroup: 4
                    unitInventory: 1579850350
                    dateCreated: 05-12-2020
                    inventoryendDate: 02-04-2020
                    inventorystartDate: 02-04-2020
                    dateUpdated: 05-12-2020
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a inventory
      operationId: POST_projects-projectId-inventories
      requestBody:
        content:
          application/json:
            example:
              inventory:
                availabilty: 2
                bedType: 1
                hmisParticipatingBeds: -791575690
                householdType: 3
                chBedInventory: 1
                vetBedInventory: 2
                youthBedinventory: 3
                youthAgegroup: 4
                unitInventory: 1579850350
                inventoryendDate: 02-04-2020
                inventorystartDate: 02-04-2020
            schema:
              {
                "type": "object",
                "required": [
                  "inventory"
                ],
                "properties": {
                  "inventory": {
                    "type": "object",
                    "required": [
                      "availabilty",
                      "bedType",
                      "hmisParticipatingBeds",
                      "householdType",
                      "chBedInventory",
                      "vetBedInventory",
                      "youthBedinventory",
                      "youthAgegroup",
                      "unitInventory",
                      "inventoryendDate",
                      "inventorystartDate"
                    ],
                    "properties": {
                      "availabilty": {
                        "type": "integer"
                      },
                      "bedType": {
                        "type": "integer"
                      },
                      "hmisParticipatingBeds": {
                        "type": "integer"
                      },
                      "householdType": {
                        "type": "integer"
                      },
                      "chBedInventory": {
                        "type": "integer"
                      },
                      "vetBedInventory": {
                        "type": "integer"
                      },
                      "youthBedinventory": {
                        "type": "integer"
                      },
                      "youthAgegroup": {
                        "type": "integer"
                      },
                      "unitInventory": {
                        "type": "integer"
                      },
                      "inventoryendDate": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      },
                      "inventorystartDate": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/inventories/{inventoryid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                inventory:
                  inventoryId: 74e4ed15-688e-4dfa-9609-1c6161d0dedd
                  availabilty: 2
                  bedType: 1
                  hmisParticipatingBeds: -791575690
                  householdType: 3
                  chBedInventory: 1
                  vetBedInventory: 2
                  youthBedinventory: 3
                  youthAgegroup: 4
                  unitInventory: 1579850350
                  dateCreated: 05-12-2020
                  inventoryendDate: 02-04-2020
                  inventorystartDate: 02-04-2020
                  dateUpdated: 05-12-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "inventory"
                  ],
                  "properties": {
                    "inventory": {
                      "type": "object",
                      "required": [
                        "inventoryId",
                        "availabilty",
                        "bedType",
                        "hmisParticipatingBeds",
                        "householdType",
                        "chBedInventory",
                        "vetBedInventory",
                        "youthBedinventory",
                        "youthAgegroup",
                        "unitInventory",
                        "dateCreated",
                        "inventoryendDate",
                        "inventorystartDate",
                        "dateUpdated"
                      ],
                      "properties": {
                        "inventoryId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "availabilty": {
                          "type": "integer"
                        },
                        "bedType": {
                          "type": "integer"
                        },
                        "hmisParticipatingBeds": {
                          "type": "integer"
                        },
                        "householdType": {
                          "type": "integer"
                        },
                        "chBedInventory": {
                          "type": "integer"
                        },
                        "vetBedInventory": {
                          "type": "integer"
                        },
                        "youthBedinventory": {
                          "type": "integer"
                        },
                        "youthAgegroup": {
                          "type": "integer"
                        },
                        "unitInventory": {
                          "type": "integer"
                        },
                        "dateCreated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "inventoryendDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "inventorystartDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dateUpdated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a inventory using a URI resource parameter/ID.
      operationId: GET_projects-projectId-inventories-inventoryid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific inventory specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectId-inventories-inventoryid
      requestBody:
        content:
          application/json:
            example:
              inventory:
                  availabilty: 2
                  bedType: 1
                  hmisParticipatingBeds: -791575690
                  householdType: 3
                  chBedInventory: 1
                  vetBedInventory: 2
                  youthBedinventory: 3
                  youthAgegroup: 4
                  unitInventory: 1579850350
                  dateCreated: 05-12-2020
                  inventoryendDate: 02-04-2020
                  inventorystartDate: 02-04-2020
            schema:
              {
                "type": "object",
                "required": [
                  "inventory"
                ],
                "properties": {
                  "inventory": {
                    "type": "object",
                    "required": [
                      "availabilty",
                      "bedType",
                      "hmisParticipatingBeds",
                      "householdType",
                      "chBedInventory",
                      "vetBedInventory",
                      "youthBedinventory",
                      "youthAgegroup",
                      "unitInventory",
                      "dateCreated",
                      "inventoryendDate",
                      "inventorystartDate"
                    ],
                    "properties": {
                      "availabilty": {
                        "type": "integer"
                      },
                      "bedType": {
                        "type": "integer"
                      },
                      "hmisParticipatingBeds": {
                        "type": "integer"
                      },
                      "householdType": {
                        "type": "integer"
                      },
                      "chBedInventory": {
                        "type": "integer"
                      },
                      "vetBedInventory": {
                        "type": "integer"
                      },
                      "youthBedinventory": {
                        "type": "integer"
                      },
                      "youthAgegroup": {
                        "type": "integer"
                      },
                      "unitInventory": {
                        "type": "integer"
                      },
                      "dateCreated": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      },
                      "inventoryendDate": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      },
                      "inventorystartDate": {
                        "type": "string",
                        "format": "mm-dd-yyyy",
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific inventory specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectId-inventories-inventoryid
    parameters:
      - name: inventoryid
        in: path
        required: true
        schema:
          type: string
        description: Inventory Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/inventories/{inventoryid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                Inventories:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  inventories:
                    - inventoryId: 74e4ed15-688e-4dfa-9609-1c6161d0dedd
                      availabilty: 2
                      bedType: 1
                      hmisParticipatingBeds: -791575690
                      householdType: 3
                      chBedInventory: 1
                      vetBedInventory: 2
                      youthBedinventory: 3
                      youthAgegroup: 4
                      unitInventory: 1579850350
                      dateCreated: 05-12-2020
                      inventoryendDate: 02-04-2020
                      inventorystartDate: 02-04-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "Inventories"
                  ],
                  "properties": {
                    "Inventories": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "inventories"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "inventories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "inventoryId",
                              "availabilty",
                              "bedType",
                              "hmisParticipatingBeds",
                              "householdType",
                              "chBedInventory",
                              "vetBedInventory",
                              "youthBedinventory",
                              "youthAgegroup",
                              "unitInventory",
                              "dateCreated",
                              "inventoryendDate",
                              "inventorystartDate"
                            ],
                            "properties": {
                              "inventoryId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "availabilty": {
                                "type": "integer"
                              },
                              "bedType": {
                                "type": "integer"
                              },
                              "hmisParticipatingBeds": {
                                "type": "integer"
                              },
                              "householdType": {
                                "type": "integer"
                              },
                              "chBedInventory": {
                                "type": "integer"
                              },
                              "vetBedInventory": {
                                "type": "integer"
                              },
                              "youthBedinventory": {
                                "type": "integer"
                              },
                              "youthAgegroup": {
                                "type": "integer"
                              },
                              "unitInventory": {
                                "type": "integer"
                              },
                              "dateCreated": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              },
                              "inventoryendDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              },
                              "inventorystartDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for inventory history.  Returns a list of inventory ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectId-inventories-inventoryid-history
    parameters:
      - name: inventoryid
        in: path
        required: true
        schema:
          type: string
        description: Inventory Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/sites':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                sites:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  sites:
                    - siteId: 336b4b5f-8e07-4582-bf88-a7c1d17bd3fc
                      address: n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu
                      city: GZbBVvo6rm
                      geoCode: -206855564
                      principalSite: 0
                      state: MN
                      zip: '123456'
                      dateCreated: 05-11-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "sites"
                  ],
                  "properties": {
                    "sites": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "sites"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "sites": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "siteId",
                              "address",
                              "city",
                              "geoCode",
                              "principalSite",
                              "state",
                              "zip",
                              "dateCreated"
                            ],
                            "properties": {
                              "siteId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "address": {
                                "type": "string",
                              },
                              "city": {
                                "type": "string",
                              },
                              "geoCode": {
                                "type": "integer"
                              },
                              "principalSite": {
                                "type": "integer"
                              },
                              "state": {
                                "type": "string",
                              },
                              "zip": {
                                "type": "string",
                              },
                              "dateCreated": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for site.  Returns a list of site ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectId-sites

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "site"
                    ],
                    "properties": {
                      "site": {
                        "type": "object",
                        "required": [
                          "siteId",
                          "address",
                          "city",
                          "geoCode",
                          "principalSite",
                          "state",
                          "zip",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "siteId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "address": {
                            "type": "string",
                          },
                          "city": {
                            "type": "string",
                          },
                          "geoCode": {
                            "type": "integer"
                          },
                          "principalSite": {
                            "type": "integer"
                          },
                          "state": {
                            "type": "string",
                          },
                          "zip": {
                            "type": "string",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  site:
                    siteId: 336b4b5f-8e07-4582-bf88-a7c1d17bd3fc
                    address: n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu
                    city: GZbBVvo6rm
                    geoCode: -206855564
                    principalSite: 0
                    state: MN
                    zip: '123456'
                    dateCreated: 05-11-2020
                    dateUpdated: 05-11-2020
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a site
      operationId: POST_projects-projectId-sites
      requestBody:
        content:
          application/json:
            example:
              site:
                address: n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu
                city: GZbBVvo6rm
                geoCode: -206855564
                principalSite: 0
                state: MN
                zip: 123456
            schema:
              {
                "type": "object",
                "required": [
                  "site"
                ],
                "properties": {
                  "site": {
                    "type": "object",
                    "required": [
                      "address",
                      "city",
                      "geoCode",
                      "principalSite",
                      "state",
                      "zip"
                    ],
                    "properties": {
                      "address": {
                        "type": "string",
                      },
                      "city": {
                        "type": "string",
                      },
                      "geoCode": {
                        "type": "integer"
                      },
                      "principalSite": {
                        "type": "integer"
                      },
                      "state": {
                        "type": "string",
                      },
                      "zip": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/sites/{siteId}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                site:
                  siteId: 336b4b5f-8e07-4582-bf88-a7c1d17bd3fc
                  address: n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu
                  city: GZbBVvo6rm
                  geoCode: -206855564
                  principalSite: 0
                  state: MN
                  zip: '123456'
                  dateCreated: 05-11-2020
                  dateUpdated: 05-11-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "site"
                  ],
                  "properties": {
                    "site": {
                      "type": "object",
                      "required": [
                        "siteId",
                        "address",
                        "city",
                        "geoCode",
                        "principalSite",
                        "state",
                        "zip",
                        "dateCreated",
                        "dateUpdated"
                      ],
                      "properties": {
                        "siteId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "address": {
                          "type": "string",
                        },
                        "city": {
                          "type": "string",
                        },
                        "geoCode": {
                          "type": "integer"
                        },
                        "principalSite": {
                          "type": "integer"
                        },
                        "state": {
                          "type": "string",
                        },
                        "zip": {
                          "type": "string",
                        },
                        "dateCreated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dateUpdated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a site using a URI resource parameter/ID.
      operationId: GET_projects-projectId-sites-siteId
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific site specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectId-sites-siteId
      requestBody:
        content:
          application/json:
            example:
              site:
                address: n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu
                city: GZbBVvo6rm
                geoCode: -206855564
                principalSite: 0
                state: MN
                zip: 123456
            schema:
              {
                "type": "object",
                "required": [
                  "site"
                ],
                "properties": {
                  "site": {
                    "type": "object",
                    "required": [
                      "address",
                      "city",
                      "geoCode",
                      "principalSite",
                      "state",
                      "zip"
                    ],
                    "properties": {
                      "address": {
                        "type": "string",
                      },
                      "city": {
                        "type": "string",
                      },
                      "geoCode": {
                        "type": "integer"
                      },
                      "principalSite": {
                        "type": "integer"
                      },
                      "state": {
                        "type": "string",
                      },
                      "zip": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific site specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectId-sites-siteId
    parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
        description: Site Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/sites/{siteId}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                sites:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  sites:
                    - siteId: 336b4b5f-8e07-4582-bf88-a7c1d17bd3fc
                      address: n4wuRkopYjCtFz52omPRSIyO0o6e1LuZ6XPafjcqPZCgYBphlu
                      city: GZbBVvo6rm
                      geoCode: -206855564
                      principalSite: 0
                      state: MN
                      zip: '123456'
                      dateCreated: 05-11-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "sites"
                  ],
                  "properties": {
                    "sites": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "sites"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "sites": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "siteId",
                              "address",
                              "city",
                              "geoCode",
                              "principalSite",
                              "state",
                              "zip",
                              "dateCreated"
                            ],
                            "properties": {
                              "siteId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "address": {
                                "type": "string",
                              },
                              "city": {
                                "type": "string",
                              },
                              "geoCode": {
                                "type": "integer"
                              },
                              "principalSite": {
                                "type": "integer"
                              },
                              "state": {
                                "type": "string",
                              },
                              "zip": {
                                "type": "string",
                              },
                              "dateCreated": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for site history.  Returns a list of site ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectId-sites-siteId-history
    parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
        description: Site Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/funders':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                funders:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  funders:
                    - funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                      funder: 8
                      grantId: a2cac563-e852-487b-996d-b1bae8225234
                      dateCreated: 05-11-2020
                      endDate: 04-16-2020
                      startDate: 02-04-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "funders"
                  ],
                  "properties": {
                    "funders": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "funders"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "funders": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "funderId",
                              "funder",
                              "grantId",
                              "dateCreated",
                              "endDate",
                              "startDate"
                            ],
                            "properties": {
                              "funderId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "funder": {
                                "type": "integer"
                              },
                              "grantId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "dateCreated": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              },
                              "endDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              },
                              "startDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for funder.  Returns a list of funder ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectId-funders

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "funder"
                    ],
                    "properties": {
                      "funder": {
                        "type": "object",
                        "required": [
                          "funderId",
                          "funder",
                          "grantId",
                          "dateCreated",
                          "dateUpdated",
                          "endDate",
                          "startDate"
                        ],
                        "properties": {
                          "funderId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "funder": {
                            "type": "integer"
                          },
                          "grantId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "endDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "startDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  funder:
                    funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                    funder: 8
                    grantId: a2cac563-e852-487b-996d-b1bae8225234
                    dateCreated: 05-11-2020
                    dateUpdated: 05-11-2020
                    endDate: 04-16-2020
                    startDate: 02-04-2020
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a funder
      operationId: POST_projects-projectId-funders
      requestBody:
        content:
          application/json:
            example:
              funder:
                endDate: '04-16-2020 11:11'
                funder: 8
                grantId: a2cac563-e852-487b-996d-b1bae8225234
                startDate: '02-04-2020 12:12'
            schema:
              {
                "type": "object",
                "required": [
                  "funder"
                ],
                "properties": {
                  "funder": {
                    "type": "object",
                    "required": [
                      "endDate",
                      "funder",
                      "grantId",
                      "startDate"
                    ],
                    "properties": {
                      "endDate": {
                        "type": "string",
                        "format": "MM-dd-YYYY HH:mm",
                      },
                      "funder": {
                        "type": "integer"
                      },
                      "grantId": {
                        "type": "string",
                        "format": "uuid",
                      },
                      "startDate": {
                        "type": "string",
                        "format": "MM-dd-YYYY HH:mm",
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/funders/{funderid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                funder:
                  funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                  funder: 8
                  grantId: a2cac563-e852-487b-996d-b1bae8225234
                  dateCreated: 05-11-2020
                  dateUpdated: 05-11-2020
                  endDate: 04-16-2020
                  startDate: 02-04-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "funder"
                  ],
                  "properties": {
                    "funder": {
                      "type": "object",
                      "required": [
                        "funderId",
                        "funder",
                        "grantId",
                        "dateCreated",
                        "dateUpdated",
                        "endDate",
                        "startDate"
                      ],
                      "properties": {
                        "funderId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "funder": {
                          "type": "integer"
                        },
                        "grantId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "dateCreated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dateUpdated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "endDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "startDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a funder using a URI resource parameter/ID.
      operationId: GET_projects-projectId-funders-funderid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific funder specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectId-funders-funderid
      requestBody:
        content:
          application/json:
            example:
              funder:
                endDate: '04-16-2020 11:11'
                funder: 8
                grantId: a2cac563-e852-487b-996d-b1bae8225234
                startDate: '02-04-2020 12:12'
            schema:
              {
                "type": "object",
                "required": [
                  "funder"
                ],
                "properties": {
                  "funder": {
                    "type": "object",
                    "required": [
                      "endDate",
                      "funder",
                      "grantId",
                      "startDate"
                    ],
                    "properties": {
                      "endDate": {
                        "type": "string",
                        "format": "MM-dd-YYYY HH:mm",
                      },
                      "funder": {
                        "type": "integer"
                      },
                      "grantId": {
                        "type": "string",
                        "format": "uuid",
                      },
                      "startDate": {
                        "type": "string",
                        "format": "MM-dd-YYYY HH:mm",
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific funder specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectId-funders-funderid
    parameters:
      - name: funderid
        in: path
        required: true
        schema:
          type: string
        description: Funder Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/funders/{funderid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                funders:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  funders:
                    - funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                      funder: 8
                      grantId: a2cac563-e852-487b-996d-b1bae8225234
                      dateCreated: 05-11-2020
                      endDate: 04-16-2020
                      startDate: 02-04-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "funders"
                  ],
                  "properties": {
                    "funders": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "funders"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "funders": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "funderId",
                              "funder",
                              "grantId",
                              "dateCreated",
                              "endDate",
                              "startDate"
                            ],
                            "properties": {
                              "funderId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "funder": {
                                "type": "integer"
                              },
                              "grantId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "dateCreated": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              },
                              "endDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              },
                              "startDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for funder history.  Returns a list of funder ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectId-funders-funderid-history
    parameters:
      - name: funderid
        in: path
        required: true
        schema:
          type: string
        description: Funder Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/affiliations':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                affiliations:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  affiliations:
                    - affiliationId: f3c479a5-041a-49f6-b3ce-c999ec0bee40
                      resprojectId: lVkFrvuVDsJcxR9z1cNC
                      dateCreated: 04-25-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "affiliations"
                  ],
                  "properties": {
                    "affiliations": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "affiliations"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "affiliations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "affiliationId",
                              "resprojectId",
                              "dateCreated"
                            ],
                            "properties": {
                              "affiliationId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "resprojectId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "dateCreated": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for affiliation.  Returns a list of affiliation ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectId-affiliations

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "affiliation"
                    ],
                    "properties": {
                      "affiliation": {
                        "type": "object",
                        "required": [
                          "affiliationId",
                          "resprojectId",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "properties": {
                          "affiliationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "resprojectId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dateUpdated": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  affiliation:
                    affiliationId: f3c479a5-041a-49f6-b3ce-c999ec0bee40
                    resprojectId: lVkFrvuVDsJcxR9z1cNC
                    dateCreated: 04-25-2020
                    dateUpdated: 04-25-2020
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a affiliation
      operationId: POST_projects-projectId-affiliations
      requestBody:
        content:
          application/json:
            example:
              affiliation:
                resprojectId: lVkFrvuVDsJcxR9z1cNC
            schema:
              {
                "type": "object",
                "required": [
                  "affiliation"
                ],
                "properties": {
                  "affiliation": {
                    "type": "object",
                    "required": [
                      "resprojectId"
                    ],
                    "properties": {
                      "resprojectId": {
                        "type": "string",
                        "format": "uuid",
                      }
                    }
                  }
                }
              }
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/affiliations/{affiliationid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                affiliation:
                  affiliationId: f3c479a5-041a-49f6-b3ce-c999ec0bee40
                  resprojectId: lVkFrvuVDsJcxR9z1cNC
                  dateCreated: 04-25-2020
                  dateUpdated: 04-25-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "affiliation"
                  ],
                  "properties": {
                    "affiliation": {
                      "type": "object",
                      "required": [
                        "affiliationId",
                        "resprojectId",
                        "dateCreated",
                        "dateUpdated"
                      ],
                      "properties": {
                        "affiliationId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "resprojectId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "dateCreated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dateUpdated": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a affiliation using a URI resource parameter/ID.
      operationId: GET_projects-projectId-affiliations-affiliationid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific affiliation specified by the URI resource
        parameter/ID.
      operationId: PUT_projects-projectId-affiliations-affiliationid
      requestBody:
        content:
          application/json:
            example:
              affiliation:
                resprojectId: lVkFrvuVDsJcxR9z1cNC
            schema:
              {
                "type": "object",
                "required": [
                  "affiliation"
                ],
                "properties": {
                  "affiliation": {
                    "type": "object",
                    "required": [
                      "resprojectId"
                    ],
                    "properties": {
                      "resprojectId": {
                        "type": "string",
                        "format": "uuid",
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific affiliation specified by the URI resource
        parameter/ID.
      operationId: DELETE_projects-projectId-affiliations-affiliationid
    parameters:
      - name: affiliationid
        in: path
        required: true
        schema:
          type: string
        description: Affiliation Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/affiliations/{affiliationid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                affiliations:
                  pagination:
                    from: 0
                    returned: 1
                    total: 1
                    maximum: 30
                    sort: {}
                  affiliations:
                    - affiliationId: f3c479a5-041a-49f6-b3ce-c999ec0bee40
                      resprojectId: lVkFrvuVDsJcxR9z1cNC
                      dateCreated: 04-25-2020
              schema:
                {
                  "type": "object",
                  "required": [
                    "affiliations"
                  ],
                  "properties": {
                    "affiliations": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "affiliations"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "affiliations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "affiliationId",
                              "resprojectId",
                              "dateCreated"
                            ],
                            "properties": {
                              "affiliationId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "resprojectId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "dateCreated": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for affiliation history.  Returns a list of affiliation ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectId-affiliations-affiliationid-history
    parameters:
      - name: affiliationid
        in: path
        required: true
        schema:
          type: string
        description: Affiliation Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  /organizations:
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                Organizations:
                  pagination:
                    from: 0
                    returned: 16
                    total: 16
                    maximum: 30
                    sort: {}
                  organizations:
                    - organizationId: 81a20cb3-e000-473c-a3e6-cddcba15a02f
                      organizationCommonName: BBR
                      organizationName: BBjksdjgjdR
                    - organizationId: f6807bb4-fb1e-4ce4-aa28-ba61b2ee4342
                      organizationCommonName: BBR
                      organizationName: BBjksdjgjdR
              schema:
                {
                  "type": "object",
                  "required": [
                    "Organizations"
                  ],
                  "properties": {
                    "Organizations": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "organizations"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "organizations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "organizationId",
                              "organizationCommonName",
                              "organizationName"
                            ],
                            "properties": {
                              "organizationId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "organizationCommonName": {
                                "type": "string",
                              },
                              "organizationName": {
                                "type": "string",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for organization.  Returns a list of organization ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_organizations

    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "organization"
                    ],
                    "properties": {
                      "organization": {
                        "type": "object",
                        "required": [
                          "organizationId",
                          "organizationCommonName"
                        ],
                        "properties": {
                          "organizationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "organizationCommonName": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                  organization:
                    organizationId: 8dff4029-09b7-4293-b24b-b077b39ee673
                    organizationCommonName: BBR
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found   There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a organization
      operationId: POST_organizations
      requestBody:
        content:
          application/json:
            example:
              organization:
                organizationName: BBjksdjgjdR
                organizationCommonName: BBR
            schema:
              {
                "type": "object",
                "required": [
                  "organization"
                ],
                "properties": {
                  "organization": {
                    "type": "object",
                    "required": [
                      "organizationName",
                      "organizationCommonName"
                    ],
                    "properties": {
                      "organizationName": {
                        "type": "string",
                      },
                      "organizationCommonName": {
                        "type": "string",
                      }
                    }
                  }
                }
              }
        required: true
  '/organizations/{organizationid}':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                organization:
                  organizationId: 8dff4029-09b7-4293-b24b-b077b39ee673
                  organizationCommonName: BBR
              schema:
                {
                  "type": "object",
                  "required": [
                    "organization"
                  ],
                  "properties": {
                    "organization": {
                      "type": "object",
                      "required": [
                        "organizationId",
                        "organizationCommonName"
                      ],
                      "properties": {
                        "organizationId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "organizationCommonName": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires an user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a organization using a URI resource parameter/ID.
      operationId: GET_organizations-organizationid
    put:
      responses:
        '200':
          description: OK   Everything is working.
        '304':
          description: Not Modified   The client can use cached data.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires a user.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific organization specified by the URI resource
        parameter/ID.
      operationId: PUT_organizations-organizationid
      requestBody:
        content:
          application/json:
            example:
              organization:
                organizationName: BBjksdjgjdR
                organizationCommonName: BBR
            schema:
              {
                "type": "object",
                "required": [
                  "organization"
                ],
                "properties": {
                  "organization": {
                    "type": "object",
                    "required": [
                      "organizationName",
                      "organizationCommonName"
                    ],
                    "properties": {
                      "organizationName": {
                        "type": "string",
                      },
                      "organizationCommonName": {
                        "type": "string",
                      }
                    }
                  }
                }
              }
        required: true
    delete:
      responses:
        '204':
          description: OK   The resource was successfully deleted.
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '401':
          description: Unauthorized   The request requires user authentication.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific organization specified by the URI resource
        parameter/ID.
      operationId: DELETE_organizations-organizationid
    parameters:
      - name: organizationid
        in: path
        required: true
        schema:
          type: string
        description: Organization Identifier
  '/organizations/{organizationid}/history':
    get:
      responses:
        '200':
          description: OK   Everything is working.
          content:
            application/json:
              example:
                Organizations:
                  pagination:
                    from: 0
                    returned: 16
                    total: 16
                    maximum: 30
                    sort: {}
                  organizations:
                    - organizationId: 81a20cb3-e000-473c-a3e6-cddcba15a02f
                      organizationCommonName: BBR
                      organizationName: BBjksdjgjdR
                    - organizationId: f6807bb4-fb1e-4ce4-aa28-ba61b2ee4342
                      organizationCommonName: BBR
                      organizationName: BBjksdjgjdR
              schema:
                {
                  "type": "object",
                  "required": [
                    "Organizations"
                  ],
                  "properties": {
                    "Organizations": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "organizations"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "organizations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "organizationId",
                              "organizationCommonName",
                              "organizationName"
                            ],
                            "properties": {
                              "organizationId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "organizationCommonName": {
                                "type": "string",
                              },
                              "organizationName": {
                                "type": "string",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
        '400':
          description: Bad Request   The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden   The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found   There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for organization history.  Returns a list of organization ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_organizations-organizationid-history
    parameters:
      - name: organizationid
        in: path
        required: true
        schema:
          type: string
        description: Organization Identifier
  '/search/{searchentity}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "searchResults"
                    ],
                    "properties": {
                      "searchResults": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "items"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "total",
                              "from",
                              "maximum",
                              "returned"
                            ],
                            "properties": {
                              "total": {
                                "type": "string",
                              },
                              "from": {
                                "type": "string",
                              },
                              "maximum": {
                                "type": "string",
                              },
                              "returned": {
                                "type": "string",
                              }
                            }
                          },
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "clientId",
                                "firstName",
                                "middleName",
                                "lastName",
                                "nameSuffix",
                                "nameDataQuality",
                                "ssn",
                                "ssnDataQuality",
                                "dob",
                                "dobDataQuality",
                                "race",
                                "ethnicity",
                                "gender",
                                "otherGender",
                                "veteranStatus",
                                "link"
                              ],
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "firstName": {
                                  "type": "string",
                                },
                                "middleName": {
                                  "type": "string",
                                },
                                "lastName": {
                                  "type": "string",
                                },
                                "nameSuffix": {
                                  "type": "string",
                                },
                                "nameDataQuality": {
                                  "type": "string",
                                },
                                "ssn": {
                                  "type": "string",
                                },
                                "ssnDataQuality": {
                                  "type": "string",
                                },
                                "dob": {
                                  "type": "string",
                                },
                                "dobDataQuality": {
                                  "type": "string",
                                },
                                "race": {
                                  "type": "string",
                                },
                                "ethnicity": {
                                  "type": "string",
                                },
                                "gender": {
                                  "type": "string",
                                },
                                "otherGender": {
                                  "type": "string",
                                },
                                "veteranStatus": {
                                  "type": "string",
                                },
                                "link": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  {
                  "searchResults": {
                    "pagination": {
                      "total": "2",
                      "from": "0",
                      "maximum": "50",
                      "returned": "2"
                    },
                    "items": [
                      {
                        "clientId": "65e3df62-dd22-4d07-83ef-6858a6322839",
                        "firstName": "Eric",
                        "middleName": "Eric",
                        "lastName": "Eric",
                        "nameSuffix": "NS ",
                        "nameDataQuality": "1",
                        "ssn": "ssn ",
                        "ssnDataQuality": "1",
                        "dob": "1459498034983",
                        "dobDataQuality": "1",
                        "race": "1",
                        "ethnicity": "1",
                        "gender": "1",
                        "otherGender": "Test",
                        "veteranStatus": "8",
                        "link": "/hmis-clientapi/rest/v2015/clients/65e3df62-dd22-4d07-83ef-6858a6322839"
                      },
                      {
                        "clientId": "cf98b9b2-9a77-4133-99a3-b60f05a12ad1",
                        "firstName": "Eric",
                        "middleName": "Eric",
                        "lastName": "Eric",
                        "nameSuffix": "NS ",
                        "nameDataQuality": "1",
                        "ssn": "ssn ",
                        "ssnDataQuality": "1",
                        "dob": "1459498034983",
                        "dobDataQuality": "1",
                        "race": "1",
                        "ethnicity": "1",
                        "gender": "1",
                        "otherGender": "Test",
                        "veteranStatus": "8",
                        "link": "/hmis-clientapi/rest/v2020/clients/cf98b9b2-9a77-4133-99a3-b60f05a12ad1"
                      }
                    ]
                  }
                  }
      operationId: GET_search-searchentity
      parameters:
        - name: q
          in: query
          required: true
          description: >
            The search keywords, as well as any qualifiers. Currently supported
            search fields are first name,middle name,last name,dob,source system
            id and ssn. For search on "date of birth" field the format
            MM-dd-YYYY should be used for the search keyword.
          schema:
            type: string
        - name: sort
          in: query
          required: true
          description: The sort field. Default- results are sorted by "created date".
          schema:
            type: string
        - name: order
          in: query
          required: true
          description: >-
            The sort order if sort parameter is provided. One of asc or desc.
            Default- desc.
          schema:
            default: desc
            type: string
        - name: startIndex
          in: query
          required: true
          description: >-
            The start Index from where the search results should be returned.
            Default - 0
          schema:
            default: 0
            type: integer
        - name: maxItems
          in: query
          required: true
          description: >-
            the number or Items that should be included in the results . Default
            - 50
          schema:
            default: 50
            type: integer
        - name: exclude
          in: query
          required: true
          description: >
            Excludes fields from the search.  Currently its only supported value
            is "ssi" (to exclude source system id) only.
          schema:
            type: string
    parameters:
      - name: searchentity
        in: path
        required: true
        schema:
          type: string
  /hmistypes:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dataElements"
                    ],
                    "properties": {
                      "dataElements": {
                        "type": "object",
                        "required": [
                          "dataElements"
                        ],
                        "properties": {
                          "dataElements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  dataElements:
                    dataElements:
                      - name: trackingMethod
                      - name: afghanistan_oef
                      - name: projectCompletionStatus
                      - name: noHivAidsAssistanceReason
                      - name: not_employed_reason
                      - name: noEmployerProvidedReason
                      - name: noVaMedReason
                      - name: health_category
                      - name: employment_type
                      - name: lastGradeCompleted
                      - name: referralOutcome
                      - name: housingStatus
                      - name: monthsHomelessThisTime
                      - name: pathSmiInformation
                      - name: timesHomelessPastThreeYears
                      - name: targetpopulation
                      - name: noStateHealthInsReason
                      - name: incarceratedparentstatus
                      - name: youth_age_group
                      - name: juvenileJusticeYears
                      - name: subsidyInformation
                      - name: whenOccurred
                      - name: noMedicaidReason
                      - name: monthsHomelessPastThreeYears
                      - name: sexualorientation
                      - name: childWelfareYears
                      - name: noCobraReason
                      - name: discharge_status
                      - name: gender
                      - name: availabilty
                      - name: military_branch
                      - name: referralSource
                      - name: noPrivatePayReason
                      - name: householdtype
                      - name: pathHowConfirmed
                      - name: reason_no_services
                      - name: name_data_quality
                      - name: countOfExchangeForSex
                      - name: askedorforcedtoexchangeforsex
                      - name: residencePriorLengthOfStay
                      - name: dob_data_quality
                      - name: destination
                      - name: projecttype
                      - name: assessmentDisposition
                      - name: earlyExitReason
                      - name: reason_not_enrolled
                      - name: bedtype
                      - name: veteran_status
                      - name: funder
                      - name: relationshipToHoh
                      - name: health_status
                      - name: ethnicity
                      - name: noSchipReason
                      - name: address_data_quality
                      - name: disabilityType
                      - name: noMedicareReason
                      - name: housingAssessment
                      - name: residencePrior
                      - name: ssn_data_quality
                      - name: noAdapReason
                      - name: race
      operationId: GET_hmisTypes
  '/hmistypes/{name}/values':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dataElements"
                    ],
                    "properties": {
                      "dataElements": {
                        "type": "object",
                        "required": [
                          "dataElements"
                        ],
                        "properties": {
                          "dataElements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name",
                                "value",
                                "description"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                },
                                "value": {
                                  "type": "string",
                                },
                                "description": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  dataElements:
                    dataElements:
                      - name: address_data_quality
                        value: '1'
                        description: Full address reported
                      - name: address_data_quality
                        value: '2'
                        description: Incomplete or estimated address reported
                      - name: address_data_quality
                        value: '8'
                        description: Client doesn't know
                      - name: address_data_quality
                        value: '9'
                        description: Client refused
                      - name: address_data_quality
                        value: '99'
                        description: Data not collected
      operationId: GET_hmisTypes-name-values
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
  /questions:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "questions"
                    ],
                    "properties": {
                      "questions": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "questions"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "questions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "questionId",
                                "questionDescription",
                                "displayText",
                                "questionDataType",
                                "questionType",
                                "picklistGroupName",
                                "hudQuestionId",
                                "links",
                                "updateUriTemplate",
                                "options"
                              ],
                              "properties": {
                                "questionId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "questionDescription": {
                                  "type": "string",
                                },
                                "displayText": {
                                  "type": "string",
                                },
                                "questionDataType": {
                                  "type": "string",
                                },
                                "questionType": {
                                  "type": "string",
                                },
                                "picklistGroupName": {
                                  "type": "string",
                                },
                                "hudQuestionId": {
                                  "type": "string",
                                },
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "updateUriTemplate": {
                                  "type": "string",
                                },
                                "options": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  questions:
                    pagination:
                      from: 0
                      returned: 2
                      total: 261
                      maximum: 200
                      sort: {}
                    questions:
                    - questionId: 024c9acd-d3e1-4cc4-9800-a9db85edad45
                      questionDescription: BedInventory
                      displayText: BedInventory
                      questionDataType: STRING
                      questionType: INTEGER
                      picklistGroupName: bed_inventory
                      hudQuestionId: 2.7.6
                      links:
                      - rel: pickList
                        href: "/hmis-clientapi/rest/v2020/hmistypes/bed_inventory/values"
                      updateUriTemplate: "/v2020/projects/{projectid}/inventories/{inventoryid}"
                      options: {}
                    - questionId: 024c9acd-d3e1-4cc4-9800-a9db85edad38
                      questionDescription: Length Of Stay
                      displayText: Living Situation
                      questionDataType: STRING
                      questionType: DROPDOWN
                      picklistGroupName: lengthOfStay
                      hudQuestionId: 3.917.2
                      links:
                      - rel: pickList
                        href: "/hmis-clientapi/rest/v2020/hmistypes/lengthOfStay/values"
                      uriObjectField: enrollment.timesHomelessPastThreeYears
                      updateUriTemplate: "/v2020/clients/{clientid}/enrollments/{enrollmentid}"
                      options: {}

      operationId: GET_questions
      parameters:
        - name: text
          in: query
          description: filter on actual question text ( displayText )
          schema:
            type: string
      description: The picklist values for spacific HUD question can be fetched usign action link("pickList") in response.
  '/questions/{hudquestionid}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "question"
                    ],
                    "properties": {
                      "question": {
                        "type": "object",
                        "required": [
                          "questionId",
                          "questionDescription",
                          "displayText",
                          "questionDataType",
                          "questionType",
                          "hudQuestionId",
                          "uriObjectField",
                          "updateUriTemplate",
                          "options"
                        ],
                        "properties": {
                          "questionId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "questionDescription": {
                            "type": "string",
                          },
                          "displayText": {
                            "type": "string",
                          },
                          "questionDataType": {
                            "type": "string",
                          },
                          "questionType": {
                            "type": "string",
                          },
                          "hudQuestionId": {
                            "type": "string",
                          },
                          "uriObjectField": {
                            "type": "string",
                          },
                          "updateUriTemplate": {
                            "type": "string",
                          },
                          "options": {
                            "type": "object",
                            "required": [
                              "1",
                              "2",
                              "3",
                              "4",
                              "5",
                              "6",
                              "8",
                              "9",
                              "99"
                            ],
                            "properties": {
                              "1": {
                                "type": "string",
                              },
                              "2": {
                                "type": "string",
                              },
                              "3": {
                                "type": "string",
                              },
                              "4": {
                                "type": "string",
                              },
                              "5": {
                                "type": "string",
                              },
                              "6": {
                                "type": "string",
                              },
                              "8": {
                                "type": "string",
                              },
                              "9": {
                                "type": "string",
                              },
                              "99": {
                                "type": "string",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  question:
                    questionId: 273ec115-4a6a-4919-84e3-b8a0515fd2a7
                    questionDescription: >-
                      How long has it been since you lived in permanent stable
                      housing?
                    displayText: >-
                      2. How long has it been since you lived in permanent
                      stable housing ?
                    questionDataType: STRING
                    questionType: TEXT
                    hudQuestionId: '2'
                    uriObjectField: enrollment.timesHomelessPastThreeYears
                    updateUriTemplate: "/v2020/clients/{clientid}/enrollments/{enrollmentid}"
                    options:
                      '1': Category 1 - Homeless
                      '2': Category 2 - At imminent risk of losing housing
                      '3': At-risk of homelessness
                      '4': Stably Housed
                      '5': Category 3 - Homeless only under other federal statutes
                      '6': Category 4 - Fleeing domestic violence
                      '8': Client does not know
                      '9': Client refused
                      '99': Data not collected
      operationId: GET_questions-hudquestionid
    parameters:
      - name: hudquestionid
        in: path
        required: true
        schema:
          type: string
  /v2/questions:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "questions"
                    ],
                    "properties": {
                      "questions": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "questions"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "questions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "questionId",
                                "questionDescription",
                                "displayText",
                                "questionDataType",
                                "questionType",
                                "picklistGroupName",
                                "hudQuestionId",
                                "definition",
                                "uriObjectField",
                                "updateUriTemplate",
                                "options"
                              ],
                              "properties": {
                                "questionId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "questionDescription": {
                                  "type": "string",
                                },
                                "displayText": {
                                  "type": "string",
                                },
                                "questionDataType": {
                                  "type": "string",
                                },
                                "questionType": {
                                  "type": "string",
                                },
                                "picklistGroupName": {
                                  "type": "string",
                                },
                                "hudQuestionId": {
                                  "type": "string",
                                },
                                "definition": {
                                  "type": "object",
                                  "required": [
                                    "questionType",
                                    "title",
                                    "options"
                                  ],
                                  "properties": {
                                    "questionType": {
                                      "type": "string",
                                    },
                                    "title": {
                                      "type": "string",
                                    },
                                    "options": {
                                      "type": "object"
                                    }
                                  }
                                },
                                "uriObjectField": {
                                  "type": "string",
                                },
                                "updateUriTemplate": {
                                  "type": "string",
                                },
                                "options": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  questions:
                    pagination:
                      from: 0
                      returned: 1
                      total: 261
                      maximum: 200
                      sort: {}
                    questions:
                    - questionId: 024c9acd-d3e1-4cc4-9800-a9db85edad38
                      questionDescription: Length Of Stay
                      displayText: Living Situation
                      questionDataType: STRING
                      questionType: DROPDOWN
                      picklistGroupName: lengthOfStay
                      hudQuestionId: 3.917.2
                      definition:
                        questionType: DROPDOWN
                        title: Living Situation
                        options: {}
                      uriObjectField: enrollment.timesHomelessPastThreeYears
                      updateUriTemplate: "/v2020/clients/{clientid}/enrollments/{enrollmentid}"
                      options: {}


      operationId: GET_questions_V2
      parameters:
        - name: text
          in: query
          description: filter on actual question text ( displayText )
          schema:
            type: string
      description: The picklist values for spacific HUD question can be fetched usign action link("pickList") in response.
  /hmishouseholds:
    post:
      description: Create a house hold
      operationId: POST_hmis_household
      requestBody:
        required: true
        content:
          application/json:
             schema:
               {
                 "type": "object",
                 "required": [
                   "hmisHousehold"
                 ],
                 "properties": {
                   "hmisHousehold": {
                     "type": "object",
                     "required": [
                       "headOfHouseHold"
                     ],
                     "properties": {
                       "headOfHouseHold": {
                         "type": "object",
                         "required": [
                           "clientId"
                         ],
                         "properties": {
                           "clientId": {
                             "type": "string",
                             "format": "uuid",
                           }
                         }
                       }
                     }
                   }
                 }
               }
             example:
                hmisHousehold:
                  headOfHouseHold:
                    clientId: eac0fc00-f727-11e6-bdda-06c37be0e663
      responses:
        '200':
          description: Success
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "hmisHousehold"
                    ],
                    "properties": {
                      "hmisHousehold": {
                        "type": "object",
                        "required": [
                          "houseHoldId",
                          "houseHoldMembers"
                        ],
                        "properties": {
                          "houseHoldId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "houseHoldMembers": {
                            "type": "array",
                            "items": {
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    hmisHousehold:
                      houseHoldId: 54fbbff7-24a3-489e-bc70-eda3ae6f273f
                      houseHoldMembers: []
    get:
      responses:
        '200':
          description: Success
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "hmisHouseholds"
                    ],
                    "properties": {
                      "hmisHouseholds": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "hmisHouseholds"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "hmisHouseholds": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "houseHoldId",
                                "headOfHouseHold",
                                "houseHoldMembers"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "houseHoldId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "headOfHouseHold": {
                                  "type": "object",
                                  "required": [
                                    "links",
                                    "clientId",
                                    "dedupClientId",
                                    "firstName",
                                    "middleName",
                                    "lastName",
                                    "nameSuffix",
                                    "nameDataQuality",
                                    "ssn",
                                    "ssnDataQuality",
                                    "dob",
                                    "dobDataQuality",
                                    "race",
                                    "ethnicity",
                                    "gender"
                                  ],
                                  "properties": {
                                    "links": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "rel",
                                          "href"
                                        ],
                                        "properties": {
                                          "rel": {
                                            "type": "string",
                                          },
                                          "href": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "clientId": {
                                      "type": "string",
                                      "format": "uuid",
                                    },
                                    "dedupClientId": {
                                      "type": "string",
                                      "format": "uuid",
                                    },
                                    "firstName": {
                                      "type": "string",
                                    },
                                    "middleName": {
                                      "type": "string",
                                    },
                                    "lastName": {
                                      "type": "string",
                                    },
                                    "nameSuffix": {
                                      "type": "string",
                                    },
                                    "nameDataQuality": {
                                      "type": "integer"
                                    },
                                    "ssn": {
                                      "type": "string",
                                    },
                                    "ssnDataQuality": {
                                      "type": "integer"
                                    },
                                    "dob": {
                                      "type": "integer"
                                    },
                                    "dobDataQuality": {
                                      "type": "integer"
                                    },
                                    "race": {
                                      "type": "integer"
                                    },
                                    "ethnicity": {
                                      "type": "integer"
                                    },
                                    "gender": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "houseHoldMembers": {
                                  "type": "array",
                                  "items":{
                                    
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    hmisHouseholds:
                      pagination:
                        from: 0
                        returned: 2
                        total: 2
                        maximum: 30
                        sort: {}
                      hmisHouseholds:
                      - links:
                        - rel: enrollments
                          href: "/hmis-clientapi/rest/v2020/clients/e708f7f8-c6b4-41ba-b6f0-2bf352c08bbb/enrollments"
                        houseHoldId: 36506eb5-6e04-4f2e-9630-01f05d9e841c
                        headOfHouseHold:
                          links:
                          - rel: history
                            href: "/client/e708f7f8-c6b4-41ba-b6f0-2bf352c08bbb/history"
                          clientId: e708f7f8-c6b4-41ba-b6f0-2bf352c08bbb
                          dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                          firstName: Jeanette_1577809805634
                          middleName: ''
                          lastName: Gonzales
                          nameSuffix: ''
                          nameDataQuality: 99
                          ssn: 556-55-2266
                          ssnDataQuality: 1
                          dob: 259977600000
                          dobDataQuality: 1
                          race: 5
                          ethnicity: 0
                          gender: 0
                        houseHoldMembers: []
                      - links:
                        - rel: enrollments
                          href: "/hmis-clientapi/rest/v2020/clients/ed0c2e27-d019-46f3-80ee-4e5c8bd0af84/enrollments"
                        houseHoldId: ed0c2e27-d019-46f3-80ee-4e5c8bd0af84
                        headOfHouseHold:
                          links:
                          - rel: history
                            href: "/client/ed0c2e27-d019-46f3-80ee-4e5c8bd0af84/history"
                          clientId: ed0c2e27-d019-46f3-80ee-4e5c8bd0af84
                          dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                          firstName: Jeanette_1577809805634
                          middleName: ''
                          lastName: Gonzales
                          nameSuffix: ''
                          nameDataQuality: 99
                          ssn: 556-55-2266
                          ssnDataQuality: 1
                          dob: 259977600000
                          dobDataQuality: 1
                          race: 5
                          ethnicity: 0
                          gender: 0
                        houseHoldMembers:
                        - links:
                          - rel: enrollments
                            href: "/hmis-clientapi/rest/v2020/clients/9c7853d0-4749-490c-8b72-aa880355ec3f/enrollments"
                          houseHoldMemberId: d6bcdf5b-2f99-4ccc-8f92-8c33c9a2674f
                          member:
                            links:
                            - rel: history
                              href: "/client/9c7853d0-4749-490c-8b72-aa880355ec3f/history"
                            clientId: 9c7853d0-4749-490c-8b72-aa880355ec3f
                            dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                            firstName: Jeanette_1577809805634
                            middleName: ''
                            lastName: Gonzales
                            nameSuffix: ''
                            nameDataQuality: 99
                            ssn: 556-55-2266
                            ssnDataQuality: 1
                            dob: 259977600000
                            dobDataQuality: 1
                            race: 5
                            ethnicity: 0
                            gender: 0
                          houseHoldId: faaf6863-c426-42f6-ae26-f7105b285f0c
                          relationWithHouseHold: father

      description: Get all households
      operationId: GET_house_holds
  '/hmishouseholds/{householdid}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "hmisHousehold"
                    ],
                    "properties": {
                      "hmisHousehold": {
                        "type": "object",
                        "required": [
                          "links",
                          "houseHoldId",
                          "headOfHouseHold",
                          "houseHoldMembers"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "houseHoldId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "headOfHouseHold": {
                            "type": "object",
                            "required": [
                              "links",
                              "clientId",
                              "dedupClientId",
                              "firstName",
                              "middleName",
                              "lastName",
                              "nameSuffix",
                              "nameDataQuality",
                              "ssn",
                              "ssnDataQuality",
                              "dob",
                              "dobDataQuality",
                              "race",
                              "ethnicity",
                              "gender"
                            ],
                            "properties": {
                              "links": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "rel",
                                    "href"
                                  ],
                                  "properties": {
                                    "rel": {
                                      "type": "string",
                                    },
                                    "href": {
                                      "type": "string",
                                    }
                                  }
                                }
                              },
                              "clientId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "dedupClientId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "firstName": {
                                "type": "string",
                              },
                              "middleName": {
                                "type": "string",
                              },
                              "lastName": {
                                "type": "string",
                              },
                              "nameSuffix": {
                                "type": "string",
                              },
                              "nameDataQuality": {
                                "type": "integer"
                              },
                              "ssn": {
                                "type": "string",
                              },
                              "ssnDataQuality": {
                                "type": "integer"
                              },
                              "dob": {
                                "type": "integer"
                              },
                              "dobDataQuality": {
                                "type": "integer"
                              },
                              "race": {
                                "type": "integer"
                              },
                              "ethnicity": {
                                "type": "integer"
                              },
                              "gender": {
                                "type": "integer"
                              }
                            }
                          },
                          "houseHoldMembers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "houseHoldMemberId",
                                "member",
                                "relationWithHouseHold",
                                "houseHoldId"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "houseHoldMemberId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "member": {
                                  "type": "object",
                                  "required": [
                                    "links",
                                    "clientId",
                                    "dedupClientId",
                                    "firstName",
                                    "middleName",
                                    "lastName",
                                    "nameSuffix",
                                    "nameDataQuality",
                                    "ssn",
                                    "ssnDataQuality",
                                    "dob",
                                    "dobDataQuality",
                                    "race",
                                    "ethnicity",
                                    "gender"
                                  ],
                                  "properties": {
                                    "links": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "rel",
                                          "href"
                                        ],
                                        "properties": {
                                          "rel": {
                                            "type": "string",
                                          },
                                          "href": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "clientId": {
                                      "type": "string",
                                      "format": "uuid",
                                    },
                                    "dedupClientId": {
                                      "type": "string",
                                      "format": "uuid",
                                    },
                                    "firstName": {
                                      "type": "string",
                                    },
                                    "middleName": {
                                      "type": "string",
                                    },
                                    "lastName": {
                                      "type": "string",
                                    },
                                    "nameSuffix": {
                                      "type": "string",
                                    },
                                    "nameDataQuality": {
                                      "type": "integer"
                                    },
                                    "ssn": {
                                      "type": "string",
                                    },
                                    "ssnDataQuality": {
                                      "type": "integer"
                                    },
                                    "dob": {
                                      "type": "integer"
                                    },
                                    "dobDataQuality": {
                                      "type": "integer"
                                    },
                                    "race": {
                                      "type": "integer"
                                    },
                                    "ethnicity": {
                                      "type": "integer"
                                    },
                                    "gender": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "relationWithHouseHold": {
                                  "type": "string",
                                },
                                "houseHoldId": {
                                  "type": "string",
                                  "format": "uuid",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    hmisHousehold:
                      links:
                      - rel: enrollments
                        href: "/hmis-clientapi/rest/v2020/clients/fd3bd080-8243-438d-bb3c-430097a6b7a3/enrollments"
                      houseHoldId: 54fbbff7-24a3-489e-bc70-eda3ae6f273f
                      headOfHouseHold:
                        links:
                        - rel: history
                          href: "/client/fd3bd080-8243-438d-bb3c-430097a6b7a3/history"
                        clientId: fd3bd080-8243-438d-bb3c-430097a6b7a3
                        dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                        firstName: Jeanette_1577805760728
                        middleName: ''
                        lastName: Gonzales
                        nameSuffix: ''
                        nameDataQuality: 99
                        ssn: 556-55-2266
                        ssnDataQuality: 1
                        dob: 259977600000
                        dobDataQuality: 1
                        race: 5
                        ethnicity: 0
                        gender: 0
                      houseHoldMembers:
                      - links:
                        - rel: enrollments
                          href: "/hmis-clientapi/rest/v2020/clients/6e6ab7f1-e8fe-4784-93c4-248d97a17ef0/enrollments"
                        houseHoldMemberId: b3053a0c-1562-470c-a9c9-c28c9e9ee701
                        member:
                          links:
                          - rel: history
                            href: "/client/6e6ab7f1-e8fe-4784-93c4-248d97a17ef0/history"
                          clientId: 6e6ab7f1-e8fe-4784-93c4-248d97a17ef0
                          dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                          firstName: Jeanette_1577805760728
                          middleName: ''
                          lastName: Gonzales
                          nameSuffix: ''
                          nameDataQuality: 99
                          ssn: 556-55-2266
                          ssnDataQuality: 1
                          dob: 259977600000
                          dobDataQuality: 1
                          race: 5
                          ethnicity: 0
                          gender: 0
                        relationWithHouseHold: mather
                        houseHoldId: 54fbbff7-24a3-489e-bc70-eda3ae6f273f
                      - links:
                        - rel: enrollments
                          href: "/hmis-clientapi/rest/v2020/clients/174660d8-c1de-49cc-9bd6-788f099d38fc/enrollments"
                        houseHoldMemberId: 068824d0-735d-41e0-abb1-eb34826a4024
                        member:
                          links:
                          - rel: history
                            href: "/client/174660d8-c1de-49cc-9bd6-788f099d38fc/history"
                          clientId: 174660d8-c1de-49cc-9bd6-788f099d38fc
                          dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                          firstName: Jeanette_1577805760728
                          middleName: ''
                          lastName: Gonzales
                          nameSuffix: ''
                          nameDataQuality: 99
                          ssn: 556-55-2266
                          ssnDataQuality: 1
                          dob: 259977600000
                          dobDataQuality: 1
                          race: 5
                          ethnicity: 0
                          gender: 0
                        relationWithHouseHold: mather
                        houseHoldId: 54fbbff7-24a3-489e-bc70-eda3ae6f273f
      description: Get selected household
      operationId: GET_household_by_id
    parameters:
      - name: householdid
        in: path
        required: true
        schema:
          type: string
  '/hmishouseholds/{householdid}/members':
    put:
      responses:
        '200':
          description: ''
      description: Add member to selected household
      operationId: PUT_member_household
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "houseHoldMember"
                  ],
                  "properties": {
                    "houseHoldMember": {
                      "type": "object",
                      "required": [
                        "member",
                        "relationWithHouseHold"
                      ],
                      "properties": {
                        "member": {
                          "type": "object",
                          "required": [
                            "clientId"
                          ],
                          "properties": {
                            "clientId": {
                              "type": "string",
                              "format": "uuid",
                            }
                          }
                        },
                        "relationWithHouseHold": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                    houseHoldMember:
                      member:
                        clientId: 34a6fcd7-9626-46cd-a79a-fe740ce57826
                      relationWithHouseHold: father
        required: true
    parameters:
      - name: householdid
        in: path
        required: true
        schema:
          type: string
  '/hmishouseholds/{householdid}/members/{memberid}':
    delete:
      responses:
        '200':
          description: ''
      description: Remove member from selected house hold based on member clientid
      operationId: DELETE_member_house_hold
    parameters:
      - name: householdid
        in: path
        required: true
        schema:
          type: string
      - name: memberid
        in: path
        required: true
        schema:
          type: string
components:
  examples:
    application/json:
      id: 38
      title: T-shirt
      image:
        url: images/38.png

  responses: {}
  parameters: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    oauth_2_0:
      description: |
        The HMIS API supports OAuth 2.0 for authenticating all API requests.
      type: oauth2
      flows:
        password:
          tokenUrl: 'https://hmislynk.com/hmis-authorization-service/rest/token'
          scopes:
            user: ''
            administrator: ''
  links: {}
  callbacks: {}